
PWM_Measurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00006502  00006596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800098  00800098  000065ce  2**0
                  ALLOC
  3 .debug_aranges 00000310  00000000  00000000  000065ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f4  00000000  00000000  000068de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000409a  00000000  00000000  00006ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001663  00000000  00000000  0000af6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003a6d  00000000  00000000  0000c5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  0001003c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cc7  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00011123  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000151f0  00000000  00000000  000119b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00026ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 30 	call	0x6172	; 0x6172 <main>
      8a:	0c 94 7f 32 	jmp	0x64fe	; 0x64fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 32 	jmp	0x6408	; 0x6408 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 32 	jmp	0x6440	; 0x6440 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 32 	jmp	0x6408	; 0x6408 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 32 	jmp	0x6440	; 0x6440 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 28 32 	jmp	0x6450	; 0x6450 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 32 	jmp	0x6428	; 0x6428 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 30 32 	jmp	0x6460	; 0x6460 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer0_compare_mode_init>:
 *                      Functions Definitions
 *******************************************************************************/
/*
 * This function initiates timer0 to run in compare mode
 * */
void timer0_compare_mode_init(const timer0_CTC_config_t * timer0_CTC_config){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <timer0_compare_mode_init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	/*This bit must be set when timer0 is used in a non-PWM mode*/
	TCCR0 |= (1<<FOC0);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	8c 93       	st	X, r24

	/*The 2 bits WGM00 and WGM01 must be set to 0,1 consecutively*/
	TCCR0 |= (1 << WGM01);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24
	TCCR0 &= ~(1 << WGM00);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24

	/*Adjust the compare value per the configured value*/
	OCR0 = timer0_CTC_config -> timer0_compare_value;
     cd6:	ac e5       	ldi	r26, 0x5C	; 92
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e9 81       	ldd	r30, Y+1	; 0x01
     cdc:	fa 81       	ldd	r31, Y+2	; 0x02
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	8c 93       	st	X, r24

	/*clear the interrupt flag*/
	TIFR |= (1 << OCF0);
     ce2:	a8 e5       	ldi	r26, 0x58	; 88
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e8 e5       	ldi	r30, 0x58	; 88
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	82 60       	ori	r24, 0x02	; 2
     cee:	8c 93       	st	X, r24

	/*enable or disable interrupt per the configured value*/
	if((timer0_CTC_config -> timer0_interrupt_state) == timer0_interrupt_enable){
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	41 f4       	brne	.+16     	; 0xd0a <timer0_compare_mode_init+0x6c>
		TIMSK |= (1 << OCIE0);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	8c 93       	st	X, r24
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <timer0_compare_mode_init+0x7a>
	}else{
		TIMSK &= ~(1 << OCIE0);
     d0a:	a9 e5       	ldi	r26, 0x59	; 89
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e9 e5       	ldi	r30, 0x59	; 89
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8d 7f       	andi	r24, 0xFD	; 253
     d16:	8c 93       	st	X, r24
	}

	/*set the prescaler to the selected one*/
	TCCR0 = (TCCR0 & ~(0x07))| ((timer0_CTC_config -> timer0_clock_select)&0x07);
     d18:	a3 e5       	ldi	r26, 0x53	; 83
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e3 e5       	ldi	r30, 0x53	; 83
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	98 2f       	mov	r25, r24
     d24:	98 7f       	andi	r25, 0xF8	; 248
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	80 81       	ld	r24, Z
     d2c:	87 70       	andi	r24, 0x07	; 7
     d2e:	89 2b       	or	r24, r25
     d30:	8c 93       	st	X, r24

}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <timer0_callbackInit>:

/*This function is used to initialize timer0 callback function*/
void timer0_callbackInit(void(* timer0_callbackFunction)(void)){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <timer0_callbackInit+0x6>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
	timer0_callback_local = timer0_callbackFunction;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	90 93 9d 00 	sts	0x009D, r25
     d52:	80 93 9c 00 	sts	0x009C, r24
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <timer1_PWM_init>:
 * the frequency is calculated based on the following equation
 * (fPWM = fCPU/(Prescaler*(1+TOP))
 * with the compare value, the TOP value, the prescaler and the inversion selection as
 * input to the function
 * */
void timer1_PWM_init(const timer1_PWM_config_t * timer1_PWM_config){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <timer1_PWM_init+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01
	if(timer1_PWM_config != NULL_PTR){
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	09 f4       	brne	.+2      	; 0xd78 <timer1_PWM_init+0x18>
     d76:	6b c0       	rjmp	.+214    	; 0xe4e <timer1_PWM_init+0xee>
		/*Select either inverting or non_inverting mode*/
		if(timer1_PWM_config -> timer1_PWM_inversion_select == timer1_PWM_inverting){
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	41 f4       	brne	.+16     	; 0xd92 <timer1_PWM_init+0x32>
			TCCR1A = (TCCR1A & ~(3 << 4)) | ((timer1_PWM_inverting & 0x03) << 4);
     d82:	af e4       	ldi	r26, 0x4F	; 79
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ef e4       	ldi	r30, 0x4F	; 79
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 63       	ori	r24, 0x30	; 48
     d8e:	8c 93       	st	X, r24
     d90:	0d c0       	rjmp	.+26     	; 0xdac <timer1_PWM_init+0x4c>
		}else if(timer1_PWM_config -> timer1_PWM_inversion_select == timer1_PWM_non_inverting){
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	41 f4       	brne	.+16     	; 0xdac <timer1_PWM_init+0x4c>
			TCCR1A = (TCCR1A & ~(3 << 4)) | ((timer1_PWM_non_inverting & 0x03) << 4);
     d9c:	af e4       	ldi	r26, 0x4F	; 79
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ef e4       	ldi	r30, 0x4F	; 79
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7c       	andi	r24, 0xCF	; 207
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	8c 93       	st	X, r24
		}
		/*Clear FOC1A and FOC1B bits for PWM mode*/
		TCCR1A &= ~(3 << 2);
     dac:	af e4       	ldi	r26, 0x4F	; 79
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ef e4       	ldi	r30, 0x4F	; 79
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	83 7f       	andi	r24, 0xF3	; 243
     db8:	8c 93       	st	X, r24

		/*Select Fast PWM mode with OCR1A as the TOP*/
		TCCR1A |= (1 << WGM10) | (1 << WGM11);
     dba:	af e4       	ldi	r26, 0x4F	; 79
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ef e4       	ldi	r30, 0x4F	; 79
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	83 60       	ori	r24, 0x03	; 3
     dc6:	8c 93       	st	X, r24
		TCCR1B |= (1 << WGM12) | (1 << WGM13);
     dc8:	ae e4       	ldi	r26, 0x4E	; 78
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ee e4       	ldi	r30, 0x4E	; 78
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	88 61       	ori	r24, 0x18	; 24
     dd4:	8c 93       	st	X, r24

		/*Set the OCR1B to the compare value*/
		OCR1B = timer1_PWM_config -> timer1_PWM_compare_value;
     dd6:	a8 e4       	ldi	r26, 0x48	; 72
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e9 81       	ldd	r30, Y+1	; 0x01
     ddc:	fa 81       	ldd	r31, Y+2	; 0x02
     dde:	83 81       	ldd	r24, Z+3	; 0x03
     de0:	94 81       	ldd	r25, Z+4	; 0x04
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	9c 93       	st	X, r25
     de6:	8e 93       	st	-X, r24

		/*set the OCR1A to the TOP value*/
		OCR1A = timer1_PWM_config -> timer1_PWM_TOP;
     de8:	aa e4       	ldi	r26, 0x4A	; 74
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	85 81       	ldd	r24, Z+5	; 0x05
     df2:	96 81       	ldd	r25, Z+6	; 0x06
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	9c 93       	st	X, r25
     df8:	8e 93       	st	-X, r24

		/*set the pin OC1B as output*/
		DDRD |= 1<<PD4;
     dfa:	a1 e3       	ldi	r26, 0x31	; 49
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 61       	ori	r24, 0x10	; 16
     e06:	8c 93       	st	X, r24

		/*Enable the clock -> set the prescaler and store it for later PWM enable*/
		PWM_clock_select = timer1_PWM_config -> timer1_clock_select;
     e08:	e9 81       	ldd	r30, Y+1	; 0x01
     e0a:	fa 81       	ldd	r31, Y+2	; 0x02
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	80 93 98 00 	sts	0x0098, r24

		/*Enable or disable PWM based on the given value*/
		if((timer1_PWM_config -> timer1_PWM_state) == timer1_PWM_state_enable){
     e12:	e9 81       	ldd	r30, Y+1	; 0x01
     e14:	fa 81       	ldd	r31, Y+2	; 0x02
     e16:	80 81       	ld	r24, Z
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	69 f4       	brne	.+26     	; 0xe36 <timer1_PWM_init+0xd6>
			TCCR1B = (TCCR1B & (0xF8)) | (PWM_clock_select & 0x07);
     e1c:	ae e4       	ldi	r26, 0x4E	; 78
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	ee e4       	ldi	r30, 0x4E	; 78
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	98 2f       	mov	r25, r24
     e28:	98 7f       	andi	r25, 0xF8	; 248
     e2a:	80 91 98 00 	lds	r24, 0x0098
     e2e:	87 70       	andi	r24, 0x07	; 7
     e30:	89 2b       	or	r24, r25
     e32:	8c 93       	st	X, r24
     e34:	0c c0       	rjmp	.+24     	; 0xe4e <timer1_PWM_init+0xee>
		}else if((timer1_PWM_config -> timer1_PWM_state) == timer1_PWM_state_disable){
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	fa 81       	ldd	r31, Y+2	; 0x02
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	39 f4       	brne	.+14     	; 0xe4e <timer1_PWM_init+0xee>
			TCCR1B = (TCCR1B & (0xF8)) | (timer1_no_clock_source & 0x07);
     e40:	ae e4       	ldi	r26, 0x4E	; 78
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ee e4       	ldi	r30, 0x4E	; 78
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 7f       	andi	r24, 0xF8	; 248
     e4c:	8c 93       	st	X, r24
		}

	}
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <timer1_PWMSetCompareValue>:

/*
 * This function is used to change compare value which changes the duty cycle
 * */
void timer1_PWMSetCompareValue(const uint16 timer1_compare_value){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <timer1_PWMSetCompareValue+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = timer1_compare_value;
     e66:	e8 e4       	ldi	r30, 0x48	; 72
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	80 83       	st	Z, r24
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <timer1_PWM_deinit>:

/*
 * This function deinitializes the timer1 to the reset state to make timer1
 * available for other uses
 **/
void timer1_PWM_deinit(void){
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/*set both TCCR1A and TCCR1B to 0 which is the reset value*/
	TCCR1A = 0;
     e84:	ef e4       	ldi	r30, 0x4F	; 79
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 82       	st	Z, r1
	TCCR1B = 0;
     e8a:	ee e4       	ldi	r30, 0x4E	; 78
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	10 82       	st	Z, r1

	/*clear both OCR1A and OCR1B*/
	OCR1A = 0;
     e90:	ea e4       	ldi	r30, 0x4A	; 74
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
	OCR1B = 0;
     e98:	e8 e4       	ldi	r30, 0x48	; 72
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <timer1_PWM_disable>:

/*
 * disable timer1 clock which stops timer1 and PWM consecutively
 * */
void timer1_PWM_disable(void){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & (0xF8)) | ((timer1_no_clock_source & 0x07));
     eae:	ae e4       	ldi	r26, 0x4E	; 78
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 7f       	andi	r24, 0xF8	; 248
     eba:	8c 93       	st	X, r24
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <timer1_PWM_enable>:

/*
 * re-enable timer1 clock which enables timer1 and PWM consecutively
 * */
void timer1_PWM_enable(void){
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & (0xF8)) | ((PWM_clock_select & 0x07));
     eca:	ae e4       	ldi	r26, 0x4E	; 78
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	98 2f       	mov	r25, r24
     ed6:	98 7f       	andi	r25, 0xF8	; 248
     ed8:	80 91 98 00 	lds	r24, 0x0098
     edc:	87 70       	andi	r24, 0x07	; 7
     ede:	89 2b       	or	r24, r25
     ee0:	8c 93       	st	X, r24
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <timer1_ICU_init>:
/*
 * This function initialized timer1 to be used as an input capture unit
 * the trigger edge (falling or rising) and the prescaler are selected based on
 * the based configurations
 * */
void timer1_ICU_init(const timer1_ICU_config_t * timer1_ICU_config){
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <timer1_ICU_init+0x6>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
	if(timer1_ICU_config != NULL_PTR){
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f4       	brne	.+2      	; 0xf00 <timer1_ICU_init+0x18>
     efe:	4d c0       	rjmp	.+154    	; 0xf9a <timer1_ICU_init+0xb2>
		/*configure timer1 to work in overflow mode*/
		TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
     f00:	af e4       	ldi	r26, 0x4F	; 79
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ef e4       	ldi	r30, 0x4F	; 79
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8c 7f       	andi	r24, 0xFC	; 252
     f0c:	8c 93       	st	X, r24
		TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
     f0e:	ae e4       	ldi	r26, 0x4E	; 78
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ee e4       	ldi	r30, 0x4E	; 78
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	87 7e       	andi	r24, 0xE7	; 231
     f1a:	8c 93       	st	X, r24

		/*Set the ICES1 (ICU edge select) bit to the configured bit*/
		TCCR1B = (TCCR1B & ~(1 << ICES1)) |
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	28 2f       	mov	r18, r24
     f28:	2f 7b       	andi	r18, 0xBF	; 191
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	fa 81       	ldd	r31, Y+2	; 0x02
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	81 70       	andi	r24, 0x01	; 1
     f36:	90 70       	andi	r25, 0x00	; 0
     f38:	00 24       	eor	r0, r0
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	07 94       	ror	r0
     f40:	96 95       	lsr	r25
     f42:	87 95       	ror	r24
     f44:	07 94       	ror	r0
     f46:	98 2f       	mov	r25, r24
     f48:	80 2d       	mov	r24, r0
     f4a:	82 2b       	or	r24, r18
     f4c:	8c 93       	st	X, r24
					((timer1_ICU_config -> timer1_ICU_edge_select & 0x01) << ICES1);

		/*Set timer1 clock*/
		ICU_clock_select = timer1_ICU_config -> timer1_clock_select;
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	80 81       	ld	r24, Z
     f54:	80 93 99 00 	sts	0x0099, r24
		TCCR1B = (TCCR1B & (0xF8)) | ((ICU_clock_select & 0x07));
     f58:	ae e4       	ldi	r26, 0x4E	; 78
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ee e4       	ldi	r30, 0x4E	; 78
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	98 2f       	mov	r25, r24
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	80 91 99 00 	lds	r24, 0x0099
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	89 2b       	or	r24, r25
     f6e:	8c 93       	st	X, r24

		/*these bits are set when operating in any non_PWM mode*/
		TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
     f70:	af e4       	ldi	r26, 0x4F	; 79
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ef e4       	ldi	r30, 0x4F	; 79
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8c 60       	ori	r24, 0x0C	; 12
     f7c:	8c 93       	st	X, r24

		/*Clear the interrupt flag*/
		TIFR |= (1 << ICF1);
     f7e:	a8 e5       	ldi	r26, 0x58	; 88
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e8 e5       	ldi	r30, 0x58	; 88
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 62       	ori	r24, 0x20	; 32
     f8a:	8c 93       	st	X, r24
		/*enable ICU interrupt*/
		TIMSK |= (1 << TICIE1);
     f8c:	a9 e5       	ldi	r26, 0x59	; 89
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e9 e5       	ldi	r30, 0x59	; 89
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 62       	ori	r24, 0x20	; 32
     f98:	8c 93       	st	X, r24
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <timer1_ICU_deinit>:

/*
 * This function deinitializes the timer1 to the reset state to make timer1
 * available for other uses
 **/
void timer1_ICU_deinit(void){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	/*set both TCCR1A and TCCR1B to 0 which is the reset value*/
	TCCR1A = 0;
     fac:	ef e4       	ldi	r30, 0x4F	; 79
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1
	TCCR1B = 0;
     fb2:	ee e4       	ldi	r30, 0x4E	; 78
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	10 82       	st	Z, r1

	/*disable ICU interrupt*/
	TIMSK &= ~(1 << TICIE1);
     fb8:	a9 e5       	ldi	r26, 0x59	; 89
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e9 e5       	ldi	r30, 0x59	; 89
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7d       	andi	r24, 0xDF	; 223
     fc4:	8c 93       	st	X, r24
}
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <timer1_ICU_disable>:

/*
 * This function stops The ICU clock
 * */
void timer1_ICU_disable(void){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	TIFR &= ~(1 << ICF1);
     fd4:	a8 e5       	ldi	r26, 0x58	; 88
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e5       	ldi	r30, 0x58	; 88
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7d       	andi	r24, 0xDF	; 223
     fe0:	8c 93       	st	X, r24
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <timer1_ICU_enable>:

/*
 * This function starts The ICU clock based on the previously set value
 * */
void timer1_ICU_enable(void){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	TIFR |= (1 << ICF1);
     ff0:	a8 e5       	ldi	r26, 0x58	; 88
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e5       	ldi	r30, 0x58	; 88
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 62       	ori	r24, 0x20	; 32
     ffc:	8c 93       	st	X, r24
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <timer1_ICU_getCapturedValue>:
/*
 * This function returns the value stored in the 16-bit input capture unit register
 * */
uint16 timer1_ICU_getCapturedValue(void){
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    100c:	e6 e4       	ldi	r30, 0x46	; 70
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <timer1_ICU_callbackInit>:

/*
 * This is function is used to give a value to the call back function to be called
 * by the ISR of the ICU
 * */
void timer1_ICU_callbackInit(void(* ICU_callbackFunction)(void)){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <timer1_ICU_callbackInit+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	9a 83       	std	Y+2, r25	; 0x02
    1026:	89 83       	std	Y+1, r24	; 0x01
	ICU_callback_local = ICU_callbackFunction;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	90 93 9b 00 	sts	0x009B, r25
    1030:	80 93 9a 00 	sts	0x009A, r24
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <timer1_ICU_edgeSelect>:

/*
 * This function is used to change the trigger edge for the ICU in runtime
 * */
void timer1_ICU_edgeSelect(const timer1_ICU_edge_select_t timer1_ICU_edge_select){
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
	/*Set the ICES1 (ICU edge select) bit to the selected bit*/
			TCCR1B = (TCCR1B & ~(1 << ICES1)) |
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	28 2f       	mov	r18, r24
    1056:	2f 7b       	andi	r18, 0xBF	; 191
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 24       	eor	r0, r0
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	07 94       	ror	r0
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	07 94       	ror	r0
    1070:	98 2f       	mov	r25, r24
    1072:	80 2d       	mov	r24, r0
    1074:	82 2b       	or	r24, r18
    1076:	8c 93       	st	X, r24
						((timer1_ICU_edge_select & 0x01) << ICES1);
}
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	/*check if the user gave a value to the callback function*/
	if(timer0_callback_local != NULL_PTR){
    10aa:	80 91 9c 00 	lds	r24, 0x009C
    10ae:	90 91 9d 00 	lds	r25, 0x009D
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__vector_10+0x40>
		/*call the callback function on interrupt if it has a value*/
		(*timer0_callback_local)();
    10b6:	e0 91 9c 00 	lds	r30, 0x009C
    10ba:	f0 91 9d 00 	lds	r31, 0x009D
    10be:	09 95       	icall
	}
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_6>:

ISR(TIMER1_CAPT_vect){
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	/*check if the user gave a value to the callback function*/
	if(ICU_callback_local != NULL_PTR){
    1110:	80 91 9a 00 	lds	r24, 0x009A
    1114:	90 91 9b 00 	lds	r25, 0x009B
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	29 f0       	breq	.+10     	; 0x1126 <__vector_6+0x40>
		/*call the callback function on interrupt if it has a value*/
		(*ICU_callback_local)();
    111c:	e0 91 9a 00 	lds	r30, 0x009A
    1120:	f0 91 9b 00 	lds	r31, 0x009B
    1124:	09 95       	icall
	}
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GPIO_setupPinDirection+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_setupPinDirection+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	6a 83       	std	Y+2, r22	; 0x02
    115e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	08 f0       	brcs	.+2      	; 0x1168 <GPIO_setupPinDirection+0x1c>
    1166:	d5 c0       	rjmp	.+426    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	08 f0       	brcs	.+2      	; 0x1170 <GPIO_setupPinDirection+0x24>
    116e:	d1 c0       	rjmp	.+418    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3d 83       	std	Y+5, r19	; 0x05
    1178:	2c 83       	std	Y+4, r18	; 0x04
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <GPIO_setupPinDirection+0x3a>
    1184:	43 c0       	rjmp	.+134    	; 0x120c <GPIO_setupPinDirection+0xc0>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <GPIO_setupPinDirection+0x4e>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	71 f0       	breq	.+28     	; 0x11b4 <GPIO_setupPinDirection+0x68>
    1198:	bc c0       	rjmp	.+376    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
    119a:	2c 81       	ldd	r18, Y+4	; 0x04
    119c:	3d 81       	ldd	r19, Y+5	; 0x05
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <GPIO_setupPinDirection+0x5a>
    11a4:	5f c0       	rjmp	.+190    	; 0x1264 <GPIO_setupPinDirection+0x118>
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	9d 81       	ldd	r25, Y+5	; 0x05
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <GPIO_setupPinDirection+0x66>
    11b0:	85 c0       	rjmp	.+266    	; 0x12bc <GPIO_setupPinDirection+0x170>
    11b2:	af c0       	rjmp	.+350    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11ba:	aa e3       	ldi	r26, 0x3A	; 58
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ea e3       	ldi	r30, 0x3A	; 58
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x8c>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x88>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	98 c0       	rjmp	.+304    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11e2:	aa e3       	ldi	r26, 0x3A	; 58
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ea e3       	ldi	r30, 0x3A	; 58
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_setupPinDirection+0xb4>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_setupPinDirection+0xb0>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	83 c0       	rjmp	.+262    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	a1 f4       	brne	.+40     	; 0x123a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1212:	a7 e3       	ldi	r26, 0x37	; 55
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e7 e3       	ldi	r30, 0x37	; 55
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0xe4>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0xe0>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	6c c0       	rjmp	.+216    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    123a:	a7 e3       	ldi	r26, 0x37	; 55
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_setupPinDirection+0x10c>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_setupPinDirection+0x108>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	57 c0       	rjmp	.+174    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	a1 f4       	brne	.+40     	; 0x1292 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    126a:	a4 e3       	ldi	r26, 0x34	; 52
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e4 e3       	ldi	r30, 0x34	; 52
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_setupPinDirection+0x13c>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_setupPinDirection+0x138>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	40 c0       	rjmp	.+128    	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1292:	a4 e3       	ldi	r26, 0x34	; 52
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_setupPinDirection+0x164>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_setupPinDirection+0x160>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	2b c0       	rjmp	.+86     	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	a1 f4       	brne	.+40     	; 0x12ea <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12c2:	a1 e3       	ldi	r26, 0x31	; 49
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e1 e3       	ldi	r30, 0x31	; 49
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_setupPinDirection+0x194>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_setupPinDirection+0x190>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12ea:	a1 e3       	ldi	r26, 0x31	; 49
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e1 e3       	ldi	r30, 0x31	; 49
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_setupPinDirection+0x1bc>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_setupPinDirection+0x1b8>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <GPIO_writePin+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_writePin+0x8>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
    1334:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	08 f0       	brcs	.+2      	; 0x133e <GPIO_writePin+0x1c>
    133c:	e4 c0       	rjmp	.+456    	; 0x1506 <GPIO_writePin+0x1e4>
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	08 f0       	brcs	.+2      	; 0x1346 <GPIO_writePin+0x24>
    1344:	e0 c0       	rjmp	.+448    	; 0x1506 <GPIO_writePin+0x1e4>
		/*Do nothing*/
	}else{
		switch(port_num){
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <GPIO_writePin+0x3a>
    135a:	47 c0       	rjmp	.+142    	; 0x13ea <GPIO_writePin+0xc8>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <GPIO_writePin+0x4e>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	71 f0       	breq	.+28     	; 0x138a <GPIO_writePin+0x68>
    136e:	cb c0       	rjmp	.+406    	; 0x1506 <GPIO_writePin+0x1e4>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <GPIO_writePin+0x5a>
    137a:	67 c0       	rjmp	.+206    	; 0x144a <GPIO_writePin+0x128>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_writePin+0x66>
    1386:	91 c0       	rjmp	.+290    	; 0x14aa <GPIO_writePin+0x188>
    1388:	be c0       	rjmp	.+380    	; 0x1506 <GPIO_writePin+0x1e4>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	a1 f4       	brne	.+40     	; 0x13b8 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x8c>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x88>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	a7 c0       	rjmp	.+334    	; 0x1506 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 23       	and	r24, r24
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <GPIO_writePin+0x9e>
    13be:	a3 c0       	rjmp	.+326    	; 0x1506 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTA, pin_num);
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0xbc>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0xb8>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	8e c0       	rjmp	.+284    	; 0x1506 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH){
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	a1 f4       	brne	.+40     	; 0x1418 <GPIO_writePin+0xf6>
				SET_BIT(PORTB, pin_num);
    13f0:	a8 e3       	ldi	r26, 0x38	; 56
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e8 e3       	ldi	r30, 0x38	; 56
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_writePin+0xec>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_writePin+0xe8>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	77 c0       	rjmp	.+238    	; 0x1506 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 23       	and	r24, r24
    141c:	09 f0       	breq	.+2      	; 0x1420 <GPIO_writePin+0xfe>
    141e:	73 c0       	rjmp	.+230    	; 0x1506 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTB, pin_num);
    1420:	a8 e3       	ldi	r26, 0x38	; 56
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e8 e3       	ldi	r30, 0x38	; 56
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_writePin+0x11c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_writePin+0x118>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	5e c0       	rjmp	.+188    	; 0x1506 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTC_ID:
			if(value == LOGIC_HIGH){
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	a1 f4       	brne	.+40     	; 0x1478 <GPIO_writePin+0x156>
				SET_BIT(PORTC, pin_num);
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <GPIO_writePin+0x14c>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <GPIO_writePin+0x148>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	47 c0       	rjmp	.+142    	; 0x1506 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 23       	and	r24, r24
    147c:	09 f0       	breq	.+2      	; 0x1480 <GPIO_writePin+0x15e>
    147e:	43 c0       	rjmp	.+134    	; 0x1506 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTC, pin_num);
    1480:	a5 e3       	ldi	r26, 0x35	; 53
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_writePin+0x17c>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_writePin+0x178>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	2e c0       	rjmp	.+92     	; 0x1506 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTD_ID:
			if(value == LOGIC_HIGH){
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	a1 f4       	brne	.+40     	; 0x14d8 <GPIO_writePin+0x1b6>
				SET_BIT(PORTD, pin_num);
    14b0:	a2 e3       	ldi	r26, 0x32	; 50
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e2 e3       	ldi	r30, 0x32	; 50
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_writePin+0x1ac>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_writePin+0x1a8>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	17 c0       	rjmp	.+46     	; 0x1506 <GPIO_writePin+0x1e4>
			}else if (value == LOGIC_LOW){
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 23       	and	r24, r24
    14dc:	a1 f4       	brne	.+40     	; 0x1506 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTD, pin_num);
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_writePin+0x1da>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_writePin+0x1d6>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <GPIO_readPin+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <GPIO_readPin+0x8>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <GPIO_readPin+0xa>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	8a 83       	std	Y+2, r24	; 0x02
    1526:	6b 83       	std	Y+3, r22	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	08 f0       	brcs	.+2      	; 0x1530 <GPIO_readPin+0x1a>
    152e:	87 c0       	rjmp	.+270    	; 0x163e <GPIO_readPin+0x128>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 30       	cpi	r24, 0x08	; 8
    1534:	08 f0       	brcs	.+2      	; 0x1538 <GPIO_readPin+0x22>
    1536:	83 c0       	rjmp	.+262    	; 0x163e <GPIO_readPin+0x128>
		/*Do nothing*/
	}else{
		uint8 value;
		switch(port_num){
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3e 83       	std	Y+6, r19	; 0x06
    1540:	2d 83       	std	Y+5, r18	; 0x05
    1542:	4d 81       	ldd	r20, Y+5	; 0x05
    1544:	5e 81       	ldd	r21, Y+6	; 0x06
    1546:	41 30       	cpi	r20, 0x01	; 1
    1548:	51 05       	cpc	r21, r1
    154a:	79 f1       	breq	.+94     	; 0x15aa <GPIO_readPin+0x94>
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	34 f4       	brge	.+12     	; 0x1562 <GPIO_readPin+0x4c>
    1556:	2d 81       	ldd	r18, Y+5	; 0x05
    1558:	3e 81       	ldd	r19, Y+6	; 0x06
    155a:	21 15       	cp	r18, r1
    155c:	31 05       	cpc	r19, r1
    155e:	69 f0       	breq	.+26     	; 0x157a <GPIO_readPin+0x64>
    1560:	6b c0       	rjmp	.+214    	; 0x1638 <GPIO_readPin+0x122>
    1562:	4d 81       	ldd	r20, Y+5	; 0x05
    1564:	5e 81       	ldd	r21, Y+6	; 0x06
    1566:	42 30       	cpi	r20, 0x02	; 2
    1568:	51 05       	cpc	r21, r1
    156a:	b9 f1       	breq	.+110    	; 0x15da <GPIO_readPin+0xc4>
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_readPin+0x62>
    1576:	49 c0       	rjmp	.+146    	; 0x160a <GPIO_readPin+0xf4>
    1578:	5f c0       	rjmp	.+190    	; 0x1638 <GPIO_readPin+0x122>
		case PORTA_ID:
			if(bit_is_set(PINA, pin_num)){
    157a:	e9 e3       	ldi	r30, 0x39	; 57
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_readPin+0x7c>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_readPin+0x78>
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <GPIO_readPin+0x90>
				value = LOGIC_HIGH;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	49 c0       	rjmp	.+146    	; 0x1638 <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	47 c0       	rjmp	.+142    	; 0x1638 <GPIO_readPin+0x122>
			}
			break;

		case PORTB_ID:
			if(bit_is_set(PINB, pin_num)){
    15aa:	e6 e3       	ldi	r30, 0x36	; 54
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a9 01       	movw	r20, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_readPin+0xac>
    15be:	55 95       	asr	r21
    15c0:	47 95       	ror	r20
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_readPin+0xa8>
    15c6:	ca 01       	movw	r24, r20
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	88 23       	and	r24, r24
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <GPIO_readPin+0xc0>
				value = LOGIC_HIGH;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	31 c0       	rjmp	.+98     	; 0x1638 <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	2f c0       	rjmp	.+94     	; 0x1638 <GPIO_readPin+0x122>
			}
			break;

		case PORTC_ID:
			if(bit_is_set(PINC, pin_num)){
    15da:	e3 e3       	ldi	r30, 0x33	; 51
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_readPin+0xdc>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_readPin+0xd8>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <GPIO_readPin+0xf0>
				value = LOGIC_HIGH;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	19 c0       	rjmp	.+50     	; 0x1638 <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	17 c0       	rjmp	.+46     	; 0x1638 <GPIO_readPin+0x122>
			}
			break;

		case PORTD_ID:
			if(bit_is_set(PIND, pin_num)){
    160a:	e0 e3       	ldi	r30, 0x30	; 48
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_readPin+0x10c>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_readPin+0x108>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <GPIO_readPin+0x120>
				value = LOGIC_HIGH;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <GPIO_readPin+0x122>
			}else{
				value = LOGIC_LOW;
    1636:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
		return value;
    1638:	59 81       	ldd	r21, Y+1	; 0x01
    163a:	5c 83       	std	Y+4, r21	; 0x04
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <GPIO_readPin+0x12a>
	}
	return LOGIC_LOW;
    163e:	1c 82       	std	Y+4, r1	; 0x04
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_setupPortDirection+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_setupPortDirection+0x8>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	90 f5       	brcc	.+100    	; 0x16ce <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	d1 f0       	breq	.+52     	; 0x16b2 <GPIO_setupPortDirection+0x5e>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <GPIO_setupPortDirection+0x3e>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	61 f0       	breq	.+24     	; 0x16a8 <GPIO_setupPortDirection+0x54>
    1690:	1e c0       	rjmp	.+60     	; 0x16ce <GPIO_setupPortDirection+0x7a>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <GPIO_setupPortDirection+0x68>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	81 f0       	breq	.+32     	; 0x16c6 <GPIO_setupPortDirection+0x72>
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16a8:	ea e3       	ldi	r30, 0x3A	; 58
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16b2:	e7 e3       	ldi	r30, 0x37	; 55
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16bc:	e4 e3       	ldi	r30, 0x34	; 52
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16c6:	e1 e3       	ldi	r30, 0x31	; 49
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <GPIO_writePort+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <GPIO_writePort+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	90 f5       	brcc	.+100    	; 0x1756 <GPIO_writePort+0x7a>
		/*Do nothing*/
	}else{
		switch(port_num){
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3c 83       	std	Y+4, r19	; 0x04
    16fa:	2b 83       	std	Y+3, r18	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	d1 f0       	breq	.+52     	; 0x173a <GPIO_writePort+0x5e>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <GPIO_writePort+0x3e>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <GPIO_writePort+0x54>
    1718:	1e c0       	rjmp	.+60     	; 0x1756 <GPIO_writePort+0x7a>
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <GPIO_writePort+0x68>
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <GPIO_writePort+0x72>
    172e:	13 c0       	rjmp	.+38     	; 0x1756 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
			break;
		}
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <GPIO_setupPortDirectionMasked>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirectionMasked(uint8 port_num, uint8 mask, uint8 direction)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_setupPortDirectionMasked+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_setupPortDirectionMasked+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
    1776:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_setupPortDirectionMasked+0x1c>
    177e:	5e c0       	rjmp	.+188    	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
		/*DO nothing*/
	}else{
		switch(port_num){
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	29 f1       	breq	.+74     	; 0x17de <GPIO_setupPortDirectionMasked+0x7a>
    1794:	2c 81       	ldd	r18, Y+4	; 0x04
    1796:	3d 81       	ldd	r19, Y+5	; 0x05
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <GPIO_setupPortDirectionMasked+0x44>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <GPIO_setupPortDirectionMasked+0x5a>
    17a6:	4a c0       	rjmp	.+148    	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	31 f1       	breq	.+76     	; 0x17fe <GPIO_setupPortDirectionMasked+0x9a>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	89 f1       	breq	.+98     	; 0x181e <GPIO_setupPortDirectionMasked+0xba>
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
			case PORTA_ID:
				DDRA = (DDRA & (~mask)) | (direction & mask);
    17be:	aa e3       	ldi	r26, 0x3A	; 58
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ea e3       	ldi	r30, 0x3A	; 58
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	98 2f       	mov	r25, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 95       	com	r24
    17ce:	29 2f       	mov	r18, r25
    17d0:	28 23       	and	r18, r24
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	89 23       	and	r24, r25
    17d8:	82 2b       	or	r24, r18
    17da:	8c 93       	st	X, r24
    17dc:	2f c0       	rjmp	.+94     	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTB_ID:
				DDRB = (DDRB & (~mask)) | (direction & mask);
    17de:	a7 e3       	ldi	r26, 0x37	; 55
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	98 2f       	mov	r25, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	80 95       	com	r24
    17ee:	29 2f       	mov	r18, r25
    17f0:	28 23       	and	r18, r24
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	89 23       	and	r24, r25
    17f8:	82 2b       	or	r24, r18
    17fa:	8c 93       	st	X, r24
    17fc:	1f c0       	rjmp	.+62     	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTC_ID:
				DDRC = (DDRC & (~mask)) | (direction & mask);
    17fe:	a4 e3       	ldi	r26, 0x34	; 52
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e4 e3       	ldi	r30, 0x34	; 52
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	98 2f       	mov	r25, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 95       	com	r24
    180e:	29 2f       	mov	r18, r25
    1810:	28 23       	and	r18, r24
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	89 23       	and	r24, r25
    1818:	82 2b       	or	r24, r18
    181a:	8c 93       	st	X, r24
    181c:	0f c0       	rjmp	.+30     	; 0x183c <GPIO_setupPortDirectionMasked+0xd8>
				break;

			case PORTD_ID:
				DDRD = (DDRD & (~mask)) | (direction & mask);
    181e:	a1 e3       	ldi	r26, 0x31	; 49
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	98 2f       	mov	r25, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	80 95       	com	r24
    182e:	29 2f       	mov	r18, r25
    1830:	28 23       	and	r18, r24
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	89 23       	and	r24, r25
    1838:	82 2b       	or	r24, r18
    183a:	8c 93       	st	X, r24
				break;
		}
	}
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <GPIO_writePortMasked>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePortMasked(uint8 port_num, uint8 mask, uint8 value)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <GPIO_writePortMasked+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <GPIO_writePortMasked+0x8>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	6a 83       	std	Y+2, r22	; 0x02
    185e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	08 f0       	brcs	.+2      	; 0x1868 <GPIO_writePortMasked+0x1c>
    1866:	5e c0       	rjmp	.+188    	; 0x1924 <GPIO_writePortMasked+0xd8>
		/*DO nothing*/
	}else{
		switch(port_num){
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3d 83       	std	Y+5, r19	; 0x05
    1870:	2c 83       	std	Y+4, r18	; 0x04
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	29 f1       	breq	.+74     	; 0x18c6 <GPIO_writePortMasked+0x7a>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	2c f4       	brge	.+10     	; 0x1890 <GPIO_writePortMasked+0x44>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	61 f0       	breq	.+24     	; 0x18a6 <GPIO_writePortMasked+0x5a>
    188e:	4a c0       	rjmp	.+148    	; 0x1924 <GPIO_writePortMasked+0xd8>
    1890:	2c 81       	ldd	r18, Y+4	; 0x04
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	31 f1       	breq	.+76     	; 0x18e6 <GPIO_writePortMasked+0x9a>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	89 f1       	breq	.+98     	; 0x1906 <GPIO_writePortMasked+0xba>
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <GPIO_writePortMasked+0xd8>
			case PORTA_ID:
				PORTA = (PORTA & (~mask)) | (value & mask);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	98 2f       	mov	r25, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 95       	com	r24
    18b6:	29 2f       	mov	r18, r25
    18b8:	28 23       	and	r18, r24
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	89 23       	and	r24, r25
    18c0:	82 2b       	or	r24, r18
    18c2:	8c 93       	st	X, r24
    18c4:	2f c0       	rjmp	.+94     	; 0x1924 <GPIO_writePortMasked+0xd8>
				break;

			case PORTB_ID:
				PORTB = (PORTB & (~mask)) | (value & mask);
    18c6:	a8 e3       	ldi	r26, 0x38	; 56
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e8 e3       	ldi	r30, 0x38	; 56
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	98 2f       	mov	r25, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	80 95       	com	r24
    18d6:	29 2f       	mov	r18, r25
    18d8:	28 23       	and	r18, r24
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	89 23       	and	r24, r25
    18e0:	82 2b       	or	r24, r18
    18e2:	8c 93       	st	X, r24
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <GPIO_writePortMasked+0xd8>
				break;

			case PORTC_ID:
				PORTC = (PORTC & (~mask)) | (value & mask);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	98 2f       	mov	r25, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 95       	com	r24
    18f6:	29 2f       	mov	r18, r25
    18f8:	28 23       	and	r18, r24
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	89 23       	and	r24, r25
    1900:	82 2b       	or	r24, r18
    1902:	8c 93       	st	X, r24
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <GPIO_writePortMasked+0xd8>
				break;

			case PORTD_ID:
				PORTD = (PORTD & (~mask)) | (value & mask);
    1906:	a2 e3       	ldi	r26, 0x32	; 50
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e2 e3       	ldi	r30, 0x32	; 50
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	98 2f       	mov	r25, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 95       	com	r24
    1916:	29 2f       	mov	r18, r25
    1918:	28 23       	and	r18, r24
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	89 23       	and	r24, r25
    1920:	82 2b       	or	r24, r18
    1922:	8c 93       	st	X, r24
				break;
		}
	}
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_readPort+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <GPIO_readPort+0x8>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	8a 83       	std	Y+2, r24	; 0x02
	if(port_num >= NUM_OF_PORTS){
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	a8 f5       	brcc	.+106    	; 0x19b4 <GPIO_readPort+0x80>
		/*Do nothing*/
	}else{
		uint8 value;
		switch(port_num){
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3d 83       	std	Y+5, r19	; 0x05
    1952:	2c 83       	std	Y+4, r18	; 0x04
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	d1 f0       	breq	.+52     	; 0x1992 <GPIO_readPort+0x5e>
    195e:	2c 81       	ldd	r18, Y+4	; 0x04
    1960:	3d 81       	ldd	r19, Y+5	; 0x05
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <GPIO_readPort+0x3e>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	61 f0       	breq	.+24     	; 0x1988 <GPIO_readPort+0x54>
    1970:	1e c0       	rjmp	.+60     	; 0x19ae <GPIO_readPort+0x7a>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <GPIO_readPort+0x68>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <GPIO_readPort+0x72>
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1988:	e9 e3       	ldi	r30, 0x39	; 57
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19a6:	e0 e3       	ldi	r30, 0x30	; 48
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return value;
    19ae:	99 81       	ldd	r25, Y+1	; 0x01
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <GPIO_readPort+0x82>
	}
	return 0;
    19b4:	1b 82       	std	Y+3, r1	; 0x03
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <seven_segment_init>:
#include "seven_segment.h"


#if SEVEN_SEGMENT_MODE == SEVEN_SEGMENT_DIRECT_MODE
void seven_segment_init(uint8 seven_segment_port,uint8 seven_segment_offset,
	uint8 seven_segment_enable_port, uint8 seven_Segment_enable_pin){
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <seven_segment_init+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <seven_segment_init+0x8>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	6a 83       	std	Y+2, r22	; 0x02
    19d8:	4b 83       	std	Y+3, r20	; 0x03
    19da:	2c 83       	std	Y+4, r18	; 0x04
	GPIO_setupPortDirectionMasked(seven_segment_port, 0x7F<<seven_segment_offset, PORT_OUTPUT);
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8f e7       	ldi	r24, 0x7F	; 127
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <seven_segment_init+0x24>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	2a 95       	dec	r18
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <seven_segment_init+0x20>
    19f0:	98 2f       	mov	r25, r24
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	69 2f       	mov	r22, r25
    19f6:	4f ef       	ldi	r20, 0xFF	; 255
    19f8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPortDirectionMasked>
	GPIO_setupPinDirection(seven_segment_enable_port, seven_Segment_enable_pin, PIN_OUTPUT);
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	6c 81       	ldd	r22, Y+4	; 0x04
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 a6 08 	call	0x114c	; 0x114c <GPIO_setupPinDirection>
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <lcd_sendCommand>:
	}else{
		_delay_us(100);
	}
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_sendCommand(uint8 command){
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	c7 5b       	subi	r28, 0xB7	; 183
    1a22:	d0 40       	sbci	r29, 0x00	; 0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e9 54       	subi	r30, 0x49	; 73
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    1a40:	fe 01       	movw	r30, r28
    1a42:	ed 54       	subi	r30, 0x4D	; 77
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b2 e4       	ldi	r27, 0x42	; 66
    1a4e:	80 83       	st	Z, r24
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	a2 83       	std	Z+2, r26	; 0x02
    1a54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a56:	8e 01       	movw	r16, r28
    1a58:	01 55       	subi	r16, 0x51	; 81
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ed 54       	subi	r30, 0x4D	; 77
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	2b ea       	ldi	r18, 0xAB	; 171
    1a6c:	3a ea       	ldi	r19, 0xAA	; 170
    1a6e:	4a ea       	ldi	r20, 0xAA	; 170
    1a70:	5e e3       	ldi	r21, 0x3E	; 62
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	80 83       	st	Z, r24
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	a2 83       	std	Z+2, r26	; 0x02
    1a82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a84:	fe 01       	movw	r30, r28
    1a86:	e1 55       	subi	r30, 0x51	; 81
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	34 f4       	brge	.+12     	; 0x1aae <lcd_sendCommand+0x9a>
		__ticks = 1;
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e2 55       	subi	r30, 0x52	; 82
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
    1aac:	e0 c0       	rjmp	.+448    	; 0x1c6e <lcd_sendCommand+0x25a>
	else if (__tmp > 255)
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e1 55       	subi	r30, 0x51	; 81
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	53 e4       	ldi	r21, 0x43	; 67
    1ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	0c f0       	brlt	.+2      	; 0x1ace <lcd_sendCommand+0xba>
    1acc:	c0 c0       	rjmp	.+384    	; 0x1c4e <lcd_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ed 54       	subi	r30, 0x4D	; 77
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a e7       	ldi	r20, 0x7A	; 122
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	fe 01       	movw	r30, r28
    1aee:	e6 55       	subi	r30, 0x56	; 86
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 83       	st	Z, r24
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	a2 83       	std	Z+2, r26	; 0x02
    1af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	8e 01       	movw	r16, r28
    1afc:	0a 55       	subi	r16, 0x5A	; 90
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e6 55       	subi	r30, 0x56	; 86
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 83       	st	Z, r24
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	a2 83       	std	Z+2, r26	; 0x02
    1b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ea 55       	subi	r30, 0x5A	; 90
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	44 f4       	brge	.+16     	; 0x1b56 <lcd_sendCommand+0x142>
		__ticks = 1;
    1b46:	fe 01       	movw	r30, r28
    1b48:	ec 55       	subi	r30, 0x5C	; 92
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	64 c0       	rjmp	.+200    	; 0x1c1e <lcd_sendCommand+0x20a>
	else if (__tmp > 65535)
    1b56:	fe 01       	movw	r30, r28
    1b58:	ea 55       	subi	r30, 0x5A	; 90
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <lcd_sendCommand+0x162>
    1b74:	43 c0       	rjmp	.+134    	; 0x1bfc <lcd_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	fe 01       	movw	r30, r28
    1b78:	e6 55       	subi	r30, 0x56	; 86
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8e 01       	movw	r16, r28
    1b96:	0c 55       	subi	r16, 0x5C	; 92
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	1f c0       	rjmp	.+62     	; 0x1bec <lcd_sendCommand+0x1d8>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ee 55       	subi	r30, 0x5E	; 94
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ee 55       	subi	r30, 0x5E	; 94
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <lcd_sendCommand+0x1b2>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ee 55       	subi	r30, 0x5E	; 94
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	de 01       	movw	r26, r28
    1bd6:	ac 55       	subi	r26, 0x5C	; 92
    1bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ec 55       	subi	r30, 0x5C	; 92
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	9c 93       	st	X, r25
    1bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	fe 01       	movw	r30, r28
    1bee:	ec 55       	subi	r30, 0x5C	; 92
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	d1 f6       	brne	.-76     	; 0x1bae <lcd_sendCommand+0x19a>
    1bfa:	4b c0       	rjmp	.+150    	; 0x1c92 <lcd_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	0c 55       	subi	r16, 0x5C	; 92
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	ea 55       	subi	r30, 0x5A	; 90
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	f8 01       	movw	r30, r16
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	de 01       	movw	r26, r28
    1c20:	a0 56       	subi	r26, 0x60	; 96
    1c22:	bf 4f       	sbci	r27, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	ec 55       	subi	r30, 0x5C	; 92
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	11 96       	adiw	r26, 0x01	; 1
    1c30:	9c 93       	st	X, r25
    1c32:	8e 93       	st	-X, r24
    1c34:	fe 01       	movw	r30, r28
    1c36:	e0 56       	subi	r30, 0x60	; 96
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <lcd_sendCommand+0x22a>
    1c42:	fe 01       	movw	r30, r28
    1c44:	e0 56       	subi	r30, 0x60	; 96
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	22 c0       	rjmp	.+68     	; 0x1c92 <lcd_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	02 55       	subi	r16, 0x52	; 82
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	e1 55       	subi	r30, 0x51	; 81
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	de 01       	movw	r26, r28
    1c70:	a1 56       	subi	r26, 0x61	; 97
    1c72:	bf 4f       	sbci	r27, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	e2 55       	subi	r30, 0x52	; 82
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e1 56       	subi	r30, 0x61	; 97
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	8a 95       	dec	r24
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <lcd_sendCommand+0x272>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e1 56       	subi	r30, 0x61	; 97
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e5 56       	subi	r30, 0x65	; 101
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a8 e4       	ldi	r26, 0x48	; 72
    1ca8:	b2 e4       	ldi	r27, 0x42	; 66
    1caa:	80 83       	st	Z, r24
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	a2 83       	std	Z+2, r26	; 0x02
    1cb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cb2:	8e 01       	movw	r16, r28
    1cb4:	09 56       	subi	r16, 0x69	; 105
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e5 56       	subi	r30, 0x65	; 101
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	2b ea       	ldi	r18, 0xAB	; 171
    1cc8:	3a ea       	ldi	r19, 0xAA	; 170
    1cca:	4a ea       	ldi	r20, 0xAA	; 170
    1ccc:	5e e3       	ldi	r21, 0x3E	; 62
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	a2 83       	std	Z+2, r26	; 0x02
    1cde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e9 56       	subi	r30, 0x69	; 105
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	34 f4       	brge	.+12     	; 0x1d0a <lcd_sendCommand+0x2f6>
		__ticks = 1;
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ea 56       	subi	r30, 0x6A	; 106
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 83       	st	Z, r24
    1d08:	e0 c0       	rjmp	.+448    	; 0x1eca <lcd_sendCommand+0x4b6>
	else if (__tmp > 255)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e9 56       	subi	r30, 0x69	; 105
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	0c f0       	brlt	.+2      	; 0x1d2a <lcd_sendCommand+0x316>
    1d28:	c0 c0       	rjmp	.+384    	; 0x1eaa <lcd_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e5 56       	subi	r30, 0x65	; 101
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ee 56       	subi	r30, 0x6E	; 110
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 83       	st	Z, r24
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	a2 83       	std	Z+2, r26	; 0x02
    1d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	8e 01       	movw	r16, r28
    1d58:	02 57       	subi	r16, 0x72	; 114
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ee 56       	subi	r30, 0x6E	; 110
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	53 e4       	ldi	r21, 0x43	; 67
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e2 57       	subi	r30, 0x72	; 114
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	44 f4       	brge	.+16     	; 0x1db2 <lcd_sendCommand+0x39e>
		__ticks = 1;
    1da2:	fe 01       	movw	r30, r28
    1da4:	e4 57       	subi	r30, 0x74	; 116
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	64 c0       	rjmp	.+200    	; 0x1e7a <lcd_sendCommand+0x466>
	else if (__tmp > 65535)
    1db2:	fe 01       	movw	r30, r28
    1db4:	e2 57       	subi	r30, 0x72	; 114
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	0c f0       	brlt	.+2      	; 0x1dd2 <lcd_sendCommand+0x3be>
    1dd0:	43 c0       	rjmp	.+134    	; 0x1e58 <lcd_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ee 56       	subi	r30, 0x6E	; 110
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8e 01       	movw	r16, r28
    1df2:	04 57       	subi	r16, 0x74	; 116
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	f8 01       	movw	r30, r16
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	1f c0       	rjmp	.+62     	; 0x1e48 <lcd_sendCommand+0x434>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e6 57       	subi	r30, 0x76	; 118
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	89 e1       	ldi	r24, 0x19	; 25
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e6 57       	subi	r30, 0x76	; 118
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <lcd_sendCommand+0x40e>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e6 57       	subi	r30, 0x76	; 118
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	de 01       	movw	r26, r28
    1e32:	a4 57       	subi	r26, 0x74	; 116
    1e34:	bf 4f       	sbci	r27, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	e4 57       	subi	r30, 0x74	; 116
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	11 96       	adiw	r26, 0x01	; 1
    1e44:	9c 93       	st	X, r25
    1e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e4 57       	subi	r30, 0x74	; 116
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	d1 f6       	brne	.-76     	; 0x1e0a <lcd_sendCommand+0x3f6>
    1e56:	4b c0       	rjmp	.+150    	; 0x1eee <lcd_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	04 57       	subi	r16, 0x74	; 116
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e2 57       	subi	r30, 0x72	; 114
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	de 01       	movw	r26, r28
    1e7c:	a8 57       	subi	r26, 0x78	; 120
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e4 57       	subi	r30, 0x74	; 116
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	9c 93       	st	X, r25
    1e8e:	8e 93       	st	-X, r24
    1e90:	fe 01       	movw	r30, r28
    1e92:	e8 57       	subi	r30, 0x78	; 120
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <lcd_sendCommand+0x486>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e8 57       	subi	r30, 0x78	; 120
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	22 c0       	rjmp	.+68     	; 0x1eee <lcd_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eaa:	8e 01       	movw	r16, r28
    1eac:	0a 56       	subi	r16, 0x6A	; 106
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e9 56       	subi	r30, 0x69	; 105
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 83       	st	Z, r24
    1eca:	de 01       	movw	r26, r28
    1ecc:	a9 57       	subi	r26, 0x79	; 121
    1ece:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ea 56       	subi	r30, 0x6A	; 106
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 57       	subi	r30, 0x79	; 121
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8a 95       	dec	r24
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <lcd_sendCommand+0x4ce>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e9 57       	subi	r30, 0x79	; 121
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((command & 0xF0) >> 4) << LCD_DATA_BUS_PORT_OFFSET);
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e9 54       	subi	r30, 0x49	; 73
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	82 95       	swap	r24
    1ef8:	8f 70       	andi	r24, 0x0F	; 15
    1efa:	98 2f       	mov	r25, r24
    1efc:	99 0f       	add	r25, r25
    1efe:	99 0f       	add	r25, r25
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	6c e3       	ldi	r22, 0x3C	; 60
    1f04:	49 2f       	mov	r20, r25
    1f06:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ed 57       	subi	r30, 0x7D	; 125
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a8 e4       	ldi	r26, 0x48	; 72
    1f16:	b2 e4       	ldi	r27, 0x42	; 66
    1f18:	80 83       	st	Z, r24
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	a2 83       	std	Z+2, r26	; 0x02
    1f1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f20:	8e 01       	movw	r16, r28
    1f22:	01 58       	subi	r16, 0x81	; 129
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	ed 57       	subi	r30, 0x7D	; 125
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	2b ea       	ldi	r18, 0xAB	; 171
    1f36:	3a ea       	ldi	r19, 0xAA	; 170
    1f38:	4a ea       	ldi	r20, 0xAA	; 170
    1f3a:	5e e3       	ldi	r21, 0x3E	; 62
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	f8 01       	movw	r30, r16
    1f46:	80 83       	st	Z, r24
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	a2 83       	std	Z+2, r26	; 0x02
    1f4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e1 58       	subi	r30, 0x81	; 129
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	34 f4       	brge	.+12     	; 0x1f78 <lcd_sendCommand+0x564>
		__ticks = 1;
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e2 58       	subi	r30, 0x82	; 130
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 83       	st	Z, r24
    1f76:	e0 c0       	rjmp	.+448    	; 0x2138 <lcd_sendCommand+0x724>
	else if (__tmp > 255)
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e1 58       	subi	r30, 0x81	; 129
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	53 e4       	ldi	r21, 0x43	; 67
    1f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <lcd_sendCommand+0x584>
    1f96:	c0 c0       	rjmp	.+384    	; 0x2118 <lcd_sendCommand+0x704>
	{
		_delay_ms(__us / 1000.0);
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ed 57       	subi	r30, 0x7D	; 125
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a e7       	ldi	r20, 0x7A	; 122
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e6 58       	subi	r30, 0x86	; 134
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	0a 58       	subi	r16, 0x8A	; 138
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e6 58       	subi	r30, 0x86	; 134
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ea 58       	subi	r30, 0x8A	; 138
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	44 f4       	brge	.+16     	; 0x2020 <lcd_sendCommand+0x60c>
		__ticks = 1;
    2010:	fe 01       	movw	r30, r28
    2012:	ec 58       	subi	r30, 0x8C	; 140
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	64 c0       	rjmp	.+200    	; 0x20e8 <lcd_sendCommand+0x6d4>
	else if (__tmp > 65535)
    2020:	fe 01       	movw	r30, r28
    2022:	ea 58       	subi	r30, 0x8A	; 138
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <lcd_sendCommand+0x62c>
    203e:	43 c0       	rjmp	.+134    	; 0x20c6 <lcd_sendCommand+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	fe 01       	movw	r30, r28
    2042:	e6 58       	subi	r30, 0x86	; 134
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8e 01       	movw	r16, r28
    2060:	0c 58       	subi	r16, 0x8C	; 140
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	1f c0       	rjmp	.+62     	; 0x20b6 <lcd_sendCommand+0x6a2>
    2078:	fe 01       	movw	r30, r28
    207a:	ee 58       	subi	r30, 0x8E	; 142
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2086:	fe 01       	movw	r30, r28
    2088:	ee 58       	subi	r30, 0x8E	; 142
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <lcd_sendCommand+0x67c>
    2094:	fe 01       	movw	r30, r28
    2096:	ee 58       	subi	r30, 0x8E	; 142
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	de 01       	movw	r26, r28
    20a0:	ac 58       	subi	r26, 0x8C	; 140
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	ec 58       	subi	r30, 0x8C	; 140
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	fe 01       	movw	r30, r28
    20b8:	ec 58       	subi	r30, 0x8C	; 140
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	d1 f6       	brne	.-76     	; 0x2078 <lcd_sendCommand+0x664>
    20c4:	4b c0       	rjmp	.+150    	; 0x215c <lcd_sendCommand+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	8e 01       	movw	r16, r28
    20c8:	0c 58       	subi	r16, 0x8C	; 140
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	ea 58       	subi	r30, 0x8A	; 138
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	de 01       	movw	r26, r28
    20ea:	a0 59       	subi	r26, 0x90	; 144
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	ec 58       	subi	r30, 0x8C	; 140
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	11 96       	adiw	r26, 0x01	; 1
    20fa:	9c 93       	st	X, r25
    20fc:	8e 93       	st	-X, r24
    20fe:	fe 01       	movw	r30, r28
    2100:	e0 59       	subi	r30, 0x90	; 144
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <lcd_sendCommand+0x6f4>
    210c:	fe 01       	movw	r30, r28
    210e:	e0 59       	subi	r30, 0x90	; 144
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
    2116:	22 c0       	rjmp	.+68     	; 0x215c <lcd_sendCommand+0x748>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2118:	8e 01       	movw	r16, r28
    211a:	02 58       	subi	r16, 0x82	; 130
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	fe 01       	movw	r30, r28
    2120:	e1 58       	subi	r30, 0x81	; 129
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	f8 01       	movw	r30, r16
    2136:	80 83       	st	Z, r24
    2138:	de 01       	movw	r26, r28
    213a:	a1 59       	subi	r26, 0x91	; 145
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e2 58       	subi	r30, 0x82	; 130
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2148:	fe 01       	movw	r30, r28
    214a:	e1 59       	subi	r30, 0x91	; 145
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	8a 95       	dec	r24
    2152:	f1 f7       	brne	.-4      	; 0x2150 <lcd_sendCommand+0x73c>
    2154:	fe 01       	movw	r30, r28
    2156:	e1 59       	subi	r30, 0x91	; 145
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    2166:	fe 01       	movw	r30, r28
    2168:	e5 59       	subi	r30, 0x95	; 149
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a8 e4       	ldi	r26, 0x48	; 72
    2172:	b2 e4       	ldi	r27, 0x42	; 66
    2174:	80 83       	st	Z, r24
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	a2 83       	std	Z+2, r26	; 0x02
    217a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    217c:	8e 01       	movw	r16, r28
    217e:	09 59       	subi	r16, 0x99	; 153
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	e5 59       	subi	r30, 0x95	; 149
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	2b ea       	ldi	r18, 0xAB	; 171
    2192:	3a ea       	ldi	r19, 0xAA	; 170
    2194:	4a ea       	ldi	r20, 0xAA	; 170
    2196:	5e e3       	ldi	r21, 0x3E	; 62
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	f8 01       	movw	r30, r16
    21a2:	80 83       	st	Z, r24
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	a2 83       	std	Z+2, r26	; 0x02
    21a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21aa:	fe 01       	movw	r30, r28
    21ac:	e9 59       	subi	r30, 0x99	; 153
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	34 f4       	brge	.+12     	; 0x21d4 <lcd_sendCommand+0x7c0>
		__ticks = 1;
    21c8:	fe 01       	movw	r30, r28
    21ca:	ea 59       	subi	r30, 0x9A	; 154
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	80 83       	st	Z, r24
    21d2:	e0 c0       	rjmp	.+448    	; 0x2394 <lcd_sendCommand+0x980>
	else if (__tmp > 255)
    21d4:	fe 01       	movw	r30, r28
    21d6:	e9 59       	subi	r30, 0x99	; 153
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	53 e4       	ldi	r21, 0x43	; 67
    21ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <lcd_sendCommand+0x7e0>
    21f2:	c0 c0       	rjmp	.+384    	; 0x2374 <lcd_sendCommand+0x960>
	{
		_delay_ms(__us / 1000.0);
    21f4:	fe 01       	movw	r30, r28
    21f6:	e5 59       	subi	r30, 0x95	; 149
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a e7       	ldi	r20, 0x7A	; 122
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	fe 01       	movw	r30, r28
    2214:	ee 59       	subi	r30, 0x9E	; 158
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 83       	st	Z, r24
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	a2 83       	std	Z+2, r26	; 0x02
    221e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	8e 01       	movw	r16, r28
    2222:	02 5a       	subi	r16, 0xA2	; 162
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	fe 01       	movw	r30, r28
    2228:	ee 59       	subi	r30, 0x9E	; 158
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	a2 83       	std	Z+2, r26	; 0x02
    224c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    224e:	fe 01       	movw	r30, r28
    2250:	e2 5a       	subi	r30, 0xA2	; 162
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	44 f4       	brge	.+16     	; 0x227c <lcd_sendCommand+0x868>
		__ticks = 1;
    226c:	fe 01       	movw	r30, r28
    226e:	e4 5a       	subi	r30, 0xA4	; 164
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	80 83       	st	Z, r24
    227a:	64 c0       	rjmp	.+200    	; 0x2344 <lcd_sendCommand+0x930>
	else if (__tmp > 65535)
    227c:	fe 01       	movw	r30, r28
    227e:	e2 5a       	subi	r30, 0xA2	; 162
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	0c f0       	brlt	.+2      	; 0x229c <lcd_sendCommand+0x888>
    229a:	43 c0       	rjmp	.+134    	; 0x2322 <lcd_sendCommand+0x90e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	fe 01       	movw	r30, r28
    229e:	ee 59       	subi	r30, 0x9E	; 158
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8e 01       	movw	r16, r28
    22bc:	04 5a       	subi	r16, 0xA4	; 164
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	1f c0       	rjmp	.+62     	; 0x2312 <lcd_sendCommand+0x8fe>
    22d4:	fe 01       	movw	r30, r28
    22d6:	e6 5a       	subi	r30, 0xA6	; 166
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	89 e1       	ldi	r24, 0x19	; 25
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e2:	fe 01       	movw	r30, r28
    22e4:	e6 5a       	subi	r30, 0xA6	; 166
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <lcd_sendCommand+0x8d8>
    22f0:	fe 01       	movw	r30, r28
    22f2:	e6 5a       	subi	r30, 0xA6	; 166
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	de 01       	movw	r26, r28
    22fc:	a4 5a       	subi	r26, 0xA4	; 164
    22fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	e4 5a       	subi	r30, 0xA4	; 164
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	11 96       	adiw	r26, 0x01	; 1
    230e:	9c 93       	st	X, r25
    2310:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	fe 01       	movw	r30, r28
    2314:	e4 5a       	subi	r30, 0xA4	; 164
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	d1 f6       	brne	.-76     	; 0x22d4 <lcd_sendCommand+0x8c0>
    2320:	4b c0       	rjmp	.+150    	; 0x23b8 <lcd_sendCommand+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	8e 01       	movw	r16, r28
    2324:	04 5a       	subi	r16, 0xA4	; 164
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	fe 01       	movw	r30, r28
    232a:	e2 5a       	subi	r30, 0xA2	; 162
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	f8 01       	movw	r30, r16
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
    2344:	de 01       	movw	r26, r28
    2346:	a8 5a       	subi	r26, 0xA8	; 168
    2348:	bf 4f       	sbci	r27, 0xFF	; 255
    234a:	fe 01       	movw	r30, r28
    234c:	e4 5a       	subi	r30, 0xA4	; 164
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	9c 93       	st	X, r25
    2358:	8e 93       	st	-X, r24
    235a:	fe 01       	movw	r30, r28
    235c:	e8 5a       	subi	r30, 0xA8	; 168
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <lcd_sendCommand+0x950>
    2368:	fe 01       	movw	r30, r28
    236a:	e8 5a       	subi	r30, 0xA8	; 168
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	22 c0       	rjmp	.+68     	; 0x23b8 <lcd_sendCommand+0x9a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2374:	8e 01       	movw	r16, r28
    2376:	0a 59       	subi	r16, 0x9A	; 154
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	e9 59       	subi	r30, 0x99	; 153
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	f8 01       	movw	r30, r16
    2392:	80 83       	st	Z, r24
    2394:	de 01       	movw	r26, r28
    2396:	a9 5a       	subi	r26, 0xA9	; 169
    2398:	bf 4f       	sbci	r27, 0xFF	; 255
    239a:	fe 01       	movw	r30, r28
    239c:	ea 59       	subi	r30, 0x9A	; 154
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 5a       	subi	r30, 0xA9	; 169
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	8a 95       	dec	r24
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <lcd_sendCommand+0x998>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e9 5a       	subi	r30, 0xA9	; 169
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 5a       	subi	r30, 0xAD	; 173
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a8 e4       	ldi	r26, 0x48	; 72
    23ce:	b2 e4       	ldi	r27, 0x42	; 66
    23d0:	80 83       	st	Z, r24
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	a2 83       	std	Z+2, r26	; 0x02
    23d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23d8:	8e 01       	movw	r16, r28
    23da:	01 5b       	subi	r16, 0xB1	; 177
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	ed 5a       	subi	r30, 0xAD	; 173
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	2b ea       	ldi	r18, 0xAB	; 171
    23ee:	3a ea       	ldi	r19, 0xAA	; 170
    23f0:	4a ea       	ldi	r20, 0xAA	; 170
    23f2:	5e e3       	ldi	r21, 0x3E	; 62
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	f8 01       	movw	r30, r16
    23fe:	80 83       	st	Z, r24
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	a2 83       	std	Z+2, r26	; 0x02
    2404:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2406:	fe 01       	movw	r30, r28
    2408:	e1 5b       	subi	r30, 0xB1	; 177
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	34 f4       	brge	.+12     	; 0x2430 <lcd_sendCommand+0xa1c>
		__ticks = 1;
    2424:	fe 01       	movw	r30, r28
    2426:	e2 5b       	subi	r30, 0xB2	; 178
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 83       	st	Z, r24
    242e:	e0 c0       	rjmp	.+448    	; 0x25f0 <lcd_sendCommand+0xbdc>
	else if (__tmp > 255)
    2430:	fe 01       	movw	r30, r28
    2432:	e1 5b       	subi	r30, 0xB1	; 177
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	53 e4       	ldi	r21, 0x43	; 67
    2446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    244a:	18 16       	cp	r1, r24
    244c:	0c f0       	brlt	.+2      	; 0x2450 <lcd_sendCommand+0xa3c>
    244e:	c0 c0       	rjmp	.+384    	; 0x25d0 <lcd_sendCommand+0xbbc>
	{
		_delay_ms(__us / 1000.0);
    2450:	fe 01       	movw	r30, r28
    2452:	ed 5a       	subi	r30, 0xAD	; 173
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a e7       	ldi	r20, 0x7A	; 122
    2464:	54 e4       	ldi	r21, 0x44	; 68
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	fe 01       	movw	r30, r28
    2470:	e6 5b       	subi	r30, 0xB6	; 182
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	8e 01       	movw	r16, r28
    247e:	0a 5b       	subi	r16, 0xBA	; 186
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	e6 5b       	subi	r30, 0xB6	; 182
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	53 e4       	ldi	r21, 0x43	; 67
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	80 83       	st	Z, r24
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	a2 83       	std	Z+2, r26	; 0x02
    24a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24aa:	fe 01       	movw	r30, r28
    24ac:	ea 5b       	subi	r30, 0xBA	; 186
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	44 f4       	brge	.+16     	; 0x24d8 <lcd_sendCommand+0xac4>
		__ticks = 1;
    24c8:	fe 01       	movw	r30, r28
    24ca:	ec 5b       	subi	r30, 0xBC	; 188
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	64 c0       	rjmp	.+200    	; 0x25a0 <lcd_sendCommand+0xb8c>
	else if (__tmp > 65535)
    24d8:	fe 01       	movw	r30, r28
    24da:	ea 5b       	subi	r30, 0xBA	; 186
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <lcd_sendCommand+0xae4>
    24f6:	43 c0       	rjmp	.+134    	; 0x257e <lcd_sendCommand+0xb6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	fe 01       	movw	r30, r28
    24fa:	e6 5b       	subi	r30, 0xB6	; 182
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8e 01       	movw	r16, r28
    2518:	0c 5b       	subi	r16, 0xBC	; 188
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	1f c0       	rjmp	.+62     	; 0x256e <lcd_sendCommand+0xb5a>
    2530:	fe 01       	movw	r30, r28
    2532:	ee 5b       	subi	r30, 0xBE	; 190
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	89 e1       	ldi	r24, 0x19	; 25
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253e:	fe 01       	movw	r30, r28
    2540:	ee 5b       	subi	r30, 0xBE	; 190
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <lcd_sendCommand+0xb34>
    254c:	fe 01       	movw	r30, r28
    254e:	ee 5b       	subi	r30, 0xBE	; 190
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	de 01       	movw	r26, r28
    2558:	ac 5b       	subi	r26, 0xBC	; 188
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
    255c:	fe 01       	movw	r30, r28
    255e:	ec 5b       	subi	r30, 0xBC	; 188
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	11 96       	adiw	r26, 0x01	; 1
    256a:	9c 93       	st	X, r25
    256c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	fe 01       	movw	r30, r28
    2570:	ec 5b       	subi	r30, 0xBC	; 188
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	d1 f6       	brne	.-76     	; 0x2530 <lcd_sendCommand+0xb1c>
    257c:	42 c0       	rjmp	.+132    	; 0x2602 <lcd_sendCommand+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	8e 01       	movw	r16, r28
    2580:	0c 5b       	subi	r16, 0xBC	; 188
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	ea 5b       	subi	r30, 0xBA	; 186
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	de 01       	movw	r26, r28
    25a2:	a0 5c       	subi	r26, 0xC0	; 192
    25a4:	bf 4f       	sbci	r27, 0xFF	; 255
    25a6:	fe 01       	movw	r30, r28
    25a8:	ec 5b       	subi	r30, 0xBC	; 188
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	11 96       	adiw	r26, 0x01	; 1
    25b2:	9c 93       	st	X, r25
    25b4:	8e 93       	st	-X, r24
    25b6:	fe 01       	movw	r30, r28
    25b8:	e0 5c       	subi	r30, 0xC0	; 192
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <lcd_sendCommand+0xbac>
    25c4:	fe 01       	movw	r30, r28
    25c6:	e0 5c       	subi	r30, 0xC0	; 192
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	19 c0       	rjmp	.+50     	; 0x2602 <lcd_sendCommand+0xbee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25d0:	8e 01       	movw	r16, r28
    25d2:	02 5b       	subi	r16, 0xB2	; 178
    25d4:	1f 4f       	sbci	r17, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e1 5b       	subi	r30, 0xB1	; 177
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	f8 01       	movw	r30, r16
    25ee:	80 83       	st	Z, r24
    25f0:	fe 01       	movw	r30, r28
    25f2:	e2 5b       	subi	r30, 0xB2	; 178
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    25fc:	8a 95       	dec	r24
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <lcd_sendCommand+0xbe8>
    2600:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((command & 0x0F)) << LCD_DATA_BUS_PORT_OFFSET);
    2602:	fe 01       	movw	r30, r28
    2604:	e9 54       	subi	r30, 0x49	; 73
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	8f 70       	andi	r24, 0x0F	; 15
    260c:	98 2f       	mov	r25, r24
    260e:	99 0f       	add	r25, r25
    2610:	99 0f       	add	r25, r25
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	6c e3       	ldi	r22, 0x3C	; 60
    2616:	49 2f       	mov	r20, r25
    2618:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a8 e4       	ldi	r26, 0x48	; 72
    2622:	b2 e4       	ldi	r27, 0x42	; 66
    2624:	8b af       	std	Y+59, r24	; 0x3b
    2626:	9c af       	std	Y+60, r25	; 0x3c
    2628:	ad af       	std	Y+61, r26	; 0x3d
    262a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    262c:	6b ad       	ldd	r22, Y+59	; 0x3b
    262e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2630:	8d ad       	ldd	r24, Y+61	; 0x3d
    2632:	9e ad       	ldd	r25, Y+62	; 0x3e
    2634:	2b ea       	ldi	r18, 0xAB	; 171
    2636:	3a ea       	ldi	r19, 0xAA	; 170
    2638:	4a ea       	ldi	r20, 0xAA	; 170
    263a:	5e e3       	ldi	r21, 0x3E	; 62
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8f ab       	std	Y+55, r24	; 0x37
    2646:	98 af       	std	Y+56, r25	; 0x38
    2648:	a9 af       	std	Y+57, r26	; 0x39
    264a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    264c:	6f a9       	ldd	r22, Y+55	; 0x37
    264e:	78 ad       	ldd	r23, Y+56	; 0x38
    2650:	89 ad       	ldd	r24, Y+57	; 0x39
    2652:	9a ad       	ldd	r25, Y+58	; 0x3a
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	1c f4       	brge	.+6      	; 0x266a <lcd_sendCommand+0xc56>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	8e ab       	std	Y+54, r24	; 0x36
    2668:	91 c0       	rjmp	.+290    	; 0x278c <lcd_sendCommand+0xd78>
	else if (__tmp > 255)
    266a:	6f a9       	ldd	r22, Y+55	; 0x37
    266c:	78 ad       	ldd	r23, Y+56	; 0x38
    266e:	89 ad       	ldd	r24, Y+57	; 0x39
    2670:	9a ad       	ldd	r25, Y+58	; 0x3a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4f e7       	ldi	r20, 0x7F	; 127
    2678:	53 e4       	ldi	r21, 0x43	; 67
    267a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267e:	18 16       	cp	r1, r24
    2680:	0c f0       	brlt	.+2      	; 0x2684 <lcd_sendCommand+0xc70>
    2682:	7b c0       	rjmp	.+246    	; 0x277a <lcd_sendCommand+0xd66>
	{
		_delay_ms(__us / 1000.0);
    2684:	6b ad       	ldd	r22, Y+59	; 0x3b
    2686:	7c ad       	ldd	r23, Y+60	; 0x3c
    2688:	8d ad       	ldd	r24, Y+61	; 0x3d
    268a:	9e ad       	ldd	r25, Y+62	; 0x3e
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4a e7       	ldi	r20, 0x7A	; 122
    2692:	54 e4       	ldi	r21, 0x44	; 68
    2694:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	8a ab       	std	Y+50, r24	; 0x32
    269e:	9b ab       	std	Y+51, r25	; 0x33
    26a0:	ac ab       	std	Y+52, r26	; 0x34
    26a2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6a a9       	ldd	r22, Y+50	; 0x32
    26a6:	7b a9       	ldd	r23, Y+51	; 0x33
    26a8:	8c a9       	ldd	r24, Y+52	; 0x34
    26aa:	9d a9       	ldd	r25, Y+53	; 0x35
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	53 e4       	ldi	r21, 0x43	; 67
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8e a7       	std	Y+46, r24	; 0x2e
    26be:	9f a7       	std	Y+47, r25	; 0x2f
    26c0:	a8 ab       	std	Y+48, r26	; 0x30
    26c2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    26c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    26c6:	7f a5       	ldd	r23, Y+47	; 0x2f
    26c8:	88 a9       	ldd	r24, Y+48	; 0x30
    26ca:	99 a9       	ldd	r25, Y+49	; 0x31
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <lcd_sendCommand+0xcd2>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9d a7       	std	Y+45, r25	; 0x2d
    26e2:	8c a7       	std	Y+44, r24	; 0x2c
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <lcd_sendCommand+0xd50>
	else if (__tmp > 65535)
    26e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    26e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    26ea:	88 a9       	ldd	r24, Y+48	; 0x30
    26ec:	99 a9       	ldd	r25, Y+49	; 0x31
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <lcd_sendCommand+0xd3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6a a9       	ldd	r22, Y+50	; 0x32
    2700:	7b a9       	ldd	r23, Y+51	; 0x33
    2702:	8c a9       	ldd	r24, Y+52	; 0x34
    2704:	9d a9       	ldd	r25, Y+53	; 0x35
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9d a7       	std	Y+45, r25	; 0x2d
    2724:	8c a7       	std	Y+44, r24	; 0x2c
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <lcd_sendCommand+0xd32>
    2728:	89 e1       	ldi	r24, 0x19	; 25
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9b a7       	std	Y+43, r25	; 0x2b
    272e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2730:	8a a5       	ldd	r24, Y+42	; 0x2a
    2732:	9b a5       	ldd	r25, Y+43	; 0x2b
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <lcd_sendCommand+0xd20>
    2738:	9b a7       	std	Y+43, r25	; 0x2b
    273a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8c a5       	ldd	r24, Y+44	; 0x2c
    273e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9d a7       	std	Y+45, r25	; 0x2d
    2744:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8c a5       	ldd	r24, Y+44	; 0x2c
    2748:	9d a5       	ldd	r25, Y+45	; 0x2d
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <lcd_sendCommand+0xd14>
    274e:	24 c0       	rjmp	.+72     	; 0x2798 <lcd_sendCommand+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6e a5       	ldd	r22, Y+46	; 0x2e
    2752:	7f a5       	ldd	r23, Y+47	; 0x2f
    2754:	88 a9       	ldd	r24, Y+48	; 0x30
    2756:	99 a9       	ldd	r25, Y+49	; 0x31
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9d a7       	std	Y+45, r25	; 0x2d
    2762:	8c a7       	std	Y+44, r24	; 0x2c
    2764:	8c a5       	ldd	r24, Y+44	; 0x2c
    2766:	9d a5       	ldd	r25, Y+45	; 0x2d
    2768:	99 a7       	std	Y+41, r25	; 0x29
    276a:	88 a7       	std	Y+40, r24	; 0x28
    276c:	88 a5       	ldd	r24, Y+40	; 0x28
    276e:	99 a5       	ldd	r25, Y+41	; 0x29
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <lcd_sendCommand+0xd5c>
    2774:	99 a7       	std	Y+41, r25	; 0x29
    2776:	88 a7       	std	Y+40, r24	; 0x28
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <lcd_sendCommand+0xd84>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    277a:	6f a9       	ldd	r22, Y+55	; 0x37
    277c:	78 ad       	ldd	r23, Y+56	; 0x38
    277e:	89 ad       	ldd	r24, Y+57	; 0x39
    2780:	9a ad       	ldd	r25, Y+58	; 0x3a
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8e ab       	std	Y+54, r24	; 0x36
    278c:	8e a9       	ldd	r24, Y+54	; 0x36
    278e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2790:	8f a1       	ldd	r24, Y+39	; 0x27
    2792:	8a 95       	dec	r24
    2794:	f1 f7       	brne	.-4      	; 0x2792 <lcd_sendCommand+0xd7e>
    2796:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>

	if(command == LCD_COMMAND_DISPLAY_OFF){
    27a2:	fe 01       	movw	r30, r28
    27a4:	e9 54       	subi	r30, 0x49	; 73
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	88 30       	cpi	r24, 0x08	; 8
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <lcd_sendCommand+0xd9c>
    27ae:	73 c0       	rjmp	.+230    	; 0x2896 <lcd_sendCommand+0xe82>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e4       	ldi	r26, 0x40	; 64
    27b6:	b0 e4       	ldi	r27, 0x40	; 64
    27b8:	8b a3       	std	Y+35, r24	; 0x23
    27ba:	9c a3       	std	Y+36, r25	; 0x24
    27bc:	ad a3       	std	Y+37, r26	; 0x25
    27be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	6b a1       	ldd	r22, Y+35	; 0x23
    27c2:	7c a1       	ldd	r23, Y+36	; 0x24
    27c4:	8d a1       	ldd	r24, Y+37	; 0x25
    27c6:	9e a1       	ldd	r25, Y+38	; 0x26
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	53 e4       	ldi	r21, 0x43	; 67
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
    27da:	98 a3       	std	Y+32, r25	; 0x20
    27dc:	a9 a3       	std	Y+33, r26	; 0x21
    27de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    27e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27e2:	78 a1       	ldd	r23, Y+32	; 0x20
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <lcd_sendCommand+0xdee>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9e 8f       	std	Y+30, r25	; 0x1e
    27fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <lcd_sendCommand+0xe6c>
	else if (__tmp > 65535)
    2802:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2804:	78 a1       	ldd	r23, Y+32	; 0x20
    2806:	89 a1       	ldd	r24, Y+33	; 0x21
    2808:	9a a1       	ldd	r25, Y+34	; 0x22
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	4c f5       	brge	.+82     	; 0x286c <lcd_sendCommand+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281a:	6b a1       	ldd	r22, Y+35	; 0x23
    281c:	7c a1       	ldd	r23, Y+36	; 0x24
    281e:	8d a1       	ldd	r24, Y+37	; 0x25
    2820:	9e a1       	ldd	r25, Y+38	; 0x26
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9e 8f       	std	Y+30, r25	; 0x1e
    2840:	8d 8f       	std	Y+29, r24	; 0x1d
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <lcd_sendCommand+0xe4e>
    2844:	89 e1       	ldi	r24, 0x19	; 25
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9c 8f       	std	Y+28, r25	; 0x1c
    284a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    284c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <lcd_sendCommand+0xe3c>
    2854:	9c 8f       	std	Y+28, r25	; 0x1c
    2856:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9e 8f       	std	Y+30, r25	; 0x1e
    2860:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	69 f7       	brne	.-38     	; 0x2844 <lcd_sendCommand+0xe30>
    286a:	d3 c0       	rjmp	.+422    	; 0x2a12 <lcd_sendCommand+0xffe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    286e:	78 a1       	ldd	r23, Y+32	; 0x20
    2870:	89 a1       	ldd	r24, Y+33	; 0x21
    2872:	9a a1       	ldd	r25, Y+34	; 0x22
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9e 8f       	std	Y+30, r25	; 0x1e
    287e:	8d 8f       	std	Y+29, r24	; 0x1d
    2880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2884:	9a 8f       	std	Y+26, r25	; 0x1a
    2886:	89 8f       	std	Y+25, r24	; 0x19
    2888:	89 8d       	ldd	r24, Y+25	; 0x19
    288a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <lcd_sendCommand+0xe78>
    2890:	9a 8f       	std	Y+26, r25	; 0x1a
    2892:	89 8f       	std	Y+25, r24	; 0x19
    2894:	be c0       	rjmp	.+380    	; 0x2a12 <lcd_sendCommand+0xffe>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a8 ec       	ldi	r26, 0xC8	; 200
    289c:	b2 e4       	ldi	r27, 0x42	; 66
    289e:	8d 8b       	std	Y+21, r24	; 0x15
    28a0:	9e 8b       	std	Y+22, r25	; 0x16
    28a2:	af 8b       	std	Y+23, r26	; 0x17
    28a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	2b ea       	ldi	r18, 0xAB	; 171
    28b0:	3a ea       	ldi	r19, 0xAA	; 170
    28b2:	4a ea       	ldi	r20, 0xAA	; 170
    28b4:	5e e3       	ldi	r21, 0x3E	; 62
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	89 8b       	std	Y+17, r24	; 0x11
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	ab 8b       	std	Y+19, r26	; 0x13
    28c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28c6:	69 89       	ldd	r22, Y+17	; 0x11
    28c8:	7a 89       	ldd	r23, Y+18	; 0x12
    28ca:	8b 89       	ldd	r24, Y+19	; 0x13
    28cc:	9c 89       	ldd	r25, Y+20	; 0x14
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	1c f4       	brge	.+6      	; 0x28e4 <lcd_sendCommand+0xed0>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	88 8b       	std	Y+16, r24	; 0x10
    28e2:	91 c0       	rjmp	.+290    	; 0x2a06 <lcd_sendCommand+0xff2>
	else if (__tmp > 255)
    28e4:	69 89       	ldd	r22, Y+17	; 0x11
    28e6:	7a 89       	ldd	r23, Y+18	; 0x12
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	53 e4       	ldi	r21, 0x43	; 67
    28f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <lcd_sendCommand+0xeea>
    28fc:	7b c0       	rjmp	.+246    	; 0x29f4 <lcd_sendCommand+0xfe0>
	{
		_delay_ms(__us / 1000.0);
    28fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2900:	7e 89       	ldd	r23, Y+22	; 0x16
    2902:	8f 89       	ldd	r24, Y+23	; 0x17
    2904:	98 8d       	ldd	r25, Y+24	; 0x18
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a e7       	ldi	r20, 0x7A	; 122
    290c:	54 e4       	ldi	r21, 0x44	; 68
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8c 87       	std	Y+12, r24	; 0x0c
    2918:	9d 87       	std	Y+13, r25	; 0x0d
    291a:	ae 87       	std	Y+14, r26	; 0x0e
    291c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2920:	7d 85       	ldd	r23, Y+13	; 0x0d
    2922:	8e 85       	ldd	r24, Y+14	; 0x0e
    2924:	9f 85       	ldd	r25, Y+15	; 0x0f
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	53 e4       	ldi	r21, 0x43	; 67
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	88 87       	std	Y+8, r24	; 0x08
    2938:	99 87       	std	Y+9, r25	; 0x09
    293a:	aa 87       	std	Y+10, r26	; 0x0a
    293c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    293e:	68 85       	ldd	r22, Y+8	; 0x08
    2940:	79 85       	ldd	r23, Y+9	; 0x09
    2942:	8a 85       	ldd	r24, Y+10	; 0x0a
    2944:	9b 85       	ldd	r25, Y+11	; 0x0b
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <lcd_sendCommand+0xf4c>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9f 83       	std	Y+7, r25	; 0x07
    295c:	8e 83       	std	Y+6, r24	; 0x06
    295e:	3f c0       	rjmp	.+126    	; 0x29de <lcd_sendCommand+0xfca>
	else if (__tmp > 65535)
    2960:	68 85       	ldd	r22, Y+8	; 0x08
    2962:	79 85       	ldd	r23, Y+9	; 0x09
    2964:	8a 85       	ldd	r24, Y+10	; 0x0a
    2966:	9b 85       	ldd	r25, Y+11	; 0x0b
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <lcd_sendCommand+0xfb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	6c 85       	ldd	r22, Y+12	; 0x0c
    297a:	7d 85       	ldd	r23, Y+13	; 0x0d
    297c:	8e 85       	ldd	r24, Y+14	; 0x0e
    297e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9f 83       	std	Y+7, r25	; 0x07
    299e:	8e 83       	std	Y+6, r24	; 0x06
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <lcd_sendCommand+0xfac>
    29a2:	89 e1       	ldi	r24, 0x19	; 25
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9d 83       	std	Y+5, r25	; 0x05
    29a8:	8c 83       	std	Y+4, r24	; 0x04
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <lcd_sendCommand+0xf9a>
    29b2:	9d 83       	std	Y+5, r25	; 0x05
    29b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8e 81       	ldd	r24, Y+6	; 0x06
    29b8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9f 83       	std	Y+7, r25	; 0x07
    29be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	9f 81       	ldd	r25, Y+7	; 0x07
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <lcd_sendCommand+0xf8e>
    29c8:	24 c0       	rjmp	.+72     	; 0x2a12 <lcd_sendCommand+0xffe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	68 85       	ldd	r22, Y+8	; 0x08
    29cc:	79 85       	ldd	r23, Y+9	; 0x09
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9f 83       	std	Y+7, r25	; 0x07
    29dc:	8e 83       	std	Y+6, r24	; 0x06
    29de:	8e 81       	ldd	r24, Y+6	; 0x06
    29e0:	9f 81       	ldd	r25, Y+7	; 0x07
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <lcd_sendCommand+0xfd6>
    29ee:	9b 83       	std	Y+3, r25	; 0x03
    29f0:	8a 83       	std	Y+2, r24	; 0x02
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <lcd_sendCommand+0xffe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29f4:	69 89       	ldd	r22, Y+17	; 0x11
    29f6:	7a 89       	ldd	r23, Y+18	; 0x12
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	88 8b       	std	Y+16, r24	; 0x10
    2a06:	88 89       	ldd	r24, Y+16	; 0x10
    2a08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	8a 95       	dec	r24
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <lcd_sendCommand+0xff8>
    2a10:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
	}else{
		_delay_us(100);
	}
}
    2a12:	c9 54       	subi	r28, 0x49	; 73
    2a14:	df 4f       	sbci	r29, 0xFF	; 255
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	08 95       	ret

00002a2a <lcd_init>:
	lcd_sendCommand(LCD_COMMAND_2_LINE_8_BIT);
	lcd_sendCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);
	lcd_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_init(void){
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	c4 58       	subi	r28, 0x84	; 132
    2a38:	d1 40       	sbci	r29, 0x01	; 1
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 a6 08 	call	0x114c	; 0x114c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN, PIN_OUTPUT);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 a6 08 	call	0x114c	; 0x114c <GPIO_setupPinDirection>
	GPIO_setupPortDirectionMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, PORT_OUTPUT);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	6c e3       	ldi	r22, 0x3C	; 60
    2a5c:	4f ef       	ldi	r20, 0xFF	; 255
    2a5e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPortDirectionMasked>
    2a62:	fe 01       	movw	r30, r28
    2a64:	ef 57       	subi	r30, 0x7F	; 127
    2a66:	fe 4f       	sbci	r31, 0xFE	; 254
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6e:	b1 e4       	ldi	r27, 0x41	; 65
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	8e 01       	movw	r16, r28
    2a7a:	03 58       	subi	r16, 0x83	; 131
    2a7c:	1e 4f       	sbci	r17, 0xFE	; 254
    2a7e:	fe 01       	movw	r30, r28
    2a80:	ef 57       	subi	r30, 0x7F	; 127
    2a82:	fe 4f       	sbci	r31, 0xFE	; 254
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a e7       	ldi	r20, 0x7A	; 122
    2a92:	53 e4       	ldi	r21, 0x43	; 67
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	80 83       	st	Z, r24
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	a2 83       	std	Z+2, r26	; 0x02
    2aa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e3 58       	subi	r30, 0x83	; 131
    2aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e8       	ldi	r20, 0x80	; 128
    2aba:	5f e3       	ldi	r21, 0x3F	; 63
    2abc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac0:	88 23       	and	r24, r24
    2ac2:	44 f4       	brge	.+16     	; 0x2ad4 <lcd_init+0xaa>
		__ticks = 1;
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e5 58       	subi	r30, 0x85	; 133
    2ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	64 c0       	rjmp	.+200    	; 0x2b9c <lcd_init+0x172>
	else if (__tmp > 65535)
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e3 58       	subi	r30, 0x83	; 131
    2ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	0c f0       	brlt	.+2      	; 0x2af4 <lcd_init+0xca>
    2af2:	43 c0       	rjmp	.+134    	; 0x2b7a <lcd_init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af4:	fe 01       	movw	r30, r28
    2af6:	ef 57       	subi	r30, 0x7F	; 127
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8e 01       	movw	r16, r28
    2b14:	05 58       	subi	r16, 0x85	; 133
    2b16:	1e 4f       	sbci	r17, 0xFE	; 254
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	f8 01       	movw	r30, r16
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
    2b2a:	1f c0       	rjmp	.+62     	; 0x2b6a <lcd_init+0x140>
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 58       	subi	r30, 0x87	; 135
    2b30:	fe 4f       	sbci	r31, 0xFE	; 254
    2b32:	89 e1       	ldi	r24, 0x19	; 25
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e7 58       	subi	r30, 0x87	; 135
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	f1 f7       	brne	.-4      	; 0x2b44 <lcd_init+0x11a>
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e7 58       	subi	r30, 0x87	; 135
    2b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b52:	de 01       	movw	r26, r28
    2b54:	a5 58       	subi	r26, 0x85	; 133
    2b56:	be 4f       	sbci	r27, 0xFE	; 254
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e5 58       	subi	r30, 0x85	; 133
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	9c 93       	st	X, r25
    2b68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e5 58       	subi	r30, 0x85	; 133
    2b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	d1 f6       	brne	.-76     	; 0x2b2c <lcd_init+0x102>
    2b78:	27 c0       	rjmp	.+78     	; 0x2bc8 <lcd_init+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	8e 01       	movw	r16, r28
    2b7c:	05 58       	subi	r16, 0x85	; 133
    2b7e:	1e 4f       	sbci	r17, 0xFE	; 254
    2b80:	fe 01       	movw	r30, r28
    2b82:	e3 58       	subi	r30, 0x83	; 131
    2b84:	fe 4f       	sbci	r31, 0xFE	; 254
    2b86:	60 81       	ld	r22, Z
    2b88:	71 81       	ldd	r23, Z+1	; 0x01
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	f8 01       	movw	r30, r16
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
    2b9c:	de 01       	movw	r26, r28
    2b9e:	a9 58       	subi	r26, 0x89	; 137
    2ba0:	be 4f       	sbci	r27, 0xFE	; 254
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e5 58       	subi	r30, 0x85	; 133
    2ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	8d 93       	st	X+, r24
    2bae:	9c 93       	st	X, r25
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e9 58       	subi	r30, 0x89	; 137
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <lcd_init+0x190>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e9 58       	subi	r30, 0x89	; 137
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
	_delay_ms(20);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ed 58       	subi	r30, 0x8D	; 141
    2be0:	fe 4f       	sbci	r31, 0xFE	; 254
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	a8 e4       	ldi	r26, 0x48	; 72
    2be8:	b2 e4       	ldi	r27, 0x42	; 66
    2bea:	80 83       	st	Z, r24
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	a2 83       	std	Z+2, r26	; 0x02
    2bf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bf2:	8e 01       	movw	r16, r28
    2bf4:	01 59       	subi	r16, 0x91	; 145
    2bf6:	1e 4f       	sbci	r17, 0xFE	; 254
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ed 58       	subi	r30, 0x8D	; 141
    2bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	2b ea       	ldi	r18, 0xAB	; 171
    2c08:	3a ea       	ldi	r19, 0xAA	; 170
    2c0a:	4a ea       	ldi	r20, 0xAA	; 170
    2c0c:	5e e3       	ldi	r21, 0x3E	; 62
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	80 83       	st	Z, r24
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	a2 83       	std	Z+2, r26	; 0x02
    2c1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c20:	fe 01       	movw	r30, r28
    2c22:	e1 59       	subi	r30, 0x91	; 145
    2c24:	fe 4f       	sbci	r31, 0xFE	; 254
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	34 f4       	brge	.+12     	; 0x2c4a <lcd_init+0x220>
		__ticks = 1;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e2 59       	subi	r30, 0x92	; 146
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	80 83       	st	Z, r24
    2c48:	e0 c0       	rjmp	.+448    	; 0x2e0a <lcd_init+0x3e0>
	else if (__tmp > 255)
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e1 59       	subi	r30, 0x91	; 145
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4f e7       	ldi	r20, 0x7F	; 127
    2c5e:	53 e4       	ldi	r21, 0x43	; 67
    2c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c64:	18 16       	cp	r1, r24
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <lcd_init+0x240>
    2c68:	c0 c0       	rjmp	.+384    	; 0x2dea <lcd_init+0x3c0>
	{
		_delay_ms(__us / 1000.0);
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ed 58       	subi	r30, 0x8D	; 141
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a e7       	ldi	r20, 0x7A	; 122
    2c7e:	54 e4       	ldi	r21, 0x44	; 68
    2c80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	fe 01       	movw	r30, r28
    2c8a:	e6 59       	subi	r30, 0x96	; 150
    2c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8e:	80 83       	st	Z, r24
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	a2 83       	std	Z+2, r26	; 0x02
    2c94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c96:	8e 01       	movw	r16, r28
    2c98:	0a 59       	subi	r16, 0x9A	; 154
    2c9a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e6 59       	subi	r30, 0x96	; 150
    2ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a e7       	ldi	r20, 0x7A	; 122
    2cb0:	53 e4       	ldi	r21, 0x43	; 67
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	f8 01       	movw	r30, r16
    2cbc:	80 83       	st	Z, r24
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	a2 83       	std	Z+2, r26	; 0x02
    2cc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ea 59       	subi	r30, 0x9A	; 154
    2cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	44 f4       	brge	.+16     	; 0x2cf2 <lcd_init+0x2c8>
		__ticks = 1;
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ec 59       	subi	r30, 0x9C	; 156
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	64 c0       	rjmp	.+200    	; 0x2dba <lcd_init+0x390>
	else if (__tmp > 65535)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ea 59       	subi	r30, 0x9A	; 154
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	0c f0       	brlt	.+2      	; 0x2d12 <lcd_init+0x2e8>
    2d10:	43 c0       	rjmp	.+134    	; 0x2d98 <lcd_init+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	fe 01       	movw	r30, r28
    2d14:	e6 59       	subi	r30, 0x96	; 150
    2d16:	fe 4f       	sbci	r31, 0xFE	; 254
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e2       	ldi	r20, 0x20	; 32
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8e 01       	movw	r16, r28
    2d32:	0c 59       	subi	r16, 0x9C	; 156
    2d34:	1e 4f       	sbci	r17, 0xFE	; 254
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	f8 01       	movw	r30, r16
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
    2d48:	1f c0       	rjmp	.+62     	; 0x2d88 <lcd_init+0x35e>
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	ee 59       	subi	r30, 0x9E	; 158
    2d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d50:	89 e1       	ldi	r24, 0x19	; 25
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ee 59       	subi	r30, 0x9E	; 158
    2d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <lcd_init+0x338>
    2d66:	fe 01       	movw	r30, r28
    2d68:	ee 59       	subi	r30, 0x9E	; 158
    2d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d70:	de 01       	movw	r26, r28
    2d72:	ac 59       	subi	r26, 0x9C	; 156
    2d74:	be 4f       	sbci	r27, 0xFE	; 254
    2d76:	fe 01       	movw	r30, r28
    2d78:	ec 59       	subi	r30, 0x9C	; 156
    2d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	9c 93       	st	X, r25
    2d86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ec 59       	subi	r30, 0x9C	; 156
    2d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	d1 f6       	brne	.-76     	; 0x2d4a <lcd_init+0x320>
    2d96:	4b c0       	rjmp	.+150    	; 0x2e2e <lcd_init+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	8e 01       	movw	r16, r28
    2d9a:	0c 59       	subi	r16, 0x9C	; 156
    2d9c:	1e 4f       	sbci	r17, 0xFE	; 254
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ea 59       	subi	r30, 0x9A	; 154
    2da2:	fe 4f       	sbci	r31, 0xFE	; 254
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	f8 01       	movw	r30, r16
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	80 83       	st	Z, r24
    2dba:	de 01       	movw	r26, r28
    2dbc:	a0 5a       	subi	r26, 0xA0	; 160
    2dbe:	be 4f       	sbci	r27, 0xFE	; 254
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ec 59       	subi	r30, 0x9C	; 156
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	11 96       	adiw	r26, 0x01	; 1
    2dcc:	9c 93       	st	X, r25
    2dce:	8e 93       	st	-X, r24
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e0 5a       	subi	r30, 0xA0	; 160
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	80 81       	ld	r24, Z
    2dd8:	91 81       	ldd	r25, Z+1	; 0x01
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <lcd_init+0x3b0>
    2dde:	fe 01       	movw	r30, r28
    2de0:	e0 5a       	subi	r30, 0xA0	; 160
    2de2:	fe 4f       	sbci	r31, 0xFE	; 254
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	80 83       	st	Z, r24
    2de8:	22 c0       	rjmp	.+68     	; 0x2e2e <lcd_init+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dea:	8e 01       	movw	r16, r28
    2dec:	02 59       	subi	r16, 0x92	; 146
    2dee:	1e 4f       	sbci	r17, 0xFE	; 254
    2df0:	fe 01       	movw	r30, r28
    2df2:	e1 59       	subi	r30, 0x91	; 145
    2df4:	fe 4f       	sbci	r31, 0xFE	; 254
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	de 01       	movw	r26, r28
    2e0c:	a1 5a       	subi	r26, 0xA1	; 161
    2e0e:	be 4f       	sbci	r27, 0xFE	; 254
    2e10:	fe 01       	movw	r30, r28
    2e12:	e2 59       	subi	r30, 0x92	; 146
    2e14:	fe 4f       	sbci	r31, 0xFE	; 254
    2e16:	80 81       	ld	r24, Z
    2e18:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e1 5a       	subi	r30, 0xA1	; 161
    2e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e20:	80 81       	ld	r24, Z
    2e22:	8a 95       	dec	r24
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <lcd_init+0x3f8>
    2e26:	fe 01       	movw	r30, r28
    2e28:	e1 5a       	subi	r30, 0xA1	; 161
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5a       	subi	r30, 0xA5	; 165
    2e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a8 e4       	ldi	r26, 0x48	; 72
    2e44:	b2 e4       	ldi	r27, 0x42	; 66
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e4e:	8e 01       	movw	r16, r28
    2e50:	09 5a       	subi	r16, 0xA9	; 169
    2e52:	1e 4f       	sbci	r17, 0xFE	; 254
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 5a       	subi	r30, 0xA5	; 165
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	2b ea       	ldi	r18, 0xAB	; 171
    2e64:	3a ea       	ldi	r19, 0xAA	; 170
    2e66:	4a ea       	ldi	r20, 0xAA	; 170
    2e68:	5e e3       	ldi	r21, 0x3E	; 62
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	a2 83       	std	Z+2, r26	; 0x02
    2e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e9 5a       	subi	r30, 0xA9	; 169
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	34 f4       	brge	.+12     	; 0x2ea6 <lcd_init+0x47c>
		__ticks = 1;
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ea 5a       	subi	r30, 0xAA	; 170
    2e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 83       	st	Z, r24
    2ea4:	e0 c0       	rjmp	.+448    	; 0x3066 <lcd_init+0x63c>
	else if (__tmp > 255)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e9 5a       	subi	r30, 0xA9	; 169
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	53 e4       	ldi	r21, 0x43	; 67
    2ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	0c f0       	brlt	.+2      	; 0x2ec6 <lcd_init+0x49c>
    2ec4:	c0 c0       	rjmp	.+384    	; 0x3046 <lcd_init+0x61c>
	{
		_delay_ms(__us / 1000.0);
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e5 5a       	subi	r30, 0xA5	; 165
    2eca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a e7       	ldi	r20, 0x7A	; 122
    2eda:	54 e4       	ldi	r21, 0x44	; 68
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ee 5a       	subi	r30, 0xAE	; 174
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	80 83       	st	Z, r24
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	a2 83       	std	Z+2, r26	; 0x02
    2ef0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	8e 01       	movw	r16, r28
    2ef4:	02 5b       	subi	r16, 0xB2	; 178
    2ef6:	1e 4f       	sbci	r17, 0xFE	; 254
    2ef8:	fe 01       	movw	r30, r28
    2efa:	ee 5a       	subi	r30, 0xAE	; 174
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	60 81       	ld	r22, Z
    2f00:	71 81       	ldd	r23, Z+1	; 0x01
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	4a e7       	ldi	r20, 0x7A	; 122
    2f0c:	53 e4       	ldi	r21, 0x43	; 67
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	f8 01       	movw	r30, r16
    2f18:	80 83       	st	Z, r24
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	a2 83       	std	Z+2, r26	; 0x02
    2f1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f20:	fe 01       	movw	r30, r28
    2f22:	e2 5b       	subi	r30, 0xB2	; 178
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5f e3       	ldi	r21, 0x3F	; 63
    2f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	44 f4       	brge	.+16     	; 0x2f4e <lcd_init+0x524>
		__ticks = 1;
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e4 5b       	subi	r30, 0xB4	; 180
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
    2f4c:	64 c0       	rjmp	.+200    	; 0x3016 <lcd_init+0x5ec>
	else if (__tmp > 65535)
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e2 5b       	subi	r30, 0xB2	; 178
    2f52:	fe 4f       	sbci	r31, 0xFE	; 254
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	3f ef       	ldi	r19, 0xFF	; 255
    2f60:	4f e7       	ldi	r20, 0x7F	; 127
    2f62:	57 e4       	ldi	r21, 0x47	; 71
    2f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f68:	18 16       	cp	r1, r24
    2f6a:	0c f0       	brlt	.+2      	; 0x2f6e <lcd_init+0x544>
    2f6c:	43 c0       	rjmp	.+134    	; 0x2ff4 <lcd_init+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ee 5a       	subi	r30, 0xAE	; 174
    2f72:	fe 4f       	sbci	r31, 0xFE	; 254
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	8e 01       	movw	r16, r28
    2f8e:	04 5b       	subi	r16, 0xB4	; 180
    2f90:	1e 4f       	sbci	r17, 0xFE	; 254
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	1f c0       	rjmp	.+62     	; 0x2fe4 <lcd_init+0x5ba>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e6 5b       	subi	r30, 0xB6	; 182
    2faa:	fe 4f       	sbci	r31, 0xFE	; 254
    2fac:	89 e1       	ldi	r24, 0x19	; 25
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e6 5b       	subi	r30, 0xB6	; 182
    2fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <lcd_init+0x594>
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e6 5b       	subi	r30, 0xB6	; 182
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	de 01       	movw	r26, r28
    2fce:	a4 5b       	subi	r26, 0xB4	; 180
    2fd0:	be 4f       	sbci	r27, 0xFE	; 254
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e4 5b       	subi	r30, 0xB4	; 180
    2fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	11 96       	adiw	r26, 0x01	; 1
    2fe0:	9c 93       	st	X, r25
    2fe2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e4 5b       	subi	r30, 0xB4	; 180
    2fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	d1 f6       	brne	.-76     	; 0x2fa6 <lcd_init+0x57c>
    2ff2:	4b c0       	rjmp	.+150    	; 0x308a <lcd_init+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	8e 01       	movw	r16, r28
    2ff6:	04 5b       	subi	r16, 0xB4	; 180
    2ff8:	1e 4f       	sbci	r17, 0xFE	; 254
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e2 5b       	subi	r30, 0xB2	; 178
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	f8 01       	movw	r30, r16
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	de 01       	movw	r26, r28
    3018:	a8 5b       	subi	r26, 0xB8	; 184
    301a:	be 4f       	sbci	r27, 0xFE	; 254
    301c:	fe 01       	movw	r30, r28
    301e:	e4 5b       	subi	r30, 0xB4	; 180
    3020:	fe 4f       	sbci	r31, 0xFE	; 254
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	9c 93       	st	X, r25
    302a:	8e 93       	st	-X, r24
    302c:	fe 01       	movw	r30, r28
    302e:	e8 5b       	subi	r30, 0xB8	; 184
    3030:	fe 4f       	sbci	r31, 0xFE	; 254
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <lcd_init+0x60c>
    303a:	fe 01       	movw	r30, r28
    303c:	e8 5b       	subi	r30, 0xB8	; 184
    303e:	fe 4f       	sbci	r31, 0xFE	; 254
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	80 83       	st	Z, r24
    3044:	22 c0       	rjmp	.+68     	; 0x308a <lcd_init+0x660>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3046:	8e 01       	movw	r16, r28
    3048:	0a 5a       	subi	r16, 0xAA	; 170
    304a:	1e 4f       	sbci	r17, 0xFE	; 254
    304c:	fe 01       	movw	r30, r28
    304e:	e9 5a       	subi	r30, 0xA9	; 169
    3050:	fe 4f       	sbci	r31, 0xFE	; 254
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	80 83       	st	Z, r24
    3066:	de 01       	movw	r26, r28
    3068:	a9 5b       	subi	r26, 0xB9	; 185
    306a:	be 4f       	sbci	r27, 0xFE	; 254
    306c:	fe 01       	movw	r30, r28
    306e:	ea 5a       	subi	r30, 0xAA	; 170
    3070:	fe 4f       	sbci	r31, 0xFE	; 254
    3072:	80 81       	ld	r24, Z
    3074:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3076:	fe 01       	movw	r30, r28
    3078:	e9 5b       	subi	r30, 0xB9	; 185
    307a:	fe 4f       	sbci	r31, 0xFE	; 254
    307c:	80 81       	ld	r24, Z
    307e:	8a 95       	dec	r24
    3080:	f1 f7       	brne	.-4      	; 0x307e <lcd_init+0x654>
    3082:	fe 01       	movw	r30, r28
    3084:	e9 5b       	subi	r30, 0xB9	; 185
    3086:	fe 4f       	sbci	r31, 0xFE	; 254
    3088:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    3094:	fe 01       	movw	r30, r28
    3096:	ed 5b       	subi	r30, 0xBD	; 189
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a8 e4       	ldi	r26, 0x48	; 72
    30a0:	b2 e4       	ldi	r27, 0x42	; 66
    30a2:	80 83       	st	Z, r24
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	a2 83       	std	Z+2, r26	; 0x02
    30a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30aa:	8e 01       	movw	r16, r28
    30ac:	01 5c       	subi	r16, 0xC1	; 193
    30ae:	1e 4f       	sbci	r17, 0xFE	; 254
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 5b       	subi	r30, 0xBD	; 189
    30b4:	fe 4f       	sbci	r31, 0xFE	; 254
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	2b ea       	ldi	r18, 0xAB	; 171
    30c0:	3a ea       	ldi	r19, 0xAA	; 170
    30c2:	4a ea       	ldi	r20, 0xAA	; 170
    30c4:	5e e3       	ldi	r21, 0x3E	; 62
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d8:	fe 01       	movw	r30, r28
    30da:	e1 5c       	subi	r30, 0xC1	; 193
    30dc:	fe 4f       	sbci	r31, 0xFE	; 254
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	34 f4       	brge	.+12     	; 0x3102 <lcd_init+0x6d8>
		__ticks = 1;
    30f6:	fe 01       	movw	r30, r28
    30f8:	e2 5c       	subi	r30, 0xC2	; 194
    30fa:	fe 4f       	sbci	r31, 0xFE	; 254
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	80 83       	st	Z, r24
    3100:	e0 c0       	rjmp	.+448    	; 0x32c2 <lcd_init+0x898>
	else if (__tmp > 255)
    3102:	fe 01       	movw	r30, r28
    3104:	e1 5c       	subi	r30, 0xC1	; 193
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	53 e4       	ldi	r21, 0x43	; 67
    3118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	0c f0       	brlt	.+2      	; 0x3122 <lcd_init+0x6f8>
    3120:	c0 c0       	rjmp	.+384    	; 0x32a2 <lcd_init+0x878>
	{
		_delay_ms(__us / 1000.0);
    3122:	fe 01       	movw	r30, r28
    3124:	ed 5b       	subi	r30, 0xBD	; 189
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a e7       	ldi	r20, 0x7A	; 122
    3136:	54 e4       	ldi	r21, 0x44	; 68
    3138:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	fe 01       	movw	r30, r28
    3142:	e6 5c       	subi	r30, 0xC6	; 198
    3144:	fe 4f       	sbci	r31, 0xFE	; 254
    3146:	80 83       	st	Z, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	a2 83       	std	Z+2, r26	; 0x02
    314c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	8e 01       	movw	r16, r28
    3150:	0a 5c       	subi	r16, 0xCA	; 202
    3152:	1e 4f       	sbci	r17, 0xFE	; 254
    3154:	fe 01       	movw	r30, r28
    3156:	e6 5c       	subi	r30, 0xC6	; 198
    3158:	fe 4f       	sbci	r31, 0xFE	; 254
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	4a e7       	ldi	r20, 0x7A	; 122
    3168:	53 e4       	ldi	r21, 0x43	; 67
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	f8 01       	movw	r30, r16
    3174:	80 83       	st	Z, r24
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	a2 83       	std	Z+2, r26	; 0x02
    317a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    317c:	fe 01       	movw	r30, r28
    317e:	ea 5c       	subi	r30, 0xCA	; 202
    3180:	fe 4f       	sbci	r31, 0xFE	; 254
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	5f e3       	ldi	r21, 0x3F	; 63
    3192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3196:	88 23       	and	r24, r24
    3198:	44 f4       	brge	.+16     	; 0x31aa <lcd_init+0x780>
		__ticks = 1;
    319a:	fe 01       	movw	r30, r28
    319c:	ec 5c       	subi	r30, 0xCC	; 204
    319e:	fe 4f       	sbci	r31, 0xFE	; 254
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	64 c0       	rjmp	.+200    	; 0x3272 <lcd_init+0x848>
	else if (__tmp > 65535)
    31aa:	fe 01       	movw	r30, r28
    31ac:	ea 5c       	subi	r30, 0xCA	; 202
    31ae:	fe 4f       	sbci	r31, 0xFE	; 254
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <lcd_init+0x7a0>
    31c8:	43 c0       	rjmp	.+134    	; 0x3250 <lcd_init+0x826>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	fe 01       	movw	r30, r28
    31cc:	e6 5c       	subi	r30, 0xC6	; 198
    31ce:	fe 4f       	sbci	r31, 0xFE	; 254
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	93 81       	ldd	r25, Z+3	; 0x03
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	8e 01       	movw	r16, r28
    31ea:	0c 5c       	subi	r16, 0xCC	; 204
    31ec:	1e 4f       	sbci	r17, 0xFE	; 254
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	f8 01       	movw	r30, r16
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	1f c0       	rjmp	.+62     	; 0x3240 <lcd_init+0x816>
    3202:	fe 01       	movw	r30, r28
    3204:	ee 5c       	subi	r30, 0xCE	; 206
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	89 e1       	ldi	r24, 0x19	; 25
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3210:	fe 01       	movw	r30, r28
    3212:	ee 5c       	subi	r30, 0xCE	; 206
    3214:	fe 4f       	sbci	r31, 0xFE	; 254
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <lcd_init+0x7f0>
    321e:	fe 01       	movw	r30, r28
    3220:	ee 5c       	subi	r30, 0xCE	; 206
    3222:	fe 4f       	sbci	r31, 0xFE	; 254
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3228:	de 01       	movw	r26, r28
    322a:	ac 5c       	subi	r26, 0xCC	; 204
    322c:	be 4f       	sbci	r27, 0xFE	; 254
    322e:	fe 01       	movw	r30, r28
    3230:	ec 5c       	subi	r30, 0xCC	; 204
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	9c 93       	st	X, r25
    323e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3240:	fe 01       	movw	r30, r28
    3242:	ec 5c       	subi	r30, 0xCC	; 204
    3244:	fe 4f       	sbci	r31, 0xFE	; 254
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	d1 f6       	brne	.-76     	; 0x3202 <lcd_init+0x7d8>
    324e:	4b c0       	rjmp	.+150    	; 0x32e6 <lcd_init+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	8e 01       	movw	r16, r28
    3252:	0c 5c       	subi	r16, 0xCC	; 204
    3254:	1e 4f       	sbci	r17, 0xFE	; 254
    3256:	fe 01       	movw	r30, r28
    3258:	ea 5c       	subi	r30, 0xCA	; 202
    325a:	fe 4f       	sbci	r31, 0xFE	; 254
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	de 01       	movw	r26, r28
    3274:	a0 5d       	subi	r26, 0xD0	; 208
    3276:	be 4f       	sbci	r27, 0xFE	; 254
    3278:	fe 01       	movw	r30, r28
    327a:	ec 5c       	subi	r30, 0xCC	; 204
    327c:	fe 4f       	sbci	r31, 0xFE	; 254
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	9c 93       	st	X, r25
    3286:	8e 93       	st	-X, r24
    3288:	fe 01       	movw	r30, r28
    328a:	e0 5d       	subi	r30, 0xD0	; 208
    328c:	fe 4f       	sbci	r31, 0xFE	; 254
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <lcd_init+0x868>
    3296:	fe 01       	movw	r30, r28
    3298:	e0 5d       	subi	r30, 0xD0	; 208
    329a:	fe 4f       	sbci	r31, 0xFE	; 254
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
    32a0:	22 c0       	rjmp	.+68     	; 0x32e6 <lcd_init+0x8bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32a2:	8e 01       	movw	r16, r28
    32a4:	02 5c       	subi	r16, 0xC2	; 194
    32a6:	1e 4f       	sbci	r17, 0xFE	; 254
    32a8:	fe 01       	movw	r30, r28
    32aa:	e1 5c       	subi	r30, 0xC1	; 193
    32ac:	fe 4f       	sbci	r31, 0xFE	; 254
    32ae:	60 81       	ld	r22, Z
    32b0:	71 81       	ldd	r23, Z+1	; 0x01
    32b2:	82 81       	ldd	r24, Z+2	; 0x02
    32b4:	93 81       	ldd	r25, Z+3	; 0x03
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	f8 01       	movw	r30, r16
    32c0:	80 83       	st	Z, r24
    32c2:	de 01       	movw	r26, r28
    32c4:	a1 5d       	subi	r26, 0xD1	; 209
    32c6:	be 4f       	sbci	r27, 0xFE	; 254
    32c8:	fe 01       	movw	r30, r28
    32ca:	e2 5c       	subi	r30, 0xC2	; 194
    32cc:	fe 4f       	sbci	r31, 0xFE	; 254
    32ce:	80 81       	ld	r24, Z
    32d0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32d2:	fe 01       	movw	r30, r28
    32d4:	e1 5d       	subi	r30, 0xD1	; 209
    32d6:	fe 4f       	sbci	r31, 0xFE	; 254
    32d8:	80 81       	ld	r24, Z
    32da:	8a 95       	dec	r24
    32dc:	f1 f7       	brne	.-4      	; 0x32da <lcd_init+0x8b0>
    32de:	fe 01       	movw	r30, r28
    32e0:	e1 5d       	subi	r30, 0xD1	; 209
    32e2:	fe 4f       	sbci	r31, 0xFE	; 254
    32e4:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	6c e3       	ldi	r22, 0x3C	; 60
    32ea:	4c e0       	ldi	r20, 0x0C	; 12
    32ec:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    32f0:	fe 01       	movw	r30, r28
    32f2:	e5 5d       	subi	r30, 0xD5	; 213
    32f4:	fe 4f       	sbci	r31, 0xFE	; 254
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a8 e4       	ldi	r26, 0x48	; 72
    32fc:	b2 e4       	ldi	r27, 0x42	; 66
    32fe:	80 83       	st	Z, r24
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	a2 83       	std	Z+2, r26	; 0x02
    3304:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3306:	8e 01       	movw	r16, r28
    3308:	09 5d       	subi	r16, 0xD9	; 217
    330a:	1e 4f       	sbci	r17, 0xFE	; 254
    330c:	fe 01       	movw	r30, r28
    330e:	e5 5d       	subi	r30, 0xD5	; 213
    3310:	fe 4f       	sbci	r31, 0xFE	; 254
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	2b ea       	ldi	r18, 0xAB	; 171
    331c:	3a ea       	ldi	r19, 0xAA	; 170
    331e:	4a ea       	ldi	r20, 0xAA	; 170
    3320:	5e e3       	ldi	r21, 0x3E	; 62
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	f8 01       	movw	r30, r16
    332c:	80 83       	st	Z, r24
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	a2 83       	std	Z+2, r26	; 0x02
    3332:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3334:	fe 01       	movw	r30, r28
    3336:	e9 5d       	subi	r30, 0xD9	; 217
    3338:	fe 4f       	sbci	r31, 0xFE	; 254
    333a:	60 81       	ld	r22, Z
    333c:	71 81       	ldd	r23, Z+1	; 0x01
    333e:	82 81       	ldd	r24, Z+2	; 0x02
    3340:	93 81       	ldd	r25, Z+3	; 0x03
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e8       	ldi	r20, 0x80	; 128
    3348:	5f e3       	ldi	r21, 0x3F	; 63
    334a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    334e:	88 23       	and	r24, r24
    3350:	34 f4       	brge	.+12     	; 0x335e <lcd_init+0x934>
		__ticks = 1;
    3352:	fe 01       	movw	r30, r28
    3354:	ea 5d       	subi	r30, 0xDA	; 218
    3356:	fe 4f       	sbci	r31, 0xFE	; 254
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	80 83       	st	Z, r24
    335c:	e0 c0       	rjmp	.+448    	; 0x351e <lcd_init+0xaf4>
	else if (__tmp > 255)
    335e:	fe 01       	movw	r30, r28
    3360:	e9 5d       	subi	r30, 0xD9	; 217
    3362:	fe 4f       	sbci	r31, 0xFE	; 254
    3364:	60 81       	ld	r22, Z
    3366:	71 81       	ldd	r23, Z+1	; 0x01
    3368:	82 81       	ldd	r24, Z+2	; 0x02
    336a:	93 81       	ldd	r25, Z+3	; 0x03
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	53 e4       	ldi	r21, 0x43	; 67
    3374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3378:	18 16       	cp	r1, r24
    337a:	0c f0       	brlt	.+2      	; 0x337e <lcd_init+0x954>
    337c:	c0 c0       	rjmp	.+384    	; 0x34fe <lcd_init+0xad4>
	{
		_delay_ms(__us / 1000.0);
    337e:	fe 01       	movw	r30, r28
    3380:	e5 5d       	subi	r30, 0xD5	; 213
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	4a e7       	ldi	r20, 0x7A	; 122
    3392:	54 e4       	ldi	r21, 0x44	; 68
    3394:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	fe 01       	movw	r30, r28
    339e:	ee 5d       	subi	r30, 0xDE	; 222
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	80 83       	st	Z, r24
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	a2 83       	std	Z+2, r26	; 0x02
    33a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33aa:	8e 01       	movw	r16, r28
    33ac:	02 5e       	subi	r16, 0xE2	; 226
    33ae:	1e 4f       	sbci	r17, 0xFE	; 254
    33b0:	fe 01       	movw	r30, r28
    33b2:	ee 5d       	subi	r30, 0xDE	; 222
    33b4:	fe 4f       	sbci	r31, 0xFE	; 254
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a e7       	ldi	r20, 0x7A	; 122
    33c4:	53 e4       	ldi	r21, 0x43	; 67
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	f8 01       	movw	r30, r16
    33d0:	80 83       	st	Z, r24
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	a2 83       	std	Z+2, r26	; 0x02
    33d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33d8:	fe 01       	movw	r30, r28
    33da:	e2 5e       	subi	r30, 0xE2	; 226
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e8       	ldi	r20, 0x80	; 128
    33ec:	5f e3       	ldi	r21, 0x3F	; 63
    33ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f2:	88 23       	and	r24, r24
    33f4:	44 f4       	brge	.+16     	; 0x3406 <lcd_init+0x9dc>
		__ticks = 1;
    33f6:	fe 01       	movw	r30, r28
    33f8:	e4 5e       	subi	r30, 0xE4	; 228
    33fa:	fe 4f       	sbci	r31, 0xFE	; 254
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	64 c0       	rjmp	.+200    	; 0x34ce <lcd_init+0xaa4>
	else if (__tmp > 65535)
    3406:	fe 01       	movw	r30, r28
    3408:	e2 5e       	subi	r30, 0xE2	; 226
    340a:	fe 4f       	sbci	r31, 0xFE	; 254
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	3f ef       	ldi	r19, 0xFF	; 255
    3418:	4f e7       	ldi	r20, 0x7F	; 127
    341a:	57 e4       	ldi	r21, 0x47	; 71
    341c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3420:	18 16       	cp	r1, r24
    3422:	0c f0       	brlt	.+2      	; 0x3426 <lcd_init+0x9fc>
    3424:	43 c0       	rjmp	.+134    	; 0x34ac <lcd_init+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	fe 01       	movw	r30, r28
    3428:	ee 5d       	subi	r30, 0xDE	; 222
    342a:	fe 4f       	sbci	r31, 0xFE	; 254
    342c:	60 81       	ld	r22, Z
    342e:	71 81       	ldd	r23, Z+1	; 0x01
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	8e 01       	movw	r16, r28
    3446:	04 5e       	subi	r16, 0xE4	; 228
    3448:	1e 4f       	sbci	r17, 0xFE	; 254
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	f8 01       	movw	r30, r16
    3458:	91 83       	std	Z+1, r25	; 0x01
    345a:	80 83       	st	Z, r24
    345c:	1f c0       	rjmp	.+62     	; 0x349c <lcd_init+0xa72>
    345e:	fe 01       	movw	r30, r28
    3460:	e6 5e       	subi	r30, 0xE6	; 230
    3462:	fe 4f       	sbci	r31, 0xFE	; 254
    3464:	89 e1       	ldi	r24, 0x19	; 25
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    346c:	fe 01       	movw	r30, r28
    346e:	e6 5e       	subi	r30, 0xE6	; 230
    3470:	fe 4f       	sbci	r31, 0xFE	; 254
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <lcd_init+0xa4c>
    347a:	fe 01       	movw	r30, r28
    347c:	e6 5e       	subi	r30, 0xE6	; 230
    347e:	fe 4f       	sbci	r31, 0xFE	; 254
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3484:	de 01       	movw	r26, r28
    3486:	a4 5e       	subi	r26, 0xE4	; 228
    3488:	be 4f       	sbci	r27, 0xFE	; 254
    348a:	fe 01       	movw	r30, r28
    348c:	e4 5e       	subi	r30, 0xE4	; 228
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	9c 93       	st	X, r25
    349a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349c:	fe 01       	movw	r30, r28
    349e:	e4 5e       	subi	r30, 0xE4	; 228
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	d1 f6       	brne	.-76     	; 0x345e <lcd_init+0xa34>
    34aa:	4b c0       	rjmp	.+150    	; 0x3542 <lcd_init+0xb18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ac:	8e 01       	movw	r16, r28
    34ae:	04 5e       	subi	r16, 0xE4	; 228
    34b0:	1e 4f       	sbci	r17, 0xFE	; 254
    34b2:	fe 01       	movw	r30, r28
    34b4:	e2 5e       	subi	r30, 0xE2	; 226
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	60 81       	ld	r22, Z
    34ba:	71 81       	ldd	r23, Z+1	; 0x01
    34bc:	82 81       	ldd	r24, Z+2	; 0x02
    34be:	93 81       	ldd	r25, Z+3	; 0x03
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	f8 01       	movw	r30, r16
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
    34ce:	de 01       	movw	r26, r28
    34d0:	a8 5e       	subi	r26, 0xE8	; 232
    34d2:	be 4f       	sbci	r27, 0xFE	; 254
    34d4:	fe 01       	movw	r30, r28
    34d6:	e4 5e       	subi	r30, 0xE4	; 228
    34d8:	fe 4f       	sbci	r31, 0xFE	; 254
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	11 96       	adiw	r26, 0x01	; 1
    34e0:	9c 93       	st	X, r25
    34e2:	8e 93       	st	-X, r24
    34e4:	fe 01       	movw	r30, r28
    34e6:	e8 5e       	subi	r30, 0xE8	; 232
    34e8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <lcd_init+0xac4>
    34f2:	fe 01       	movw	r30, r28
    34f4:	e8 5e       	subi	r30, 0xE8	; 232
    34f6:	fe 4f       	sbci	r31, 0xFE	; 254
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
    34fc:	22 c0       	rjmp	.+68     	; 0x3542 <lcd_init+0xb18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34fe:	8e 01       	movw	r16, r28
    3500:	0a 5d       	subi	r16, 0xDA	; 218
    3502:	1e 4f       	sbci	r17, 0xFE	; 254
    3504:	fe 01       	movw	r30, r28
    3506:	e9 5d       	subi	r30, 0xD9	; 217
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	f8 01       	movw	r30, r16
    351c:	80 83       	st	Z, r24
    351e:	de 01       	movw	r26, r28
    3520:	a9 5e       	subi	r26, 0xE9	; 233
    3522:	be 4f       	sbci	r27, 0xFE	; 254
    3524:	fe 01       	movw	r30, r28
    3526:	ea 5d       	subi	r30, 0xDA	; 218
    3528:	fe 4f       	sbci	r31, 0xFE	; 254
    352a:	80 81       	ld	r24, Z
    352c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    352e:	fe 01       	movw	r30, r28
    3530:	e9 5e       	subi	r30, 0xE9	; 233
    3532:	fe 4f       	sbci	r31, 0xFE	; 254
    3534:	80 81       	ld	r24, Z
    3536:	8a 95       	dec	r24
    3538:	f1 f7       	brne	.-4      	; 0x3536 <lcd_init+0xb0c>
    353a:	fe 01       	movw	r30, r28
    353c:	e9 5e       	subi	r30, 0xE9	; 233
    353e:	fe 4f       	sbci	r31, 0xFE	; 254
    3540:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    354c:	fe 01       	movw	r30, r28
    354e:	ed 5e       	subi	r30, 0xED	; 237
    3550:	fe 4f       	sbci	r31, 0xFE	; 254
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	a0 ea       	ldi	r26, 0xA0	; 160
    3558:	b0 e4       	ldi	r27, 0x40	; 64
    355a:	80 83       	st	Z, r24
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	a2 83       	std	Z+2, r26	; 0x02
    3560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3562:	8e 01       	movw	r16, r28
    3564:	01 5f       	subi	r16, 0xF1	; 241
    3566:	1e 4f       	sbci	r17, 0xFE	; 254
    3568:	fe 01       	movw	r30, r28
    356a:	ed 5e       	subi	r30, 0xED	; 237
    356c:	fe 4f       	sbci	r31, 0xFE	; 254
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	4a e7       	ldi	r20, 0x7A	; 122
    357c:	53 e4       	ldi	r21, 0x43	; 67
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	f8 01       	movw	r30, r16
    3588:	80 83       	st	Z, r24
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	a2 83       	std	Z+2, r26	; 0x02
    358e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3590:	fe 01       	movw	r30, r28
    3592:	e1 5f       	subi	r30, 0xF1	; 241
    3594:	fe 4f       	sbci	r31, 0xFE	; 254
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	44 f4       	brge	.+16     	; 0x35be <lcd_init+0xb94>
		__ticks = 1;
    35ae:	fe 01       	movw	r30, r28
    35b0:	e3 5f       	subi	r30, 0xF3	; 243
    35b2:	fe 4f       	sbci	r31, 0xFE	; 254
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
    35bc:	64 c0       	rjmp	.+200    	; 0x3686 <lcd_init+0xc5c>
	else if (__tmp > 65535)
    35be:	fe 01       	movw	r30, r28
    35c0:	e1 5f       	subi	r30, 0xF1	; 241
    35c2:	fe 4f       	sbci	r31, 0xFE	; 254
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	0c f0       	brlt	.+2      	; 0x35de <lcd_init+0xbb4>
    35dc:	43 c0       	rjmp	.+134    	; 0x3664 <lcd_init+0xc3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	fe 01       	movw	r30, r28
    35e0:	ed 5e       	subi	r30, 0xED	; 237
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e2       	ldi	r20, 0x20	; 32
    35f2:	51 e4       	ldi	r21, 0x41	; 65
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	8e 01       	movw	r16, r28
    35fe:	03 5f       	subi	r16, 0xF3	; 243
    3600:	1e 4f       	sbci	r17, 0xFE	; 254
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	f8 01       	movw	r30, r16
    3610:	91 83       	std	Z+1, r25	; 0x01
    3612:	80 83       	st	Z, r24
    3614:	1f c0       	rjmp	.+62     	; 0x3654 <lcd_init+0xc2a>
    3616:	fe 01       	movw	r30, r28
    3618:	e5 5f       	subi	r30, 0xF5	; 245
    361a:	fe 4f       	sbci	r31, 0xFE	; 254
    361c:	89 e1       	ldi	r24, 0x19	; 25
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	91 83       	std	Z+1, r25	; 0x01
    3622:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3624:	fe 01       	movw	r30, r28
    3626:	e5 5f       	subi	r30, 0xF5	; 245
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	80 81       	ld	r24, Z
    362c:	91 81       	ldd	r25, Z+1	; 0x01
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <lcd_init+0xc04>
    3632:	fe 01       	movw	r30, r28
    3634:	e5 5f       	subi	r30, 0xF5	; 245
    3636:	fe 4f       	sbci	r31, 0xFE	; 254
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363c:	de 01       	movw	r26, r28
    363e:	a3 5f       	subi	r26, 0xF3	; 243
    3640:	be 4f       	sbci	r27, 0xFE	; 254
    3642:	fe 01       	movw	r30, r28
    3644:	e3 5f       	subi	r30, 0xF3	; 243
    3646:	fe 4f       	sbci	r31, 0xFE	; 254
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	11 96       	adiw	r26, 0x01	; 1
    3650:	9c 93       	st	X, r25
    3652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3654:	fe 01       	movw	r30, r28
    3656:	e3 5f       	subi	r30, 0xF3	; 243
    3658:	fe 4f       	sbci	r31, 0xFE	; 254
    365a:	80 81       	ld	r24, Z
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	d1 f6       	brne	.-76     	; 0x3616 <lcd_init+0xbec>
    3662:	27 c0       	rjmp	.+78     	; 0x36b2 <lcd_init+0xc88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3664:	8e 01       	movw	r16, r28
    3666:	03 5f       	subi	r16, 0xF3	; 243
    3668:	1e 4f       	sbci	r17, 0xFE	; 254
    366a:	fe 01       	movw	r30, r28
    366c:	e1 5f       	subi	r30, 0xF1	; 241
    366e:	fe 4f       	sbci	r31, 0xFE	; 254
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	f8 01       	movw	r30, r16
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24
    3686:	de 01       	movw	r26, r28
    3688:	a7 5f       	subi	r26, 0xF7	; 247
    368a:	be 4f       	sbci	r27, 0xFE	; 254
    368c:	fe 01       	movw	r30, r28
    368e:	e3 5f       	subi	r30, 0xF3	; 243
    3690:	fe 4f       	sbci	r31, 0xFE	; 254
    3692:	80 81       	ld	r24, Z
    3694:	91 81       	ldd	r25, Z+1	; 0x01
    3696:	8d 93       	st	X+, r24
    3698:	9c 93       	st	X, r25
    369a:	fe 01       	movw	r30, r28
    369c:	e7 5f       	subi	r30, 0xF7	; 247
    369e:	fe 4f       	sbci	r31, 0xFE	; 254
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <lcd_init+0xc7a>
    36a8:	fe 01       	movw	r30, r28
    36aa:	e7 5f       	subi	r30, 0xF7	; 247
    36ac:	fe 4f       	sbci	r31, 0xFE	; 254
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
	_delay_ms(5);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	61 e0       	ldi	r22, 0x01	; 1
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    36bc:	fe 01       	movw	r30, r28
    36be:	eb 5f       	subi	r30, 0xFB	; 251
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a8 e4       	ldi	r26, 0x48	; 72
    36c8:	b2 e4       	ldi	r27, 0x42	; 66
    36ca:	80 83       	st	Z, r24
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	a2 83       	std	Z+2, r26	; 0x02
    36d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36d2:	8e 01       	movw	r16, r28
    36d4:	0f 5f       	subi	r16, 0xFF	; 255
    36d6:	1e 4f       	sbci	r17, 0xFE	; 254
    36d8:	fe 01       	movw	r30, r28
    36da:	eb 5f       	subi	r30, 0xFB	; 251
    36dc:	fe 4f       	sbci	r31, 0xFE	; 254
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	2b ea       	ldi	r18, 0xAB	; 171
    36e8:	3a ea       	ldi	r19, 0xAA	; 170
    36ea:	4a ea       	ldi	r20, 0xAA	; 170
    36ec:	5e e3       	ldi	r21, 0x3E	; 62
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	f8 01       	movw	r30, r16
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3700:	fe 01       	movw	r30, r28
    3702:	ef 5f       	subi	r30, 0xFF	; 255
    3704:	fe 4f       	sbci	r31, 0xFE	; 254
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e8       	ldi	r20, 0x80	; 128
    3714:	5f e3       	ldi	r21, 0x3F	; 63
    3716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371a:	88 23       	and	r24, r24
    371c:	34 f4       	brge	.+12     	; 0x372a <lcd_init+0xd00>
		__ticks = 1;
    371e:	fe 01       	movw	r30, r28
    3720:	e0 50       	subi	r30, 0x00	; 0
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	80 83       	st	Z, r24
    3728:	e0 c0       	rjmp	.+448    	; 0x38ea <lcd_init+0xec0>
	else if (__tmp > 255)
    372a:	fe 01       	movw	r30, r28
    372c:	ef 5f       	subi	r30, 0xFF	; 255
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	53 e4       	ldi	r21, 0x43	; 67
    3740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	0c f0       	brlt	.+2      	; 0x374a <lcd_init+0xd20>
    3748:	c0 c0       	rjmp	.+384    	; 0x38ca <lcd_init+0xea0>
	{
		_delay_ms(__us / 1000.0);
    374a:	fe 01       	movw	r30, r28
    374c:	eb 5f       	subi	r30, 0xFB	; 251
    374e:	fe 4f       	sbci	r31, 0xFE	; 254
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	4a e7       	ldi	r20, 0x7A	; 122
    375e:	54 e4       	ldi	r21, 0x44	; 68
    3760:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	fe 01       	movw	r30, r28
    376a:	e4 50       	subi	r30, 0x04	; 4
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 83       	st	Z, r24
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	a2 83       	std	Z+2, r26	; 0x02
    3774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3776:	8e 01       	movw	r16, r28
    3778:	08 50       	subi	r16, 0x08	; 8
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	fe 01       	movw	r30, r28
    377e:	e4 50       	subi	r30, 0x04	; 4
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	4a e7       	ldi	r20, 0x7A	; 122
    3790:	53 e4       	ldi	r21, 0x43	; 67
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	f8 01       	movw	r30, r16
    379c:	80 83       	st	Z, r24
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	a2 83       	std	Z+2, r26	; 0x02
    37a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37a4:	fe 01       	movw	r30, r28
    37a6:	e8 50       	subi	r30, 0x08	; 8
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	60 81       	ld	r22, Z
    37ac:	71 81       	ldd	r23, Z+1	; 0x01
    37ae:	82 81       	ldd	r24, Z+2	; 0x02
    37b0:	93 81       	ldd	r25, Z+3	; 0x03
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e8       	ldi	r20, 0x80	; 128
    37b8:	5f e3       	ldi	r21, 0x3F	; 63
    37ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37be:	88 23       	and	r24, r24
    37c0:	44 f4       	brge	.+16     	; 0x37d2 <lcd_init+0xda8>
		__ticks = 1;
    37c2:	fe 01       	movw	r30, r28
    37c4:	ea 50       	subi	r30, 0x0A	; 10
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
    37d0:	64 c0       	rjmp	.+200    	; 0x389a <lcd_init+0xe70>
	else if (__tmp > 65535)
    37d2:	fe 01       	movw	r30, r28
    37d4:	e8 50       	subi	r30, 0x08	; 8
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	3f ef       	ldi	r19, 0xFF	; 255
    37e4:	4f e7       	ldi	r20, 0x7F	; 127
    37e6:	57 e4       	ldi	r21, 0x47	; 71
    37e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ec:	18 16       	cp	r1, r24
    37ee:	0c f0       	brlt	.+2      	; 0x37f2 <lcd_init+0xdc8>
    37f0:	43 c0       	rjmp	.+134    	; 0x3878 <lcd_init+0xe4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f2:	fe 01       	movw	r30, r28
    37f4:	e4 50       	subi	r30, 0x04	; 4
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	60 81       	ld	r22, Z
    37fa:	71 81       	ldd	r23, Z+1	; 0x01
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	40 e2       	ldi	r20, 0x20	; 32
    3806:	51 e4       	ldi	r21, 0x41	; 65
    3808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	8e 01       	movw	r16, r28
    3812:	0a 50       	subi	r16, 0x0A	; 10
    3814:	1f 4f       	sbci	r17, 0xFF	; 255
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	f8 01       	movw	r30, r16
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	1f c0       	rjmp	.+62     	; 0x3868 <lcd_init+0xe3e>
    382a:	fe 01       	movw	r30, r28
    382c:	ec 50       	subi	r30, 0x0C	; 12
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	89 e1       	ldi	r24, 0x19	; 25
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	91 83       	std	Z+1, r25	; 0x01
    3836:	80 83       	st	Z, r24
    3838:	fe 01       	movw	r30, r28
    383a:	ec 50       	subi	r30, 0x0C	; 12
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	f1 f7       	brne	.-4      	; 0x3842 <lcd_init+0xe18>
    3846:	fe 01       	movw	r30, r28
    3848:	ec 50       	subi	r30, 0x0C	; 12
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3850:	de 01       	movw	r26, r28
    3852:	aa 50       	subi	r26, 0x0A	; 10
    3854:	bf 4f       	sbci	r27, 0xFF	; 255
    3856:	fe 01       	movw	r30, r28
    3858:	ea 50       	subi	r30, 0x0A	; 10
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 81       	ld	r24, Z
    385e:	91 81       	ldd	r25, Z+1	; 0x01
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	11 96       	adiw	r26, 0x01	; 1
    3864:	9c 93       	st	X, r25
    3866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3868:	fe 01       	movw	r30, r28
    386a:	ea 50       	subi	r30, 0x0A	; 10
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	91 81       	ldd	r25, Z+1	; 0x01
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	d1 f6       	brne	.-76     	; 0x382a <lcd_init+0xe00>
    3876:	4b c0       	rjmp	.+150    	; 0x390e <lcd_init+0xee4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3878:	8e 01       	movw	r16, r28
    387a:	0a 50       	subi	r16, 0x0A	; 10
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	fe 01       	movw	r30, r28
    3880:	e8 50       	subi	r30, 0x08	; 8
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	f8 01       	movw	r30, r16
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	80 83       	st	Z, r24
    389a:	de 01       	movw	r26, r28
    389c:	ae 50       	subi	r26, 0x0E	; 14
    389e:	bf 4f       	sbci	r27, 0xFF	; 255
    38a0:	fe 01       	movw	r30, r28
    38a2:	ea 50       	subi	r30, 0x0A	; 10
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	11 96       	adiw	r26, 0x01	; 1
    38ac:	9c 93       	st	X, r25
    38ae:	8e 93       	st	-X, r24
    38b0:	fe 01       	movw	r30, r28
    38b2:	ee 50       	subi	r30, 0x0E	; 14
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <lcd_init+0xe90>
    38be:	fe 01       	movw	r30, r28
    38c0:	ee 50       	subi	r30, 0x0E	; 14
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	22 c0       	rjmp	.+68     	; 0x390e <lcd_init+0xee4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38ca:	8e 01       	movw	r16, r28
    38cc:	00 50       	subi	r16, 0x00	; 0
    38ce:	1f 4f       	sbci	r17, 0xFF	; 255
    38d0:	fe 01       	movw	r30, r28
    38d2:	ef 5f       	subi	r30, 0xFF	; 255
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	f8 01       	movw	r30, r16
    38e8:	80 83       	st	Z, r24
    38ea:	de 01       	movw	r26, r28
    38ec:	af 50       	subi	r26, 0x0F	; 15
    38ee:	bf 4f       	sbci	r27, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	e0 50       	subi	r30, 0x00	; 0
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	80 81       	ld	r24, Z
    38f8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38fa:	fe 01       	movw	r30, r28
    38fc:	ef 50       	subi	r30, 0x0F	; 15
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	80 81       	ld	r24, Z
    3902:	8a 95       	dec	r24
    3904:	f1 f7       	brne	.-4      	; 0x3902 <lcd_init+0xed8>
    3906:	fe 01       	movw	r30, r28
    3908:	ef 50       	subi	r30, 0x0F	; 15
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	6c e3       	ldi	r22, 0x3C	; 60
    3912:	4c e0       	ldi	r20, 0x0C	; 12
    3914:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    3918:	fe 01       	movw	r30, r28
    391a:	e3 51       	subi	r30, 0x13	; 19
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	a8 e4       	ldi	r26, 0x48	; 72
    3924:	b2 e4       	ldi	r27, 0x42	; 66
    3926:	80 83       	st	Z, r24
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	a2 83       	std	Z+2, r26	; 0x02
    392c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    392e:	8e 01       	movw	r16, r28
    3930:	07 51       	subi	r16, 0x17	; 23
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	fe 01       	movw	r30, r28
    3936:	e3 51       	subi	r30, 0x13	; 19
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	2b ea       	ldi	r18, 0xAB	; 171
    3944:	3a ea       	ldi	r19, 0xAA	; 170
    3946:	4a ea       	ldi	r20, 0xAA	; 170
    3948:	5e e3       	ldi	r21, 0x3E	; 62
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	f8 01       	movw	r30, r16
    3954:	80 83       	st	Z, r24
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	a2 83       	std	Z+2, r26	; 0x02
    395a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    395c:	fe 01       	movw	r30, r28
    395e:	e7 51       	subi	r30, 0x17	; 23
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	60 81       	ld	r22, Z
    3964:	71 81       	ldd	r23, Z+1	; 0x01
    3966:	82 81       	ldd	r24, Z+2	; 0x02
    3968:	93 81       	ldd	r25, Z+3	; 0x03
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e8       	ldi	r20, 0x80	; 128
    3970:	5f e3       	ldi	r21, 0x3F	; 63
    3972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3976:	88 23       	and	r24, r24
    3978:	34 f4       	brge	.+12     	; 0x3986 <lcd_init+0xf5c>
		__ticks = 1;
    397a:	fe 01       	movw	r30, r28
    397c:	e8 51       	subi	r30, 0x18	; 24
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 83       	st	Z, r24
    3984:	e0 c0       	rjmp	.+448    	; 0x3b46 <lcd_init+0x111c>
	else if (__tmp > 255)
    3986:	fe 01       	movw	r30, r28
    3988:	e7 51       	subi	r30, 0x17	; 23
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	60 81       	ld	r22, Z
    398e:	71 81       	ldd	r23, Z+1	; 0x01
    3990:	82 81       	ldd	r24, Z+2	; 0x02
    3992:	93 81       	ldd	r25, Z+3	; 0x03
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	53 e4       	ldi	r21, 0x43	; 67
    399c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	0c f0       	brlt	.+2      	; 0x39a6 <lcd_init+0xf7c>
    39a4:	c0 c0       	rjmp	.+384    	; 0x3b26 <lcd_init+0x10fc>
	{
		_delay_ms(__us / 1000.0);
    39a6:	fe 01       	movw	r30, r28
    39a8:	e3 51       	subi	r30, 0x13	; 19
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	60 81       	ld	r22, Z
    39ae:	71 81       	ldd	r23, Z+1	; 0x01
    39b0:	82 81       	ldd	r24, Z+2	; 0x02
    39b2:	93 81       	ldd	r25, Z+3	; 0x03
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	4a e7       	ldi	r20, 0x7A	; 122
    39ba:	54 e4       	ldi	r21, 0x44	; 68
    39bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	fe 01       	movw	r30, r28
    39c6:	ec 51       	subi	r30, 0x1C	; 28
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 83       	st	Z, r24
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	a2 83       	std	Z+2, r26	; 0x02
    39d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d2:	8e 01       	movw	r16, r28
    39d4:	00 52       	subi	r16, 0x20	; 32
    39d6:	1f 4f       	sbci	r17, 0xFF	; 255
    39d8:	fe 01       	movw	r30, r28
    39da:	ec 51       	subi	r30, 0x1C	; 28
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	60 81       	ld	r22, Z
    39e0:	71 81       	ldd	r23, Z+1	; 0x01
    39e2:	82 81       	ldd	r24, Z+2	; 0x02
    39e4:	93 81       	ldd	r25, Z+3	; 0x03
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	4a e7       	ldi	r20, 0x7A	; 122
    39ec:	53 e4       	ldi	r21, 0x43	; 67
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	f8 01       	movw	r30, r16
    39f8:	80 83       	st	Z, r24
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	a2 83       	std	Z+2, r26	; 0x02
    39fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a00:	fe 01       	movw	r30, r28
    3a02:	e0 52       	subi	r30, 0x20	; 32
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	60 81       	ld	r22, Z
    3a08:	71 81       	ldd	r23, Z+1	; 0x01
    3a0a:	82 81       	ldd	r24, Z+2	; 0x02
    3a0c:	93 81       	ldd	r25, Z+3	; 0x03
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e8       	ldi	r20, 0x80	; 128
    3a14:	5f e3       	ldi	r21, 0x3F	; 63
    3a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1a:	88 23       	and	r24, r24
    3a1c:	44 f4       	brge	.+16     	; 0x3a2e <lcd_init+0x1004>
		__ticks = 1;
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e2 52       	subi	r30, 0x22	; 34
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	91 83       	std	Z+1, r25	; 0x01
    3a2a:	80 83       	st	Z, r24
    3a2c:	64 c0       	rjmp	.+200    	; 0x3af6 <lcd_init+0x10cc>
	else if (__tmp > 65535)
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e0 52       	subi	r30, 0x20	; 32
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	60 81       	ld	r22, Z
    3a36:	71 81       	ldd	r23, Z+1	; 0x01
    3a38:	82 81       	ldd	r24, Z+2	; 0x02
    3a3a:	93 81       	ldd	r25, Z+3	; 0x03
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	3f ef       	ldi	r19, 0xFF	; 255
    3a40:	4f e7       	ldi	r20, 0x7F	; 127
    3a42:	57 e4       	ldi	r21, 0x47	; 71
    3a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a48:	18 16       	cp	r1, r24
    3a4a:	0c f0       	brlt	.+2      	; 0x3a4e <lcd_init+0x1024>
    3a4c:	43 c0       	rjmp	.+134    	; 0x3ad4 <lcd_init+0x10aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4e:	fe 01       	movw	r30, r28
    3a50:	ec 51       	subi	r30, 0x1C	; 28
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	60 81       	ld	r22, Z
    3a56:	71 81       	ldd	r23, Z+1	; 0x01
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	02 52       	subi	r16, 0x22	; 34
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	bc 01       	movw	r22, r24
    3a74:	cd 01       	movw	r24, r26
    3a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	f8 01       	movw	r30, r16
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	80 83       	st	Z, r24
    3a84:	1f c0       	rjmp	.+62     	; 0x3ac4 <lcd_init+0x109a>
    3a86:	fe 01       	movw	r30, r28
    3a88:	e4 52       	subi	r30, 0x24	; 36
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	89 e1       	ldi	r24, 0x19	; 25
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a94:	fe 01       	movw	r30, r28
    3a96:	e4 52       	subi	r30, 0x24	; 36
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <lcd_init+0x1074>
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e4 52       	subi	r30, 0x24	; 36
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aac:	de 01       	movw	r26, r28
    3aae:	a2 52       	subi	r26, 0x22	; 34
    3ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e2 52       	subi	r30, 0x22	; 34
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	80 81       	ld	r24, Z
    3aba:	91 81       	ldd	r25, Z+1	; 0x01
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	11 96       	adiw	r26, 0x01	; 1
    3ac0:	9c 93       	st	X, r25
    3ac2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e2 52       	subi	r30, 0x22	; 34
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	80 81       	ld	r24, Z
    3acc:	91 81       	ldd	r25, Z+1	; 0x01
    3ace:	00 97       	sbiw	r24, 0x00	; 0
    3ad0:	d1 f6       	brne	.-76     	; 0x3a86 <lcd_init+0x105c>
    3ad2:	4b c0       	rjmp	.+150    	; 0x3b6a <lcd_init+0x1140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	02 52       	subi	r16, 0x22	; 34
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	fe 01       	movw	r30, r28
    3adc:	e0 52       	subi	r30, 0x20	; 32
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	f8 01       	movw	r30, r16
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	80 83       	st	Z, r24
    3af6:	de 01       	movw	r26, r28
    3af8:	a6 52       	subi	r26, 0x26	; 38
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	fe 01       	movw	r30, r28
    3afe:	e2 52       	subi	r30, 0x22	; 34
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	11 96       	adiw	r26, 0x01	; 1
    3b08:	9c 93       	st	X, r25
    3b0a:	8e 93       	st	-X, r24
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e6 52       	subi	r30, 0x26	; 38
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <lcd_init+0x10ec>
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e6 52       	subi	r30, 0x26	; 38
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	80 83       	st	Z, r24
    3b24:	22 c0       	rjmp	.+68     	; 0x3b6a <lcd_init+0x1140>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b26:	8e 01       	movw	r16, r28
    3b28:	08 51       	subi	r16, 0x18	; 24
    3b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e7 51       	subi	r30, 0x17	; 23
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	f8 01       	movw	r30, r16
    3b44:	80 83       	st	Z, r24
    3b46:	de 01       	movw	r26, r28
    3b48:	a7 52       	subi	r26, 0x27	; 39
    3b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e8 51       	subi	r30, 0x18	; 24
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 81       	ld	r24, Z
    3b54:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 52       	subi	r30, 0x27	; 39
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	8a 95       	dec	r24
    3b60:	f1 f7       	brne	.-4      	; 0x3b5e <lcd_init+0x1134>
    3b62:	fe 01       	movw	r30, r28
    3b64:	e7 52       	subi	r30, 0x27	; 39
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    3b74:	fe 01       	movw	r30, r28
    3b76:	eb 52       	subi	r30, 0x2B	; 43
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	a6 e1       	ldi	r26, 0x16	; 22
    3b80:	b4 e4       	ldi	r27, 0x44	; 68
    3b82:	80 83       	st	Z, r24
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	a2 83       	std	Z+2, r26	; 0x02
    3b88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b8a:	8e 01       	movw	r16, r28
    3b8c:	0f 52       	subi	r16, 0x2F	; 47
    3b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b90:	fe 01       	movw	r30, r28
    3b92:	eb 52       	subi	r30, 0x2B	; 43
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	2b ea       	ldi	r18, 0xAB	; 171
    3ba0:	3a ea       	ldi	r19, 0xAA	; 170
    3ba2:	4a ea       	ldi	r20, 0xAA	; 170
    3ba4:	5e e3       	ldi	r21, 0x3E	; 62
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	f8 01       	movw	r30, r16
    3bb0:	80 83       	st	Z, r24
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	a2 83       	std	Z+2, r26	; 0x02
    3bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ef 52       	subi	r30, 0x2F	; 47
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	60 81       	ld	r22, Z
    3bc0:	71 81       	ldd	r23, Z+1	; 0x01
    3bc2:	82 81       	ldd	r24, Z+2	; 0x02
    3bc4:	93 81       	ldd	r25, Z+3	; 0x03
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	34 f4       	brge	.+12     	; 0x3be2 <lcd_init+0x11b8>
		__ticks = 1;
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e0 53       	subi	r30, 0x30	; 48
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	80 83       	st	Z, r24
    3be0:	e0 c0       	rjmp	.+448    	; 0x3da2 <lcd_init+0x1378>
	else if (__tmp > 255)
    3be2:	fe 01       	movw	r30, r28
    3be4:	ef 52       	subi	r30, 0x2F	; 47
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	4f e7       	ldi	r20, 0x7F	; 127
    3bf6:	53 e4       	ldi	r21, 0x43	; 67
    3bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bfc:	18 16       	cp	r1, r24
    3bfe:	0c f0       	brlt	.+2      	; 0x3c02 <lcd_init+0x11d8>
    3c00:	c0 c0       	rjmp	.+384    	; 0x3d82 <lcd_init+0x1358>
	{
		_delay_ms(__us / 1000.0);
    3c02:	fe 01       	movw	r30, r28
    3c04:	eb 52       	subi	r30, 0x2B	; 43
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a e7       	ldi	r20, 0x7A	; 122
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	fe 01       	movw	r30, r28
    3c22:	e4 53       	subi	r30, 0x34	; 52
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	80 83       	st	Z, r24
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	a2 83       	std	Z+2, r26	; 0x02
    3c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	8e 01       	movw	r16, r28
    3c30:	08 53       	subi	r16, 0x38	; 56
    3c32:	1f 4f       	sbci	r17, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e4 53       	subi	r30, 0x34	; 52
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	60 81       	ld	r22, Z
    3c3c:	71 81       	ldd	r23, Z+1	; 0x01
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	4a e7       	ldi	r20, 0x7A	; 122
    3c48:	53 e4       	ldi	r21, 0x43	; 67
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	f8 01       	movw	r30, r16
    3c54:	80 83       	st	Z, r24
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	a2 83       	std	Z+2, r26	; 0x02
    3c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e8 53       	subi	r30, 0x38	; 56
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	60 81       	ld	r22, Z
    3c64:	71 81       	ldd	r23, Z+1	; 0x01
    3c66:	82 81       	ldd	r24, Z+2	; 0x02
    3c68:	93 81       	ldd	r25, Z+3	; 0x03
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e8       	ldi	r20, 0x80	; 128
    3c70:	5f e3       	ldi	r21, 0x3F	; 63
    3c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c76:	88 23       	and	r24, r24
    3c78:	44 f4       	brge	.+16     	; 0x3c8a <lcd_init+0x1260>
		__ticks = 1;
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	ea 53       	subi	r30, 0x3A	; 58
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
    3c88:	64 c0       	rjmp	.+200    	; 0x3d52 <lcd_init+0x1328>
	else if (__tmp > 65535)
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e8 53       	subi	r30, 0x38	; 56
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	60 81       	ld	r22, Z
    3c92:	71 81       	ldd	r23, Z+1	; 0x01
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	93 81       	ldd	r25, Z+3	; 0x03
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	3f ef       	ldi	r19, 0xFF	; 255
    3c9c:	4f e7       	ldi	r20, 0x7F	; 127
    3c9e:	57 e4       	ldi	r21, 0x47	; 71
    3ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca4:	18 16       	cp	r1, r24
    3ca6:	0c f0       	brlt	.+2      	; 0x3caa <lcd_init+0x1280>
    3ca8:	43 c0       	rjmp	.+134    	; 0x3d30 <lcd_init+0x1306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3caa:	fe 01       	movw	r30, r28
    3cac:	e4 53       	subi	r30, 0x34	; 52
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e2       	ldi	r20, 0x20	; 32
    3cbe:	51 e4       	ldi	r21, 0x41	; 65
    3cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	8e 01       	movw	r16, r28
    3cca:	0a 53       	subi	r16, 0x3A	; 58
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	bc 01       	movw	r22, r24
    3cd0:	cd 01       	movw	r24, r26
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	f8 01       	movw	r30, r16
    3cdc:	91 83       	std	Z+1, r25	; 0x01
    3cde:	80 83       	st	Z, r24
    3ce0:	1f c0       	rjmp	.+62     	; 0x3d20 <lcd_init+0x12f6>
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	ec 53       	subi	r30, 0x3C	; 60
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	89 e1       	ldi	r24, 0x19	; 25
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ec 53       	subi	r30, 0x3C	; 60
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <lcd_init+0x12d0>
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ec 53       	subi	r30, 0x3C	; 60
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d08:	de 01       	movw	r26, r28
    3d0a:	aa 53       	subi	r26, 0x3A	; 58
    3d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0e:	fe 01       	movw	r30, r28
    3d10:	ea 53       	subi	r30, 0x3A	; 58
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	11 96       	adiw	r26, 0x01	; 1
    3d1c:	9c 93       	st	X, r25
    3d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d20:	fe 01       	movw	r30, r28
    3d22:	ea 53       	subi	r30, 0x3A	; 58
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	d1 f6       	brne	.-76     	; 0x3ce2 <lcd_init+0x12b8>
    3d2e:	4b c0       	rjmp	.+150    	; 0x3dc6 <lcd_init+0x139c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	8e 01       	movw	r16, r28
    3d32:	0a 53       	subi	r16, 0x3A	; 58
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	fe 01       	movw	r30, r28
    3d38:	e8 53       	subi	r30, 0x38	; 56
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
    3d52:	de 01       	movw	r26, r28
    3d54:	ae 53       	subi	r26, 0x3E	; 62
    3d56:	bf 4f       	sbci	r27, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	ea 53       	subi	r30, 0x3A	; 58
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	11 96       	adiw	r26, 0x01	; 1
    3d64:	9c 93       	st	X, r25
    3d66:	8e 93       	st	-X, r24
    3d68:	fe 01       	movw	r30, r28
    3d6a:	ee 53       	subi	r30, 0x3E	; 62
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <lcd_init+0x1348>
    3d76:	fe 01       	movw	r30, r28
    3d78:	ee 53       	subi	r30, 0x3E	; 62
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
    3d80:	22 c0       	rjmp	.+68     	; 0x3dc6 <lcd_init+0x139c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d82:	8e 01       	movw	r16, r28
    3d84:	00 53       	subi	r16, 0x30	; 48
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	ef 52       	subi	r30, 0x2F	; 47
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	f8 01       	movw	r30, r16
    3da0:	80 83       	st	Z, r24
    3da2:	de 01       	movw	r26, r28
    3da4:	af 53       	subi	r26, 0x3F	; 63
    3da6:	bf 4f       	sbci	r27, 0xFF	; 255
    3da8:	fe 01       	movw	r30, r28
    3daa:	e0 53       	subi	r30, 0x30	; 48
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 81       	ld	r24, Z
    3db0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3db2:	fe 01       	movw	r30, r28
    3db4:	ef 53       	subi	r30, 0x3F	; 63
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	80 81       	ld	r24, Z
    3dba:	8a 95       	dec	r24
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <lcd_init+0x1390>
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ef 53       	subi	r30, 0x3F	; 63
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 83       	st	Z, r24
	_delay_us(600);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e3 54       	subi	r30, 0x43	; 67
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a8 e4       	ldi	r26, 0x48	; 72
    3ddc:	b2 e4       	ldi	r27, 0x42	; 66
    3dde:	80 83       	st	Z, r24
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	a2 83       	std	Z+2, r26	; 0x02
    3de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3de6:	8e 01       	movw	r16, r28
    3de8:	07 54       	subi	r16, 0x47	; 71
    3dea:	1f 4f       	sbci	r17, 0xFF	; 255
    3dec:	fe 01       	movw	r30, r28
    3dee:	e3 54       	subi	r30, 0x43	; 67
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	2b ea       	ldi	r18, 0xAB	; 171
    3dfc:	3a ea       	ldi	r19, 0xAA	; 170
    3dfe:	4a ea       	ldi	r20, 0xAA	; 170
    3e00:	5e e3       	ldi	r21, 0x3E	; 62
    3e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	80 83       	st	Z, r24
    3e0e:	91 83       	std	Z+1, r25	; 0x01
    3e10:	a2 83       	std	Z+2, r26	; 0x02
    3e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e14:	fe 01       	movw	r30, r28
    3e16:	e7 54       	subi	r30, 0x47	; 71
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	60 81       	ld	r22, Z
    3e1c:	71 81       	ldd	r23, Z+1	; 0x01
    3e1e:	82 81       	ldd	r24, Z+2	; 0x02
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e8       	ldi	r20, 0x80	; 128
    3e28:	5f e3       	ldi	r21, 0x3F	; 63
    3e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2e:	88 23       	and	r24, r24
    3e30:	34 f4       	brge	.+12     	; 0x3e3e <lcd_init+0x1414>
		__ticks = 1;
    3e32:	fe 01       	movw	r30, r28
    3e34:	e8 54       	subi	r30, 0x48	; 72
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	80 83       	st	Z, r24
    3e3c:	e0 c0       	rjmp	.+448    	; 0x3ffe <lcd_init+0x15d4>
	else if (__tmp > 255)
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e7 54       	subi	r30, 0x47	; 71
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	53 e4       	ldi	r21, 0x43	; 67
    3e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e58:	18 16       	cp	r1, r24
    3e5a:	0c f0       	brlt	.+2      	; 0x3e5e <lcd_init+0x1434>
    3e5c:	c0 c0       	rjmp	.+384    	; 0x3fde <lcd_init+0x15b4>
	{
		_delay_ms(__us / 1000.0);
    3e5e:	fe 01       	movw	r30, r28
    3e60:	e3 54       	subi	r30, 0x43	; 67
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	4a e7       	ldi	r20, 0x7A	; 122
    3e72:	54 e4       	ldi	r21, 0x44	; 68
    3e74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ec 54       	subi	r30, 0x4C	; 76
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 83       	st	Z, r24
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	a2 83       	std	Z+2, r26	; 0x02
    3e88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8a:	8e 01       	movw	r16, r28
    3e8c:	00 55       	subi	r16, 0x50	; 80
    3e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e90:	fe 01       	movw	r30, r28
    3e92:	ec 54       	subi	r30, 0x4C	; 76
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4a e7       	ldi	r20, 0x7A	; 122
    3ea4:	53 e4       	ldi	r21, 0x43	; 67
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	f8 01       	movw	r30, r16
    3eb0:	80 83       	st	Z, r24
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	a2 83       	std	Z+2, r26	; 0x02
    3eb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e0 55       	subi	r30, 0x50	; 80
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	44 f4       	brge	.+16     	; 0x3ee6 <lcd_init+0x14bc>
		__ticks = 1;
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e2 55       	subi	r30, 0x52	; 82
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	91 83       	std	Z+1, r25	; 0x01
    3ee2:	80 83       	st	Z, r24
    3ee4:	64 c0       	rjmp	.+200    	; 0x3fae <lcd_init+0x1584>
	else if (__tmp > 65535)
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e0 55       	subi	r30, 0x50	; 80
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	60 81       	ld	r22, Z
    3eee:	71 81       	ldd	r23, Z+1	; 0x01
    3ef0:	82 81       	ldd	r24, Z+2	; 0x02
    3ef2:	93 81       	ldd	r25, Z+3	; 0x03
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	3f ef       	ldi	r19, 0xFF	; 255
    3ef8:	4f e7       	ldi	r20, 0x7F	; 127
    3efa:	57 e4       	ldi	r21, 0x47	; 71
    3efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f00:	18 16       	cp	r1, r24
    3f02:	0c f0       	brlt	.+2      	; 0x3f06 <lcd_init+0x14dc>
    3f04:	43 c0       	rjmp	.+134    	; 0x3f8c <lcd_init+0x1562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f06:	fe 01       	movw	r30, r28
    3f08:	ec 54       	subi	r30, 0x4C	; 76
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	60 81       	ld	r22, Z
    3f0e:	71 81       	ldd	r23, Z+1	; 0x01
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	93 81       	ldd	r25, Z+3	; 0x03
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e2       	ldi	r20, 0x20	; 32
    3f1a:	51 e4       	ldi	r21, 0x41	; 65
    3f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	8e 01       	movw	r16, r28
    3f26:	02 55       	subi	r16, 0x52	; 82
    3f28:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	f8 01       	movw	r30, r16
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
    3f3c:	1f c0       	rjmp	.+62     	; 0x3f7c <lcd_init+0x1552>
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e4 55       	subi	r30, 0x54	; 84
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	89 e1       	ldi	r24, 0x19	; 25
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e4 55       	subi	r30, 0x54	; 84
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <lcd_init+0x152c>
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e4 55       	subi	r30, 0x54	; 84
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f64:	de 01       	movw	r26, r28
    3f66:	a2 55       	subi	r26, 0x52	; 82
    3f68:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e2 55       	subi	r30, 0x52	; 82
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	11 96       	adiw	r26, 0x01	; 1
    3f78:	9c 93       	st	X, r25
    3f7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e2 55       	subi	r30, 0x52	; 82
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	00 97       	sbiw	r24, 0x00	; 0
    3f88:	d1 f6       	brne	.-76     	; 0x3f3e <lcd_init+0x1514>
    3f8a:	4b c0       	rjmp	.+150    	; 0x4022 <lcd_init+0x15f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8c:	8e 01       	movw	r16, r28
    3f8e:	02 55       	subi	r16, 0x52	; 82
    3f90:	1f 4f       	sbci	r17, 0xFF	; 255
    3f92:	fe 01       	movw	r30, r28
    3f94:	e0 55       	subi	r30, 0x50	; 80
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	f8 01       	movw	r30, r16
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
    3fae:	de 01       	movw	r26, r28
    3fb0:	a6 55       	subi	r26, 0x56	; 86
    3fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e2 55       	subi	r30, 0x52	; 82
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	11 96       	adiw	r26, 0x01	; 1
    3fc0:	9c 93       	st	X, r25
    3fc2:	8e 93       	st	-X, r24
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e6 55       	subi	r30, 0x56	; 86
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <lcd_init+0x15a4>
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e6 55       	subi	r30, 0x56	; 86
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
    3fdc:	22 c0       	rjmp	.+68     	; 0x4022 <lcd_init+0x15f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	08 54       	subi	r16, 0x48	; 72
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e7 54       	subi	r30, 0x47	; 71
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	80 83       	st	Z, r24
    3ffe:	de 01       	movw	r26, r28
    4000:	a7 55       	subi	r26, 0x57	; 87
    4002:	bf 4f       	sbci	r27, 0xFF	; 255
    4004:	fe 01       	movw	r30, r28
    4006:	e8 54       	subi	r30, 0x48	; 72
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    400e:	fe 01       	movw	r30, r28
    4010:	e7 55       	subi	r30, 0x57	; 87
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	80 81       	ld	r24, Z
    4016:	8a 95       	dec	r24
    4018:	f1 f7       	brne	.-4      	; 0x4016 <lcd_init+0x15ec>
    401a:	fe 01       	movw	r30, r28
    401c:	e7 55       	subi	r30, 0x57	; 87
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	61 e0       	ldi	r22, 0x01	; 1
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    402c:	fe 01       	movw	r30, r28
    402e:	eb 55       	subi	r30, 0x5B	; 91
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	a8 e4       	ldi	r26, 0x48	; 72
    4038:	b2 e4       	ldi	r27, 0x42	; 66
    403a:	80 83       	st	Z, r24
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	a2 83       	std	Z+2, r26	; 0x02
    4040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4042:	8e 01       	movw	r16, r28
    4044:	0f 55       	subi	r16, 0x5F	; 95
    4046:	1f 4f       	sbci	r17, 0xFF	; 255
    4048:	fe 01       	movw	r30, r28
    404a:	eb 55       	subi	r30, 0x5B	; 91
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	60 81       	ld	r22, Z
    4050:	71 81       	ldd	r23, Z+1	; 0x01
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	2b ea       	ldi	r18, 0xAB	; 171
    4058:	3a ea       	ldi	r19, 0xAA	; 170
    405a:	4a ea       	ldi	r20, 0xAA	; 170
    405c:	5e e3       	ldi	r21, 0x3E	; 62
    405e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	f8 01       	movw	r30, r16
    4068:	80 83       	st	Z, r24
    406a:	91 83       	std	Z+1, r25	; 0x01
    406c:	a2 83       	std	Z+2, r26	; 0x02
    406e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4070:	fe 01       	movw	r30, r28
    4072:	ef 55       	subi	r30, 0x5F	; 95
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e8       	ldi	r20, 0x80	; 128
    4084:	5f e3       	ldi	r21, 0x3F	; 63
    4086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    408a:	88 23       	and	r24, r24
    408c:	34 f4       	brge	.+12     	; 0x409a <lcd_init+0x1670>
		__ticks = 1;
    408e:	fe 01       	movw	r30, r28
    4090:	e0 56       	subi	r30, 0x60	; 96
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	80 83       	st	Z, r24
    4098:	e0 c0       	rjmp	.+448    	; 0x425a <lcd_init+0x1830>
	else if (__tmp > 255)
    409a:	fe 01       	movw	r30, r28
    409c:	ef 55       	subi	r30, 0x5F	; 95
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	60 81       	ld	r22, Z
    40a2:	71 81       	ldd	r23, Z+1	; 0x01
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	93 81       	ldd	r25, Z+3	; 0x03
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	4f e7       	ldi	r20, 0x7F	; 127
    40ae:	53 e4       	ldi	r21, 0x43	; 67
    40b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b4:	18 16       	cp	r1, r24
    40b6:	0c f0       	brlt	.+2      	; 0x40ba <lcd_init+0x1690>
    40b8:	c0 c0       	rjmp	.+384    	; 0x423a <lcd_init+0x1810>
	{
		_delay_ms(__us / 1000.0);
    40ba:	fe 01       	movw	r30, r28
    40bc:	eb 55       	subi	r30, 0x5B	; 91
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	60 81       	ld	r22, Z
    40c2:	71 81       	ldd	r23, Z+1	; 0x01
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	4a e7       	ldi	r20, 0x7A	; 122
    40ce:	54 e4       	ldi	r21, 0x44	; 68
    40d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	fe 01       	movw	r30, r28
    40da:	e4 56       	subi	r30, 0x64	; 100
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 83       	st	Z, r24
    40e0:	91 83       	std	Z+1, r25	; 0x01
    40e2:	a2 83       	std	Z+2, r26	; 0x02
    40e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e6:	8e 01       	movw	r16, r28
    40e8:	08 56       	subi	r16, 0x68	; 104
    40ea:	1f 4f       	sbci	r17, 0xFF	; 255
    40ec:	fe 01       	movw	r30, r28
    40ee:	e4 56       	subi	r30, 0x64	; 100
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	60 81       	ld	r22, Z
    40f4:	71 81       	ldd	r23, Z+1	; 0x01
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	4a e7       	ldi	r20, 0x7A	; 122
    4100:	53 e4       	ldi	r21, 0x43	; 67
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	f8 01       	movw	r30, r16
    410c:	80 83       	st	Z, r24
    410e:	91 83       	std	Z+1, r25	; 0x01
    4110:	a2 83       	std	Z+2, r26	; 0x02
    4112:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4114:	fe 01       	movw	r30, r28
    4116:	e8 56       	subi	r30, 0x68	; 104
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	60 81       	ld	r22, Z
    411c:	71 81       	ldd	r23, Z+1	; 0x01
    411e:	82 81       	ldd	r24, Z+2	; 0x02
    4120:	93 81       	ldd	r25, Z+3	; 0x03
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	40 e8       	ldi	r20, 0x80	; 128
    4128:	5f e3       	ldi	r21, 0x3F	; 63
    412a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412e:	88 23       	and	r24, r24
    4130:	44 f4       	brge	.+16     	; 0x4142 <lcd_init+0x1718>
		__ticks = 1;
    4132:	fe 01       	movw	r30, r28
    4134:	ea 56       	subi	r30, 0x6A	; 106
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	91 83       	std	Z+1, r25	; 0x01
    413e:	80 83       	st	Z, r24
    4140:	64 c0       	rjmp	.+200    	; 0x420a <lcd_init+0x17e0>
	else if (__tmp > 65535)
    4142:	fe 01       	movw	r30, r28
    4144:	e8 56       	subi	r30, 0x68	; 104
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	60 81       	ld	r22, Z
    414a:	71 81       	ldd	r23, Z+1	; 0x01
    414c:	82 81       	ldd	r24, Z+2	; 0x02
    414e:	93 81       	ldd	r25, Z+3	; 0x03
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	3f ef       	ldi	r19, 0xFF	; 255
    4154:	4f e7       	ldi	r20, 0x7F	; 127
    4156:	57 e4       	ldi	r21, 0x47	; 71
    4158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    415c:	18 16       	cp	r1, r24
    415e:	0c f0       	brlt	.+2      	; 0x4162 <lcd_init+0x1738>
    4160:	43 c0       	rjmp	.+134    	; 0x41e8 <lcd_init+0x17be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4162:	fe 01       	movw	r30, r28
    4164:	e4 56       	subi	r30, 0x64	; 100
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e2       	ldi	r20, 0x20	; 32
    4176:	51 e4       	ldi	r21, 0x41	; 65
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	8e 01       	movw	r16, r28
    4182:	0a 56       	subi	r16, 0x6A	; 106
    4184:	1f 4f       	sbci	r17, 0xFF	; 255
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	f8 01       	movw	r30, r16
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
    4198:	1f c0       	rjmp	.+62     	; 0x41d8 <lcd_init+0x17ae>
    419a:	fe 01       	movw	r30, r28
    419c:	ec 56       	subi	r30, 0x6C	; 108
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	89 e1       	ldi	r24, 0x19	; 25
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41a8:	fe 01       	movw	r30, r28
    41aa:	ec 56       	subi	r30, 0x6C	; 108
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	80 81       	ld	r24, Z
    41b0:	91 81       	ldd	r25, Z+1	; 0x01
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	f1 f7       	brne	.-4      	; 0x41b2 <lcd_init+0x1788>
    41b6:	fe 01       	movw	r30, r28
    41b8:	ec 56       	subi	r30, 0x6C	; 108
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	91 83       	std	Z+1, r25	; 0x01
    41be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	de 01       	movw	r26, r28
    41c2:	aa 56       	subi	r26, 0x6A	; 106
    41c4:	bf 4f       	sbci	r27, 0xFF	; 255
    41c6:	fe 01       	movw	r30, r28
    41c8:	ea 56       	subi	r30, 0x6A	; 106
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 81       	ld	r24, Z
    41ce:	91 81       	ldd	r25, Z+1	; 0x01
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	11 96       	adiw	r26, 0x01	; 1
    41d4:	9c 93       	st	X, r25
    41d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d8:	fe 01       	movw	r30, r28
    41da:	ea 56       	subi	r30, 0x6A	; 106
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	80 81       	ld	r24, Z
    41e0:	91 81       	ldd	r25, Z+1	; 0x01
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	d1 f6       	brne	.-76     	; 0x419a <lcd_init+0x1770>
    41e6:	4b c0       	rjmp	.+150    	; 0x427e <lcd_init+0x1854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e8:	8e 01       	movw	r16, r28
    41ea:	0a 56       	subi	r16, 0x6A	; 106
    41ec:	1f 4f       	sbci	r17, 0xFF	; 255
    41ee:	fe 01       	movw	r30, r28
    41f0:	e8 56       	subi	r30, 0x68	; 104
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	60 81       	ld	r22, Z
    41f6:	71 81       	ldd	r23, Z+1	; 0x01
    41f8:	82 81       	ldd	r24, Z+2	; 0x02
    41fa:	93 81       	ldd	r25, Z+3	; 0x03
    41fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	f8 01       	movw	r30, r16
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	80 83       	st	Z, r24
    420a:	de 01       	movw	r26, r28
    420c:	ae 56       	subi	r26, 0x6E	; 110
    420e:	bf 4f       	sbci	r27, 0xFF	; 255
    4210:	fe 01       	movw	r30, r28
    4212:	ea 56       	subi	r30, 0x6A	; 106
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	91 81       	ldd	r25, Z+1	; 0x01
    421a:	11 96       	adiw	r26, 0x01	; 1
    421c:	9c 93       	st	X, r25
    421e:	8e 93       	st	-X, r24
    4220:	fe 01       	movw	r30, r28
    4222:	ee 56       	subi	r30, 0x6E	; 110
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <lcd_init+0x1800>
    422e:	fe 01       	movw	r30, r28
    4230:	ee 56       	subi	r30, 0x6E	; 110
    4232:	ff 4f       	sbci	r31, 0xFF	; 255
    4234:	91 83       	std	Z+1, r25	; 0x01
    4236:	80 83       	st	Z, r24
    4238:	22 c0       	rjmp	.+68     	; 0x427e <lcd_init+0x1854>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    423a:	8e 01       	movw	r16, r28
    423c:	00 56       	subi	r16, 0x60	; 96
    423e:	1f 4f       	sbci	r17, 0xFF	; 255
    4240:	fe 01       	movw	r30, r28
    4242:	ef 55       	subi	r30, 0x5F	; 95
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	60 81       	ld	r22, Z
    4248:	71 81       	ldd	r23, Z+1	; 0x01
    424a:	82 81       	ldd	r24, Z+2	; 0x02
    424c:	93 81       	ldd	r25, Z+3	; 0x03
    424e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	f8 01       	movw	r30, r16
    4258:	80 83       	st	Z, r24
    425a:	de 01       	movw	r26, r28
    425c:	af 56       	subi	r26, 0x6F	; 111
    425e:	bf 4f       	sbci	r27, 0xFF	; 255
    4260:	fe 01       	movw	r30, r28
    4262:	e0 56       	subi	r30, 0x60	; 96
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	80 81       	ld	r24, Z
    4268:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    426a:	fe 01       	movw	r30, r28
    426c:	ef 56       	subi	r30, 0x6F	; 111
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	80 81       	ld	r24, Z
    4272:	8a 95       	dec	r24
    4274:	f1 f7       	brne	.-4      	; 0x4272 <lcd_init+0x1848>
    4276:	fe 01       	movw	r30, r28
    4278:	ef 56       	subi	r30, 0x6F	; 111
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 3 << LCD_DATA_BUS_PORT_OFFSET);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	6c e3       	ldi	r22, 0x3C	; 60
    4282:	4c e0       	ldi	r20, 0x0C	; 12
    4284:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    4288:	fe 01       	movw	r30, r28
    428a:	e3 57       	subi	r30, 0x73	; 115
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	a8 e4       	ldi	r26, 0x48	; 72
    4294:	b2 e4       	ldi	r27, 0x42	; 66
    4296:	80 83       	st	Z, r24
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	a2 83       	std	Z+2, r26	; 0x02
    429c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    429e:	8e 01       	movw	r16, r28
    42a0:	07 57       	subi	r16, 0x77	; 119
    42a2:	1f 4f       	sbci	r17, 0xFF	; 255
    42a4:	fe 01       	movw	r30, r28
    42a6:	e3 57       	subi	r30, 0x73	; 115
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	60 81       	ld	r22, Z
    42ac:	71 81       	ldd	r23, Z+1	; 0x01
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	93 81       	ldd	r25, Z+3	; 0x03
    42b2:	2b ea       	ldi	r18, 0xAB	; 171
    42b4:	3a ea       	ldi	r19, 0xAA	; 170
    42b6:	4a ea       	ldi	r20, 0xAA	; 170
    42b8:	5e e3       	ldi	r21, 0x3E	; 62
    42ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	f8 01       	movw	r30, r16
    42c4:	80 83       	st	Z, r24
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	a2 83       	std	Z+2, r26	; 0x02
    42ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42cc:	fe 01       	movw	r30, r28
    42ce:	e7 57       	subi	r30, 0x77	; 119
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e8       	ldi	r20, 0x80	; 128
    42e0:	5f e3       	ldi	r21, 0x3F	; 63
    42e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e6:	88 23       	and	r24, r24
    42e8:	34 f4       	brge	.+12     	; 0x42f6 <lcd_init+0x18cc>
		__ticks = 1;
    42ea:	fe 01       	movw	r30, r28
    42ec:	e8 57       	subi	r30, 0x78	; 120
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	80 83       	st	Z, r24
    42f4:	e0 c0       	rjmp	.+448    	; 0x44b6 <lcd_init+0x1a8c>
	else if (__tmp > 255)
    42f6:	fe 01       	movw	r30, r28
    42f8:	e7 57       	subi	r30, 0x77	; 119
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	4f e7       	ldi	r20, 0x7F	; 127
    430a:	53 e4       	ldi	r21, 0x43	; 67
    430c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4310:	18 16       	cp	r1, r24
    4312:	0c f0       	brlt	.+2      	; 0x4316 <lcd_init+0x18ec>
    4314:	c0 c0       	rjmp	.+384    	; 0x4496 <lcd_init+0x1a6c>
	{
		_delay_ms(__us / 1000.0);
    4316:	fe 01       	movw	r30, r28
    4318:	e3 57       	subi	r30, 0x73	; 115
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	60 81       	ld	r22, Z
    431e:	71 81       	ldd	r23, Z+1	; 0x01
    4320:	82 81       	ldd	r24, Z+2	; 0x02
    4322:	93 81       	ldd	r25, Z+3	; 0x03
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	4a e7       	ldi	r20, 0x7A	; 122
    432a:	54 e4       	ldi	r21, 0x44	; 68
    432c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	fe 01       	movw	r30, r28
    4336:	ec 57       	subi	r30, 0x7C	; 124
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	80 83       	st	Z, r24
    433c:	91 83       	std	Z+1, r25	; 0x01
    433e:	a2 83       	std	Z+2, r26	; 0x02
    4340:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4342:	8e 01       	movw	r16, r28
    4344:	00 58       	subi	r16, 0x80	; 128
    4346:	1f 4f       	sbci	r17, 0xFF	; 255
    4348:	fe 01       	movw	r30, r28
    434a:	ec 57       	subi	r30, 0x7C	; 124
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	60 81       	ld	r22, Z
    4350:	71 81       	ldd	r23, Z+1	; 0x01
    4352:	82 81       	ldd	r24, Z+2	; 0x02
    4354:	93 81       	ldd	r25, Z+3	; 0x03
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	4a e7       	ldi	r20, 0x7A	; 122
    435c:	53 e4       	ldi	r21, 0x43	; 67
    435e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	f8 01       	movw	r30, r16
    4368:	80 83       	st	Z, r24
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	a2 83       	std	Z+2, r26	; 0x02
    436e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4370:	fe 01       	movw	r30, r28
    4372:	e0 58       	subi	r30, 0x80	; 128
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	60 81       	ld	r22, Z
    4378:	71 81       	ldd	r23, Z+1	; 0x01
    437a:	82 81       	ldd	r24, Z+2	; 0x02
    437c:	93 81       	ldd	r25, Z+3	; 0x03
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e8       	ldi	r20, 0x80	; 128
    4384:	5f e3       	ldi	r21, 0x3F	; 63
    4386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    438a:	88 23       	and	r24, r24
    438c:	44 f4       	brge	.+16     	; 0x439e <lcd_init+0x1974>
		__ticks = 1;
    438e:	fe 01       	movw	r30, r28
    4390:	e2 58       	subi	r30, 0x82	; 130
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	91 83       	std	Z+1, r25	; 0x01
    439a:	80 83       	st	Z, r24
    439c:	64 c0       	rjmp	.+200    	; 0x4466 <lcd_init+0x1a3c>
	else if (__tmp > 65535)
    439e:	fe 01       	movw	r30, r28
    43a0:	e0 58       	subi	r30, 0x80	; 128
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	60 81       	ld	r22, Z
    43a6:	71 81       	ldd	r23, Z+1	; 0x01
    43a8:	82 81       	ldd	r24, Z+2	; 0x02
    43aa:	93 81       	ldd	r25, Z+3	; 0x03
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	3f ef       	ldi	r19, 0xFF	; 255
    43b0:	4f e7       	ldi	r20, 0x7F	; 127
    43b2:	57 e4       	ldi	r21, 0x47	; 71
    43b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43b8:	18 16       	cp	r1, r24
    43ba:	0c f0       	brlt	.+2      	; 0x43be <lcd_init+0x1994>
    43bc:	43 c0       	rjmp	.+134    	; 0x4444 <lcd_init+0x1a1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43be:	fe 01       	movw	r30, r28
    43c0:	ec 57       	subi	r30, 0x7C	; 124
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	60 81       	ld	r22, Z
    43c6:	71 81       	ldd	r23, Z+1	; 0x01
    43c8:	82 81       	ldd	r24, Z+2	; 0x02
    43ca:	93 81       	ldd	r25, Z+3	; 0x03
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	40 e2       	ldi	r20, 0x20	; 32
    43d2:	51 e4       	ldi	r21, 0x41	; 65
    43d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	8e 01       	movw	r16, r28
    43de:	02 58       	subi	r16, 0x82	; 130
    43e0:	1f 4f       	sbci	r17, 0xFF	; 255
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	f8 01       	movw	r30, r16
    43f0:	91 83       	std	Z+1, r25	; 0x01
    43f2:	80 83       	st	Z, r24
    43f4:	1f c0       	rjmp	.+62     	; 0x4434 <lcd_init+0x1a0a>
    43f6:	fe 01       	movw	r30, r28
    43f8:	e4 58       	subi	r30, 0x84	; 132
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	89 e1       	ldi	r24, 0x19	; 25
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4404:	fe 01       	movw	r30, r28
    4406:	e4 58       	subi	r30, 0x84	; 132
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 81       	ld	r24, Z
    440c:	91 81       	ldd	r25, Z+1	; 0x01
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <lcd_init+0x19e4>
    4412:	fe 01       	movw	r30, r28
    4414:	e4 58       	subi	r30, 0x84	; 132
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	91 83       	std	Z+1, r25	; 0x01
    441a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441c:	de 01       	movw	r26, r28
    441e:	a2 58       	subi	r26, 0x82	; 130
    4420:	bf 4f       	sbci	r27, 0xFF	; 255
    4422:	fe 01       	movw	r30, r28
    4424:	e2 58       	subi	r30, 0x82	; 130
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	80 81       	ld	r24, Z
    442a:	91 81       	ldd	r25, Z+1	; 0x01
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	11 96       	adiw	r26, 0x01	; 1
    4430:	9c 93       	st	X, r25
    4432:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4434:	fe 01       	movw	r30, r28
    4436:	e2 58       	subi	r30, 0x82	; 130
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	d1 f6       	brne	.-76     	; 0x43f6 <lcd_init+0x19cc>
    4442:	4b c0       	rjmp	.+150    	; 0x44da <lcd_init+0x1ab0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4444:	8e 01       	movw	r16, r28
    4446:	02 58       	subi	r16, 0x82	; 130
    4448:	1f 4f       	sbci	r17, 0xFF	; 255
    444a:	fe 01       	movw	r30, r28
    444c:	e0 58       	subi	r30, 0x80	; 128
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	60 81       	ld	r22, Z
    4452:	71 81       	ldd	r23, Z+1	; 0x01
    4454:	82 81       	ldd	r24, Z+2	; 0x02
    4456:	93 81       	ldd	r25, Z+3	; 0x03
    4458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	f8 01       	movw	r30, r16
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	80 83       	st	Z, r24
    4466:	de 01       	movw	r26, r28
    4468:	a6 58       	subi	r26, 0x86	; 134
    446a:	bf 4f       	sbci	r27, 0xFF	; 255
    446c:	fe 01       	movw	r30, r28
    446e:	e2 58       	subi	r30, 0x82	; 130
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	80 81       	ld	r24, Z
    4474:	91 81       	ldd	r25, Z+1	; 0x01
    4476:	11 96       	adiw	r26, 0x01	; 1
    4478:	9c 93       	st	X, r25
    447a:	8e 93       	st	-X, r24
    447c:	fe 01       	movw	r30, r28
    447e:	e6 58       	subi	r30, 0x86	; 134
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	80 81       	ld	r24, Z
    4484:	91 81       	ldd	r25, Z+1	; 0x01
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	f1 f7       	brne	.-4      	; 0x4486 <lcd_init+0x1a5c>
    448a:	fe 01       	movw	r30, r28
    448c:	e6 58       	subi	r30, 0x86	; 134
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	91 83       	std	Z+1, r25	; 0x01
    4492:	80 83       	st	Z, r24
    4494:	22 c0       	rjmp	.+68     	; 0x44da <lcd_init+0x1ab0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4496:	8e 01       	movw	r16, r28
    4498:	08 57       	subi	r16, 0x78	; 120
    449a:	1f 4f       	sbci	r17, 0xFF	; 255
    449c:	fe 01       	movw	r30, r28
    449e:	e7 57       	subi	r30, 0x77	; 119
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	82 81       	ldd	r24, Z+2	; 0x02
    44a8:	93 81       	ldd	r25, Z+3	; 0x03
    44aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ae:	dc 01       	movw	r26, r24
    44b0:	cb 01       	movw	r24, r22
    44b2:	f8 01       	movw	r30, r16
    44b4:	80 83       	st	Z, r24
    44b6:	de 01       	movw	r26, r28
    44b8:	a7 58       	subi	r26, 0x87	; 135
    44ba:	bf 4f       	sbci	r27, 0xFF	; 255
    44bc:	fe 01       	movw	r30, r28
    44be:	e8 57       	subi	r30, 0x78	; 120
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	80 81       	ld	r24, Z
    44c4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44c6:	fe 01       	movw	r30, r28
    44c8:	e7 58       	subi	r30, 0x87	; 135
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	80 81       	ld	r24, Z
    44ce:	8a 95       	dec	r24
    44d0:	f1 f7       	brne	.-4      	; 0x44ce <lcd_init+0x1aa4>
    44d2:	fe 01       	movw	r30, r28
    44d4:	e7 58       	subi	r30, 0x87	; 135
    44d6:	ff 4f       	sbci	r31, 0xFF	; 255
    44d8:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	61 e0       	ldi	r22, 0x01	; 1
    44de:	40 e0       	ldi	r20, 0x00	; 0
    44e0:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    44e4:	fe 01       	movw	r30, r28
    44e6:	eb 58       	subi	r30, 0x8B	; 139
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	a8 e4       	ldi	r26, 0x48	; 72
    44f0:	b2 e4       	ldi	r27, 0x42	; 66
    44f2:	80 83       	st	Z, r24
    44f4:	91 83       	std	Z+1, r25	; 0x01
    44f6:	a2 83       	std	Z+2, r26	; 0x02
    44f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44fa:	8e 01       	movw	r16, r28
    44fc:	0f 58       	subi	r16, 0x8F	; 143
    44fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4500:	fe 01       	movw	r30, r28
    4502:	eb 58       	subi	r30, 0x8B	; 139
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	60 81       	ld	r22, Z
    4508:	71 81       	ldd	r23, Z+1	; 0x01
    450a:	82 81       	ldd	r24, Z+2	; 0x02
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	2b ea       	ldi	r18, 0xAB	; 171
    4510:	3a ea       	ldi	r19, 0xAA	; 170
    4512:	4a ea       	ldi	r20, 0xAA	; 170
    4514:	5e e3       	ldi	r21, 0x3E	; 62
    4516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	f8 01       	movw	r30, r16
    4520:	80 83       	st	Z, r24
    4522:	91 83       	std	Z+1, r25	; 0x01
    4524:	a2 83       	std	Z+2, r26	; 0x02
    4526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4528:	fe 01       	movw	r30, r28
    452a:	ef 58       	subi	r30, 0x8F	; 143
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e8       	ldi	r20, 0x80	; 128
    453c:	5f e3       	ldi	r21, 0x3F	; 63
    453e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4542:	88 23       	and	r24, r24
    4544:	34 f4       	brge	.+12     	; 0x4552 <lcd_init+0x1b28>
		__ticks = 1;
    4546:	fe 01       	movw	r30, r28
    4548:	e0 59       	subi	r30, 0x90	; 144
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	80 83       	st	Z, r24
    4550:	e0 c0       	rjmp	.+448    	; 0x4712 <lcd_init+0x1ce8>
	else if (__tmp > 255)
    4552:	fe 01       	movw	r30, r28
    4554:	ef 58       	subi	r30, 0x8F	; 143
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	60 81       	ld	r22, Z
    455a:	71 81       	ldd	r23, Z+1	; 0x01
    455c:	82 81       	ldd	r24, Z+2	; 0x02
    455e:	93 81       	ldd	r25, Z+3	; 0x03
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	4f e7       	ldi	r20, 0x7F	; 127
    4566:	53 e4       	ldi	r21, 0x43	; 67
    4568:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    456c:	18 16       	cp	r1, r24
    456e:	0c f0       	brlt	.+2      	; 0x4572 <lcd_init+0x1b48>
    4570:	c0 c0       	rjmp	.+384    	; 0x46f2 <lcd_init+0x1cc8>
	{
		_delay_ms(__us / 1000.0);
    4572:	fe 01       	movw	r30, r28
    4574:	eb 58       	subi	r30, 0x8B	; 139
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	60 81       	ld	r22, Z
    457a:	71 81       	ldd	r23, Z+1	; 0x01
    457c:	82 81       	ldd	r24, Z+2	; 0x02
    457e:	93 81       	ldd	r25, Z+3	; 0x03
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	4a e7       	ldi	r20, 0x7A	; 122
    4586:	54 e4       	ldi	r21, 0x44	; 68
    4588:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	fe 01       	movw	r30, r28
    4592:	e4 59       	subi	r30, 0x94	; 148
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 83       	st	Z, r24
    4598:	91 83       	std	Z+1, r25	; 0x01
    459a:	a2 83       	std	Z+2, r26	; 0x02
    459c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    459e:	8e 01       	movw	r16, r28
    45a0:	08 59       	subi	r16, 0x98	; 152
    45a2:	1f 4f       	sbci	r17, 0xFF	; 255
    45a4:	fe 01       	movw	r30, r28
    45a6:	e4 59       	subi	r30, 0x94	; 148
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	60 81       	ld	r22, Z
    45ac:	71 81       	ldd	r23, Z+1	; 0x01
    45ae:	82 81       	ldd	r24, Z+2	; 0x02
    45b0:	93 81       	ldd	r25, Z+3	; 0x03
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	4a e7       	ldi	r20, 0x7A	; 122
    45b8:	53 e4       	ldi	r21, 0x43	; 67
    45ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45be:	dc 01       	movw	r26, r24
    45c0:	cb 01       	movw	r24, r22
    45c2:	f8 01       	movw	r30, r16
    45c4:	80 83       	st	Z, r24
    45c6:	91 83       	std	Z+1, r25	; 0x01
    45c8:	a2 83       	std	Z+2, r26	; 0x02
    45ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45cc:	fe 01       	movw	r30, r28
    45ce:	e8 59       	subi	r30, 0x98	; 152
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	60 81       	ld	r22, Z
    45d4:	71 81       	ldd	r23, Z+1	; 0x01
    45d6:	82 81       	ldd	r24, Z+2	; 0x02
    45d8:	93 81       	ldd	r25, Z+3	; 0x03
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e8       	ldi	r20, 0x80	; 128
    45e0:	5f e3       	ldi	r21, 0x3F	; 63
    45e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e6:	88 23       	and	r24, r24
    45e8:	44 f4       	brge	.+16     	; 0x45fa <lcd_init+0x1bd0>
		__ticks = 1;
    45ea:	fe 01       	movw	r30, r28
    45ec:	ea 59       	subi	r30, 0x9A	; 154
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	91 83       	std	Z+1, r25	; 0x01
    45f6:	80 83       	st	Z, r24
    45f8:	64 c0       	rjmp	.+200    	; 0x46c2 <lcd_init+0x1c98>
	else if (__tmp > 65535)
    45fa:	fe 01       	movw	r30, r28
    45fc:	e8 59       	subi	r30, 0x98	; 152
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	3f ef       	ldi	r19, 0xFF	; 255
    460c:	4f e7       	ldi	r20, 0x7F	; 127
    460e:	57 e4       	ldi	r21, 0x47	; 71
    4610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4614:	18 16       	cp	r1, r24
    4616:	0c f0       	brlt	.+2      	; 0x461a <lcd_init+0x1bf0>
    4618:	43 c0       	rjmp	.+134    	; 0x46a0 <lcd_init+0x1c76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461a:	fe 01       	movw	r30, r28
    461c:	e4 59       	subi	r30, 0x94	; 148
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	82 81       	ldd	r24, Z+2	; 0x02
    4626:	93 81       	ldd	r25, Z+3	; 0x03
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e2       	ldi	r20, 0x20	; 32
    462e:	51 e4       	ldi	r21, 0x41	; 65
    4630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	8e 01       	movw	r16, r28
    463a:	0a 59       	subi	r16, 0x9A	; 154
    463c:	1f 4f       	sbci	r17, 0xFF	; 255
    463e:	bc 01       	movw	r22, r24
    4640:	cd 01       	movw	r24, r26
    4642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	f8 01       	movw	r30, r16
    464c:	91 83       	std	Z+1, r25	; 0x01
    464e:	80 83       	st	Z, r24
    4650:	1f c0       	rjmp	.+62     	; 0x4690 <lcd_init+0x1c66>
    4652:	fe 01       	movw	r30, r28
    4654:	ec 59       	subi	r30, 0x9C	; 156
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	89 e1       	ldi	r24, 0x19	; 25
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4660:	fe 01       	movw	r30, r28
    4662:	ec 59       	subi	r30, 0x9C	; 156
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	91 81       	ldd	r25, Z+1	; 0x01
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	f1 f7       	brne	.-4      	; 0x466a <lcd_init+0x1c40>
    466e:	fe 01       	movw	r30, r28
    4670:	ec 59       	subi	r30, 0x9C	; 156
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	91 83       	std	Z+1, r25	; 0x01
    4676:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4678:	de 01       	movw	r26, r28
    467a:	aa 59       	subi	r26, 0x9A	; 154
    467c:	bf 4f       	sbci	r27, 0xFF	; 255
    467e:	fe 01       	movw	r30, r28
    4680:	ea 59       	subi	r30, 0x9A	; 154
    4682:	ff 4f       	sbci	r31, 0xFF	; 255
    4684:	80 81       	ld	r24, Z
    4686:	91 81       	ldd	r25, Z+1	; 0x01
    4688:	01 97       	sbiw	r24, 0x01	; 1
    468a:	11 96       	adiw	r26, 0x01	; 1
    468c:	9c 93       	st	X, r25
    468e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4690:	fe 01       	movw	r30, r28
    4692:	ea 59       	subi	r30, 0x9A	; 154
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	d1 f6       	brne	.-76     	; 0x4652 <lcd_init+0x1c28>
    469e:	4b c0       	rjmp	.+150    	; 0x4736 <lcd_init+0x1d0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a0:	8e 01       	movw	r16, r28
    46a2:	0a 59       	subi	r16, 0x9A	; 154
    46a4:	1f 4f       	sbci	r17, 0xFF	; 255
    46a6:	fe 01       	movw	r30, r28
    46a8:	e8 59       	subi	r30, 0x98	; 152
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	60 81       	ld	r22, Z
    46ae:	71 81       	ldd	r23, Z+1	; 0x01
    46b0:	82 81       	ldd	r24, Z+2	; 0x02
    46b2:	93 81       	ldd	r25, Z+3	; 0x03
    46b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	f8 01       	movw	r30, r16
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
    46c2:	de 01       	movw	r26, r28
    46c4:	ae 59       	subi	r26, 0x9E	; 158
    46c6:	bf 4f       	sbci	r27, 0xFF	; 255
    46c8:	fe 01       	movw	r30, r28
    46ca:	ea 59       	subi	r30, 0x9A	; 154
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	80 81       	ld	r24, Z
    46d0:	91 81       	ldd	r25, Z+1	; 0x01
    46d2:	11 96       	adiw	r26, 0x01	; 1
    46d4:	9c 93       	st	X, r25
    46d6:	8e 93       	st	-X, r24
    46d8:	fe 01       	movw	r30, r28
    46da:	ee 59       	subi	r30, 0x9E	; 158
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	80 81       	ld	r24, Z
    46e0:	91 81       	ldd	r25, Z+1	; 0x01
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	f1 f7       	brne	.-4      	; 0x46e2 <lcd_init+0x1cb8>
    46e6:	fe 01       	movw	r30, r28
    46e8:	ee 59       	subi	r30, 0x9E	; 158
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
    46f0:	22 c0       	rjmp	.+68     	; 0x4736 <lcd_init+0x1d0c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46f2:	8e 01       	movw	r16, r28
    46f4:	00 59       	subi	r16, 0x90	; 144
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	fe 01       	movw	r30, r28
    46fa:	ef 58       	subi	r30, 0x8F	; 143
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	60 81       	ld	r22, Z
    4700:	71 81       	ldd	r23, Z+1	; 0x01
    4702:	82 81       	ldd	r24, Z+2	; 0x02
    4704:	93 81       	ldd	r25, Z+3	; 0x03
    4706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	f8 01       	movw	r30, r16
    4710:	80 83       	st	Z, r24
    4712:	de 01       	movw	r26, r28
    4714:	af 59       	subi	r26, 0x9F	; 159
    4716:	bf 4f       	sbci	r27, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	e0 59       	subi	r30, 0x90	; 144
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	80 81       	ld	r24, Z
    4720:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4722:	fe 01       	movw	r30, r28
    4724:	ef 59       	subi	r30, 0x9F	; 159
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	80 81       	ld	r24, Z
    472a:	8a 95       	dec	r24
    472c:	f1 f7       	brne	.-4      	; 0x472a <lcd_init+0x1d00>
    472e:	fe 01       	movw	r30, r28
    4730:	ef 59       	subi	r30, 0x9F	; 159
    4732:	ff 4f       	sbci	r31, 0xFF	; 255
    4734:	80 83       	st	Z, r24

	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	61 e0       	ldi	r22, 0x01	; 1
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    4740:	fe 01       	movw	r30, r28
    4742:	e3 5a       	subi	r30, 0xA3	; 163
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	a8 e4       	ldi	r26, 0x48	; 72
    474c:	b2 e4       	ldi	r27, 0x42	; 66
    474e:	80 83       	st	Z, r24
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	a2 83       	std	Z+2, r26	; 0x02
    4754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4756:	8e 01       	movw	r16, r28
    4758:	07 5a       	subi	r16, 0xA7	; 167
    475a:	1f 4f       	sbci	r17, 0xFF	; 255
    475c:	fe 01       	movw	r30, r28
    475e:	e3 5a       	subi	r30, 0xA3	; 163
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	82 81       	ldd	r24, Z+2	; 0x02
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	2b ea       	ldi	r18, 0xAB	; 171
    476c:	3a ea       	ldi	r19, 0xAA	; 170
    476e:	4a ea       	ldi	r20, 0xAA	; 170
    4770:	5e e3       	ldi	r21, 0x3E	; 62
    4772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	a2 83       	std	Z+2, r26	; 0x02
    4782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4784:	fe 01       	movw	r30, r28
    4786:	e7 5a       	subi	r30, 0xA7	; 167
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	60 81       	ld	r22, Z
    478c:	71 81       	ldd	r23, Z+1	; 0x01
    478e:	82 81       	ldd	r24, Z+2	; 0x02
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	40 e8       	ldi	r20, 0x80	; 128
    4798:	5f e3       	ldi	r21, 0x3F	; 63
    479a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    479e:	88 23       	and	r24, r24
    47a0:	34 f4       	brge	.+12     	; 0x47ae <lcd_init+0x1d84>
		__ticks = 1;
    47a2:	fe 01       	movw	r30, r28
    47a4:	e8 5a       	subi	r30, 0xA8	; 168
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	80 83       	st	Z, r24
    47ac:	e0 c0       	rjmp	.+448    	; 0x496e <lcd_init+0x1f44>
	else if (__tmp > 255)
    47ae:	fe 01       	movw	r30, r28
    47b0:	e7 5a       	subi	r30, 0xA7	; 167
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	4f e7       	ldi	r20, 0x7F	; 127
    47c2:	53 e4       	ldi	r21, 0x43	; 67
    47c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47c8:	18 16       	cp	r1, r24
    47ca:	0c f0       	brlt	.+2      	; 0x47ce <lcd_init+0x1da4>
    47cc:	c0 c0       	rjmp	.+384    	; 0x494e <lcd_init+0x1f24>
	{
		_delay_ms(__us / 1000.0);
    47ce:	fe 01       	movw	r30, r28
    47d0:	e3 5a       	subi	r30, 0xA3	; 163
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	60 81       	ld	r22, Z
    47d6:	71 81       	ldd	r23, Z+1	; 0x01
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	93 81       	ldd	r25, Z+3	; 0x03
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	4a e7       	ldi	r20, 0x7A	; 122
    47e2:	54 e4       	ldi	r21, 0x44	; 68
    47e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	fe 01       	movw	r30, r28
    47ee:	ec 5a       	subi	r30, 0xAC	; 172
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 83       	st	Z, r24
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	a2 83       	std	Z+2, r26	; 0x02
    47f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fa:	8e 01       	movw	r16, r28
    47fc:	00 5b       	subi	r16, 0xB0	; 176
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	fe 01       	movw	r30, r28
    4802:	ec 5a       	subi	r30, 0xAC	; 172
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	4a e7       	ldi	r20, 0x7A	; 122
    4814:	53 e4       	ldi	r21, 0x43	; 67
    4816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	f8 01       	movw	r30, r16
    4820:	80 83       	st	Z, r24
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	a2 83       	std	Z+2, r26	; 0x02
    4826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4828:	fe 01       	movw	r30, r28
    482a:	e0 5b       	subi	r30, 0xB0	; 176
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	60 81       	ld	r22, Z
    4830:	71 81       	ldd	r23, Z+1	; 0x01
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e8       	ldi	r20, 0x80	; 128
    483c:	5f e3       	ldi	r21, 0x3F	; 63
    483e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4842:	88 23       	and	r24, r24
    4844:	44 f4       	brge	.+16     	; 0x4856 <lcd_init+0x1e2c>
		__ticks = 1;
    4846:	fe 01       	movw	r30, r28
    4848:	e2 5b       	subi	r30, 0xB2	; 178
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	91 83       	std	Z+1, r25	; 0x01
    4852:	80 83       	st	Z, r24
    4854:	64 c0       	rjmp	.+200    	; 0x491e <lcd_init+0x1ef4>
	else if (__tmp > 65535)
    4856:	fe 01       	movw	r30, r28
    4858:	e0 5b       	subi	r30, 0xB0	; 176
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	60 81       	ld	r22, Z
    485e:	71 81       	ldd	r23, Z+1	; 0x01
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	4f e7       	ldi	r20, 0x7F	; 127
    486a:	57 e4       	ldi	r21, 0x47	; 71
    486c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4870:	18 16       	cp	r1, r24
    4872:	0c f0       	brlt	.+2      	; 0x4876 <lcd_init+0x1e4c>
    4874:	43 c0       	rjmp	.+134    	; 0x48fc <lcd_init+0x1ed2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4876:	fe 01       	movw	r30, r28
    4878:	ec 5a       	subi	r30, 0xAC	; 172
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	60 81       	ld	r22, Z
    487e:	71 81       	ldd	r23, Z+1	; 0x01
    4880:	82 81       	ldd	r24, Z+2	; 0x02
    4882:	93 81       	ldd	r25, Z+3	; 0x03
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e2       	ldi	r20, 0x20	; 32
    488a:	51 e4       	ldi	r21, 0x41	; 65
    488c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	8e 01       	movw	r16, r28
    4896:	02 5b       	subi	r16, 0xB2	; 178
    4898:	1f 4f       	sbci	r17, 0xFF	; 255
    489a:	bc 01       	movw	r22, r24
    489c:	cd 01       	movw	r24, r26
    489e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a2:	dc 01       	movw	r26, r24
    48a4:	cb 01       	movw	r24, r22
    48a6:	f8 01       	movw	r30, r16
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
    48ac:	1f c0       	rjmp	.+62     	; 0x48ec <lcd_init+0x1ec2>
    48ae:	fe 01       	movw	r30, r28
    48b0:	e4 5b       	subi	r30, 0xB4	; 180
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	89 e1       	ldi	r24, 0x19	; 25
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48bc:	fe 01       	movw	r30, r28
    48be:	e4 5b       	subi	r30, 0xB4	; 180
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <lcd_init+0x1e9c>
    48ca:	fe 01       	movw	r30, r28
    48cc:	e4 5b       	subi	r30, 0xB4	; 180
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d4:	de 01       	movw	r26, r28
    48d6:	a2 5b       	subi	r26, 0xB2	; 178
    48d8:	bf 4f       	sbci	r27, 0xFF	; 255
    48da:	fe 01       	movw	r30, r28
    48dc:	e2 5b       	subi	r30, 0xB2	; 178
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	11 96       	adiw	r26, 0x01	; 1
    48e8:	9c 93       	st	X, r25
    48ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	fe 01       	movw	r30, r28
    48ee:	e2 5b       	subi	r30, 0xB2	; 178
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 81       	ld	r24, Z
    48f4:	91 81       	ldd	r25, Z+1	; 0x01
    48f6:	00 97       	sbiw	r24, 0x00	; 0
    48f8:	d1 f6       	brne	.-76     	; 0x48ae <lcd_init+0x1e84>
    48fa:	4b c0       	rjmp	.+150    	; 0x4992 <lcd_init+0x1f68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48fc:	8e 01       	movw	r16, r28
    48fe:	02 5b       	subi	r16, 0xB2	; 178
    4900:	1f 4f       	sbci	r17, 0xFF	; 255
    4902:	fe 01       	movw	r30, r28
    4904:	e0 5b       	subi	r30, 0xB0	; 176
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	60 81       	ld	r22, Z
    490a:	71 81       	ldd	r23, Z+1	; 0x01
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	91 83       	std	Z+1, r25	; 0x01
    491c:	80 83       	st	Z, r24
    491e:	de 01       	movw	r26, r28
    4920:	a6 5b       	subi	r26, 0xB6	; 182
    4922:	bf 4f       	sbci	r27, 0xFF	; 255
    4924:	fe 01       	movw	r30, r28
    4926:	e2 5b       	subi	r30, 0xB2	; 178
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	80 81       	ld	r24, Z
    492c:	91 81       	ldd	r25, Z+1	; 0x01
    492e:	11 96       	adiw	r26, 0x01	; 1
    4930:	9c 93       	st	X, r25
    4932:	8e 93       	st	-X, r24
    4934:	fe 01       	movw	r30, r28
    4936:	e6 5b       	subi	r30, 0xB6	; 182
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	80 81       	ld	r24, Z
    493c:	91 81       	ldd	r25, Z+1	; 0x01
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	f1 f7       	brne	.-4      	; 0x493e <lcd_init+0x1f14>
    4942:	fe 01       	movw	r30, r28
    4944:	e6 5b       	subi	r30, 0xB6	; 182
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	80 83       	st	Z, r24
    494c:	22 c0       	rjmp	.+68     	; 0x4992 <lcd_init+0x1f68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    494e:	8e 01       	movw	r16, r28
    4950:	08 5a       	subi	r16, 0xA8	; 168
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e7 5a       	subi	r30, 0xA7	; 167
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	80 83       	st	Z, r24
    496e:	de 01       	movw	r26, r28
    4970:	a7 5b       	subi	r26, 0xB7	; 183
    4972:	bf 4f       	sbci	r27, 0xFF	; 255
    4974:	fe 01       	movw	r30, r28
    4976:	e8 5a       	subi	r30, 0xA8	; 168
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	80 81       	ld	r24, Z
    497c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    497e:	fe 01       	movw	r30, r28
    4980:	e7 5b       	subi	r30, 0xB7	; 183
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	8a 95       	dec	r24
    4988:	f1 f7       	brne	.-4      	; 0x4986 <lcd_init+0x1f5c>
    498a:	fe 01       	movw	r30, r28
    498c:	e7 5b       	subi	r30, 0xB7	; 183
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	61 e0       	ldi	r22, 0x01	; 1
    4996:	41 e0       	ldi	r20, 0x01	; 1
    4998:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    499c:	fe 01       	movw	r30, r28
    499e:	eb 5b       	subi	r30, 0xBB	; 187
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	a8 e4       	ldi	r26, 0x48	; 72
    49a8:	b2 e4       	ldi	r27, 0x42	; 66
    49aa:	80 83       	st	Z, r24
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	a2 83       	std	Z+2, r26	; 0x02
    49b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49b2:	8e 01       	movw	r16, r28
    49b4:	0f 5b       	subi	r16, 0xBF	; 191
    49b6:	1f 4f       	sbci	r17, 0xFF	; 255
    49b8:	fe 01       	movw	r30, r28
    49ba:	eb 5b       	subi	r30, 0xBB	; 187
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	2b ea       	ldi	r18, 0xAB	; 171
    49c8:	3a ea       	ldi	r19, 0xAA	; 170
    49ca:	4a ea       	ldi	r20, 0xAA	; 170
    49cc:	5e e3       	ldi	r21, 0x3E	; 62
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	80 83       	st	Z, r24
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	a2 83       	std	Z+2, r26	; 0x02
    49de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49e0:	fe 01       	movw	r30, r28
    49e2:	ef 5b       	subi	r30, 0xBF	; 191
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e8       	ldi	r20, 0x80	; 128
    49f4:	5f e3       	ldi	r21, 0x3F	; 63
    49f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49fa:	88 23       	and	r24, r24
    49fc:	34 f4       	brge	.+12     	; 0x4a0a <lcd_init+0x1fe0>
		__ticks = 1;
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	fe 01       	movw	r30, r28
    4a02:	e0 5c       	subi	r30, 0xC0	; 192
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	80 83       	st	Z, r24
    4a08:	9d c0       	rjmp	.+314    	; 0x4b44 <lcd_init+0x211a>
	else if (__tmp > 255)
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ef 5b       	subi	r30, 0xBF	; 191
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	20 e0       	ldi	r18, 0x00	; 0
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	4f e7       	ldi	r20, 0x7F	; 127
    4a1e:	53 e4       	ldi	r21, 0x43	; 67
    4a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a24:	18 16       	cp	r1, r24
    4a26:	0c f0       	brlt	.+2      	; 0x4a2a <lcd_init+0x2000>
    4a28:	7e c0       	rjmp	.+252    	; 0x4b26 <lcd_init+0x20fc>
	{
		_delay_ms(__us / 1000.0);
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	eb 5b       	subi	r30, 0xBB	; 187
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	60 81       	ld	r22, Z
    4a32:	71 81       	ldd	r23, Z+1	; 0x01
    4a34:	82 81       	ldd	r24, Z+2	; 0x02
    4a36:	93 81       	ldd	r25, Z+3	; 0x03
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	4a e7       	ldi	r20, 0x7A	; 122
    4a3e:	54 e4       	ldi	r21, 0x44	; 68
    4a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a44:	dc 01       	movw	r26, r24
    4a46:	cb 01       	movw	r24, r22
    4a48:	8c af       	std	Y+60, r24	; 0x3c
    4a4a:	9d af       	std	Y+61, r25	; 0x3d
    4a4c:	ae af       	std	Y+62, r26	; 0x3e
    4a4e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a50:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a52:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a54:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a56:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	4a e7       	ldi	r20, 0x7A	; 122
    4a5e:	53 e4       	ldi	r21, 0x43	; 67
    4a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	88 af       	std	Y+56, r24	; 0x38
    4a6a:	99 af       	std	Y+57, r25	; 0x39
    4a6c:	aa af       	std	Y+58, r26	; 0x3a
    4a6e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4a70:	68 ad       	ldd	r22, Y+56	; 0x38
    4a72:	79 ad       	ldd	r23, Y+57	; 0x39
    4a74:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a76:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	40 e8       	ldi	r20, 0x80	; 128
    4a7e:	5f e3       	ldi	r21, 0x3F	; 63
    4a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a84:	88 23       	and	r24, r24
    4a86:	2c f4       	brge	.+10     	; 0x4a92 <lcd_init+0x2068>
		__ticks = 1;
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	9f ab       	std	Y+55, r25	; 0x37
    4a8e:	8e ab       	std	Y+54, r24	; 0x36
    4a90:	3f c0       	rjmp	.+126    	; 0x4b10 <lcd_init+0x20e6>
	else if (__tmp > 65535)
    4a92:	68 ad       	ldd	r22, Y+56	; 0x38
    4a94:	79 ad       	ldd	r23, Y+57	; 0x39
    4a96:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a98:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	3f ef       	ldi	r19, 0xFF	; 255
    4a9e:	4f e7       	ldi	r20, 0x7F	; 127
    4aa0:	57 e4       	ldi	r21, 0x47	; 71
    4aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa6:	18 16       	cp	r1, r24
    4aa8:	4c f5       	brge	.+82     	; 0x4afc <lcd_init+0x20d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aaa:	6c ad       	ldd	r22, Y+60	; 0x3c
    4aac:	7d ad       	ldd	r23, Y+61	; 0x3d
    4aae:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ab0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	40 e2       	ldi	r20, 0x20	; 32
    4ab8:	51 e4       	ldi	r21, 0x41	; 65
    4aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	9f ab       	std	Y+55, r25	; 0x37
    4ad0:	8e ab       	std	Y+54, r24	; 0x36
    4ad2:	0f c0       	rjmp	.+30     	; 0x4af2 <lcd_init+0x20c8>
    4ad4:	89 e1       	ldi	r24, 0x19	; 25
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	9d ab       	std	Y+53, r25	; 0x35
    4ada:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4adc:	8c a9       	ldd	r24, Y+52	; 0x34
    4ade:	9d a9       	ldd	r25, Y+53	; 0x35
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <lcd_init+0x20b6>
    4ae4:	9d ab       	std	Y+53, r25	; 0x35
    4ae6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae8:	8e a9       	ldd	r24, Y+54	; 0x36
    4aea:	9f a9       	ldd	r25, Y+55	; 0x37
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	9f ab       	std	Y+55, r25	; 0x37
    4af0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af2:	8e a9       	ldd	r24, Y+54	; 0x36
    4af4:	9f a9       	ldd	r25, Y+55	; 0x37
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	69 f7       	brne	.-38     	; 0x4ad4 <lcd_init+0x20aa>
    4afa:	2d c0       	rjmp	.+90     	; 0x4b56 <lcd_init+0x212c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afc:	68 ad       	ldd	r22, Y+56	; 0x38
    4afe:	79 ad       	ldd	r23, Y+57	; 0x39
    4b00:	8a ad       	ldd	r24, Y+58	; 0x3a
    4b02:	9b ad       	ldd	r25, Y+59	; 0x3b
    4b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	9f ab       	std	Y+55, r25	; 0x37
    4b0e:	8e ab       	std	Y+54, r24	; 0x36
    4b10:	8e a9       	ldd	r24, Y+54	; 0x36
    4b12:	9f a9       	ldd	r25, Y+55	; 0x37
    4b14:	9b ab       	std	Y+51, r25	; 0x33
    4b16:	8a ab       	std	Y+50, r24	; 0x32
    4b18:	8a a9       	ldd	r24, Y+50	; 0x32
    4b1a:	9b a9       	ldd	r25, Y+51	; 0x33
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	f1 f7       	brne	.-4      	; 0x4b1c <lcd_init+0x20f2>
    4b20:	9b ab       	std	Y+51, r25	; 0x33
    4b22:	8a ab       	std	Y+50, r24	; 0x32
    4b24:	18 c0       	rjmp	.+48     	; 0x4b56 <lcd_init+0x212c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b26:	fe 01       	movw	r30, r28
    4b28:	ef 5b       	subi	r30, 0xBF	; 191
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	60 81       	ld	r22, Z
    4b2e:	71 81       	ldd	r23, Z+1	; 0x01
    4b30:	82 81       	ldd	r24, Z+2	; 0x02
    4b32:	93 81       	ldd	r25, Z+3	; 0x03
    4b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e0 5c       	subi	r30, 0xC0	; 192
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 83       	st	Z, r24
    4b44:	fe 01       	movw	r30, r28
    4b46:	e0 5c       	subi	r30, 0xC0	; 192
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	80 81       	ld	r24, Z
    4b4c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b4e:	89 a9       	ldd	r24, Y+49	; 0x31
    4b50:	8a 95       	dec	r24
    4b52:	f1 f7       	brne	.-4      	; 0x4b50 <lcd_init+0x2126>
    4b54:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, 2 << LCD_DATA_BUS_PORT_OFFSET);
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	6c e3       	ldi	r22, 0x3C	; 60
    4b5a:	48 e0       	ldi	r20, 0x08	; 8
    4b5c:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	a8 e4       	ldi	r26, 0x48	; 72
    4b66:	b2 e4       	ldi	r27, 0x42	; 66
    4b68:	8d a7       	std	Y+45, r24	; 0x2d
    4b6a:	9e a7       	std	Y+46, r25	; 0x2e
    4b6c:	af a7       	std	Y+47, r26	; 0x2f
    4b6e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b70:	6d a5       	ldd	r22, Y+45	; 0x2d
    4b72:	7e a5       	ldd	r23, Y+46	; 0x2e
    4b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b76:	98 a9       	ldd	r25, Y+48	; 0x30
    4b78:	2b ea       	ldi	r18, 0xAB	; 171
    4b7a:	3a ea       	ldi	r19, 0xAA	; 170
    4b7c:	4a ea       	ldi	r20, 0xAA	; 170
    4b7e:	5e e3       	ldi	r21, 0x3E	; 62
    4b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b84:	dc 01       	movw	r26, r24
    4b86:	cb 01       	movw	r24, r22
    4b88:	89 a7       	std	Y+41, r24	; 0x29
    4b8a:	9a a7       	std	Y+42, r25	; 0x2a
    4b8c:	ab a7       	std	Y+43, r26	; 0x2b
    4b8e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4b90:	69 a5       	ldd	r22, Y+41	; 0x29
    4b92:	7a a5       	ldd	r23, Y+42	; 0x2a
    4b94:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b96:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e8       	ldi	r20, 0x80	; 128
    4b9e:	5f e3       	ldi	r21, 0x3F	; 63
    4ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ba4:	88 23       	and	r24, r24
    4ba6:	1c f4       	brge	.+6      	; 0x4bae <lcd_init+0x2184>
		__ticks = 1;
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	88 a7       	std	Y+40, r24	; 0x28
    4bac:	91 c0       	rjmp	.+290    	; 0x4cd0 <lcd_init+0x22a6>
	else if (__tmp > 255)
    4bae:	69 a5       	ldd	r22, Y+41	; 0x29
    4bb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    4bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	4f e7       	ldi	r20, 0x7F	; 127
    4bbc:	53 e4       	ldi	r21, 0x43	; 67
    4bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bc2:	18 16       	cp	r1, r24
    4bc4:	0c f0       	brlt	.+2      	; 0x4bc8 <lcd_init+0x219e>
    4bc6:	7b c0       	rjmp	.+246    	; 0x4cbe <lcd_init+0x2294>
	{
		_delay_ms(__us / 1000.0);
    4bc8:	6d a5       	ldd	r22, Y+45	; 0x2d
    4bca:	7e a5       	ldd	r23, Y+46	; 0x2e
    4bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bce:	98 a9       	ldd	r25, Y+48	; 0x30
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	4a e7       	ldi	r20, 0x7A	; 122
    4bd6:	54 e4       	ldi	r21, 0x44	; 68
    4bd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	8c a3       	std	Y+36, r24	; 0x24
    4be2:	9d a3       	std	Y+37, r25	; 0x25
    4be4:	ae a3       	std	Y+38, r26	; 0x26
    4be6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be8:	6c a1       	ldd	r22, Y+36	; 0x24
    4bea:	7d a1       	ldd	r23, Y+37	; 0x25
    4bec:	8e a1       	ldd	r24, Y+38	; 0x26
    4bee:	9f a1       	ldd	r25, Y+39	; 0x27
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	4a e7       	ldi	r20, 0x7A	; 122
    4bf6:	53 e4       	ldi	r21, 0x43	; 67
    4bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	88 a3       	std	Y+32, r24	; 0x20
    4c02:	99 a3       	std	Y+33, r25	; 0x21
    4c04:	aa a3       	std	Y+34, r26	; 0x22
    4c06:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4c08:	68 a1       	ldd	r22, Y+32	; 0x20
    4c0a:	79 a1       	ldd	r23, Y+33	; 0x21
    4c0c:	8a a1       	ldd	r24, Y+34	; 0x22
    4c0e:	9b a1       	ldd	r25, Y+35	; 0x23
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e8       	ldi	r20, 0x80	; 128
    4c16:	5f e3       	ldi	r21, 0x3F	; 63
    4c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c1c:	88 23       	and	r24, r24
    4c1e:	2c f4       	brge	.+10     	; 0x4c2a <lcd_init+0x2200>
		__ticks = 1;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	9f 8f       	std	Y+31, r25	; 0x1f
    4c26:	8e 8f       	std	Y+30, r24	; 0x1e
    4c28:	3f c0       	rjmp	.+126    	; 0x4ca8 <lcd_init+0x227e>
	else if (__tmp > 65535)
    4c2a:	68 a1       	ldd	r22, Y+32	; 0x20
    4c2c:	79 a1       	ldd	r23, Y+33	; 0x21
    4c2e:	8a a1       	ldd	r24, Y+34	; 0x22
    4c30:	9b a1       	ldd	r25, Y+35	; 0x23
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	3f ef       	ldi	r19, 0xFF	; 255
    4c36:	4f e7       	ldi	r20, 0x7F	; 127
    4c38:	57 e4       	ldi	r21, 0x47	; 71
    4c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c3e:	18 16       	cp	r1, r24
    4c40:	4c f5       	brge	.+82     	; 0x4c94 <lcd_init+0x226a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c42:	6c a1       	ldd	r22, Y+36	; 0x24
    4c44:	7d a1       	ldd	r23, Y+37	; 0x25
    4c46:	8e a1       	ldd	r24, Y+38	; 0x26
    4c48:	9f a1       	ldd	r25, Y+39	; 0x27
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e2       	ldi	r20, 0x20	; 32
    4c50:	51 e4       	ldi	r21, 0x41	; 65
    4c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	9f 8f       	std	Y+31, r25	; 0x1f
    4c68:	8e 8f       	std	Y+30, r24	; 0x1e
    4c6a:	0f c0       	rjmp	.+30     	; 0x4c8a <lcd_init+0x2260>
    4c6c:	89 e1       	ldi	r24, 0x19	; 25
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	9d 8f       	std	Y+29, r25	; 0x1d
    4c72:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4c76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	f1 f7       	brne	.-4      	; 0x4c78 <lcd_init+0x224e>
    4c7c:	9d 8f       	std	Y+29, r25	; 0x1d
    4c7e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	9f 8f       	std	Y+31, r25	; 0x1f
    4c88:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	69 f7       	brne	.-38     	; 0x4c6c <lcd_init+0x2242>
    4c92:	24 c0       	rjmp	.+72     	; 0x4cdc <lcd_init+0x22b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c94:	68 a1       	ldd	r22, Y+32	; 0x20
    4c96:	79 a1       	ldd	r23, Y+33	; 0x21
    4c98:	8a a1       	ldd	r24, Y+34	; 0x22
    4c9a:	9b a1       	ldd	r25, Y+35	; 0x23
    4c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	9f 8f       	std	Y+31, r25	; 0x1f
    4ca6:	8e 8f       	std	Y+30, r24	; 0x1e
    4ca8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4caa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4cac:	9b 8f       	std	Y+27, r25	; 0x1b
    4cae:	8a 8f       	std	Y+26, r24	; 0x1a
    4cb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4cb2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <lcd_init+0x228a>
    4cb8:	9b 8f       	std	Y+27, r25	; 0x1b
    4cba:	8a 8f       	std	Y+26, r24	; 0x1a
    4cbc:	0f c0       	rjmp	.+30     	; 0x4cdc <lcd_init+0x22b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4cbe:	69 a5       	ldd	r22, Y+41	; 0x29
    4cc0:	7a a5       	ldd	r23, Y+42	; 0x2a
    4cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	88 a7       	std	Y+40, r24	; 0x28
    4cd0:	88 a5       	ldd	r24, Y+40	; 0x28
    4cd2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cd4:	89 8d       	ldd	r24, Y+25	; 0x19
    4cd6:	8a 95       	dec	r24
    4cd8:	f1 f7       	brne	.-4      	; 0x4cd6 <lcd_init+0x22ac>
    4cda:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	61 e0       	ldi	r22, 0x01	; 1
    4ce0:	40 e0       	ldi	r20, 0x00	; 0
    4ce2:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	a6 e1       	ldi	r26, 0x16	; 22
    4cec:	b4 e4       	ldi	r27, 0x44	; 68
    4cee:	8d 8b       	std	Y+21, r24	; 0x15
    4cf0:	9e 8b       	std	Y+22, r25	; 0x16
    4cf2:	af 8b       	std	Y+23, r26	; 0x17
    4cf4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    4cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    4cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    4cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    4cfe:	2b ea       	ldi	r18, 0xAB	; 171
    4d00:	3a ea       	ldi	r19, 0xAA	; 170
    4d02:	4a ea       	ldi	r20, 0xAA	; 170
    4d04:	5e e3       	ldi	r21, 0x3E	; 62
    4d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	89 8b       	std	Y+17, r24	; 0x11
    4d10:	9a 8b       	std	Y+18, r25	; 0x12
    4d12:	ab 8b       	std	Y+19, r26	; 0x13
    4d14:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4d16:	69 89       	ldd	r22, Y+17	; 0x11
    4d18:	7a 89       	ldd	r23, Y+18	; 0x12
    4d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	40 e8       	ldi	r20, 0x80	; 128
    4d24:	5f e3       	ldi	r21, 0x3F	; 63
    4d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d2a:	88 23       	and	r24, r24
    4d2c:	1c f4       	brge	.+6      	; 0x4d34 <lcd_init+0x230a>
		__ticks = 1;
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	88 8b       	std	Y+16, r24	; 0x10
    4d32:	91 c0       	rjmp	.+290    	; 0x4e56 <lcd_init+0x242c>
	else if (__tmp > 255)
    4d34:	69 89       	ldd	r22, Y+17	; 0x11
    4d36:	7a 89       	ldd	r23, Y+18	; 0x12
    4d38:	8b 89       	ldd	r24, Y+19	; 0x13
    4d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	4f e7       	ldi	r20, 0x7F	; 127
    4d42:	53 e4       	ldi	r21, 0x43	; 67
    4d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d48:	18 16       	cp	r1, r24
    4d4a:	0c f0       	brlt	.+2      	; 0x4d4e <lcd_init+0x2324>
    4d4c:	7b c0       	rjmp	.+246    	; 0x4e44 <lcd_init+0x241a>
	{
		_delay_ms(__us / 1000.0);
    4d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d50:	7e 89       	ldd	r23, Y+22	; 0x16
    4d52:	8f 89       	ldd	r24, Y+23	; 0x17
    4d54:	98 8d       	ldd	r25, Y+24	; 0x18
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	4a e7       	ldi	r20, 0x7A	; 122
    4d5c:	54 e4       	ldi	r21, 0x44	; 68
    4d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	8c 87       	std	Y+12, r24	; 0x0c
    4d68:	9d 87       	std	Y+13, r25	; 0x0d
    4d6a:	ae 87       	std	Y+14, r26	; 0x0e
    4d6c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d70:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d74:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	4a e7       	ldi	r20, 0x7A	; 122
    4d7c:	53 e4       	ldi	r21, 0x43	; 67
    4d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	88 87       	std	Y+8, r24	; 0x08
    4d88:	99 87       	std	Y+9, r25	; 0x09
    4d8a:	aa 87       	std	Y+10, r26	; 0x0a
    4d8c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d8e:	68 85       	ldd	r22, Y+8	; 0x08
    4d90:	79 85       	ldd	r23, Y+9	; 0x09
    4d92:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d94:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e8       	ldi	r20, 0x80	; 128
    4d9c:	5f e3       	ldi	r21, 0x3F	; 63
    4d9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4da2:	88 23       	and	r24, r24
    4da4:	2c f4       	brge	.+10     	; 0x4db0 <lcd_init+0x2386>
		__ticks = 1;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	9f 83       	std	Y+7, r25	; 0x07
    4dac:	8e 83       	std	Y+6, r24	; 0x06
    4dae:	3f c0       	rjmp	.+126    	; 0x4e2e <lcd_init+0x2404>
	else if (__tmp > 65535)
    4db0:	68 85       	ldd	r22, Y+8	; 0x08
    4db2:	79 85       	ldd	r23, Y+9	; 0x09
    4db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	3f ef       	ldi	r19, 0xFF	; 255
    4dbc:	4f e7       	ldi	r20, 0x7F	; 127
    4dbe:	57 e4       	ldi	r21, 0x47	; 71
    4dc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dc4:	18 16       	cp	r1, r24
    4dc6:	4c f5       	brge	.+82     	; 0x4e1a <lcd_init+0x23f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4dca:	7d 85       	ldd	r23, Y+13	; 0x0d
    4dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dce:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	40 e2       	ldi	r20, 0x20	; 32
    4dd6:	51 e4       	ldi	r21, 0x41	; 65
    4dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	bc 01       	movw	r22, r24
    4de2:	cd 01       	movw	r24, r26
    4de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	9f 83       	std	Y+7, r25	; 0x07
    4dee:	8e 83       	std	Y+6, r24	; 0x06
    4df0:	0f c0       	rjmp	.+30     	; 0x4e10 <lcd_init+0x23e6>
    4df2:	89 e1       	ldi	r24, 0x19	; 25
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	9d 83       	std	Y+5, r25	; 0x05
    4df8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <lcd_init+0x23d4>
    4e02:	9d 83       	std	Y+5, r25	; 0x05
    4e04:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e06:	8e 81       	ldd	r24, Y+6	; 0x06
    4e08:	9f 81       	ldd	r25, Y+7	; 0x07
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	9f 83       	std	Y+7, r25	; 0x07
    4e0e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e10:	8e 81       	ldd	r24, Y+6	; 0x06
    4e12:	9f 81       	ldd	r25, Y+7	; 0x07
    4e14:	00 97       	sbiw	r24, 0x00	; 0
    4e16:	69 f7       	brne	.-38     	; 0x4df2 <lcd_init+0x23c8>
    4e18:	24 c0       	rjmp	.+72     	; 0x4e62 <lcd_init+0x2438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e1a:	68 85       	ldd	r22, Y+8	; 0x08
    4e1c:	79 85       	ldd	r23, Y+9	; 0x09
    4e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e20:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e26:	dc 01       	movw	r26, r24
    4e28:	cb 01       	movw	r24, r22
    4e2a:	9f 83       	std	Y+7, r25	; 0x07
    4e2c:	8e 83       	std	Y+6, r24	; 0x06
    4e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e30:	9f 81       	ldd	r25, Y+7	; 0x07
    4e32:	9b 83       	std	Y+3, r25	; 0x03
    4e34:	8a 83       	std	Y+2, r24	; 0x02
    4e36:	8a 81       	ldd	r24, Y+2	; 0x02
    4e38:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	f1 f7       	brne	.-4      	; 0x4e3a <lcd_init+0x2410>
    4e3e:	9b 83       	std	Y+3, r25	; 0x03
    4e40:	8a 83       	std	Y+2, r24	; 0x02
    4e42:	0f c0       	rjmp	.+30     	; 0x4e62 <lcd_init+0x2438>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e44:	69 89       	ldd	r22, Y+17	; 0x11
    4e46:	7a 89       	ldd	r23, Y+18	; 0x12
    4e48:	8b 89       	ldd	r24, Y+19	; 0x13
    4e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	88 8b       	std	Y+16, r24	; 0x10
    4e56:	88 89       	ldd	r24, Y+16	; 0x10
    4e58:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e5a:	89 81       	ldd	r24, Y+1	; 0x01
    4e5c:	8a 95       	dec	r24
    4e5e:	f1 f7       	brne	.-4      	; 0x4e5c <lcd_init+0x2432>
    4e60:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(600);
	lcd_sendCommand(LCD_COMMAND_2_LINE_4_BIT);
    4e62:	88 e2       	ldi	r24, 0x28	; 40
    4e64:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_DISPLAY_OFF);
    4e68:	88 e0       	ldi	r24, 0x08	; 8
    4e6a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_ENTRY_MODE_CURSOR_INCREAMENT_NO_SHIFT);
    4e74:	86 e0       	ldi	r24, 0x06	; 6
    4e76:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_RETURN_HOME);
    4e7a:	82 e0       	ldi	r24, 0x02	; 2
    4e7c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
	lcd_sendCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);
    4e80:	8c e0       	ldi	r24, 0x0C	; 12
    4e82:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>

}
    4e86:	cc 57       	subi	r28, 0x7C	; 124
    4e88:	de 4f       	sbci	r29, 0xFE	; 254
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	cd bf       	out	0x3d, r28	; 61
    4e94:	cf 91       	pop	r28
    4e96:	df 91       	pop	r29
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	08 95       	ret

00004e9e <lcd_displayCharacter>:
	_delay_us(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
	_delay_us(50);
}
#elif LCD_DATA_BUS_SIZE == 4
void lcd_displayCharacter(uint8 character){
    4e9e:	0f 93       	push	r16
    4ea0:	1f 93       	push	r17
    4ea2:	df 93       	push	r29
    4ea4:	cf 93       	push	r28
    4ea6:	cd b7       	in	r28, 0x3d	; 61
    4ea8:	de b7       	in	r29, 0x3e	; 62
    4eaa:	c9 5a       	subi	r28, 0xA9	; 169
    4eac:	d0 40       	sbci	r29, 0x00	; 0
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	de bf       	out	0x3e, r29	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	cd bf       	out	0x3d, r28	; 61
    4eb8:	fe 01       	movw	r30, r28
    4eba:	e7 55       	subi	r30, 0x57	; 87
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	60 e0       	ldi	r22, 0x00	; 0
    4ec4:	41 e0       	ldi	r20, 0x01	; 1
    4ec6:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    4eca:	fe 01       	movw	r30, r28
    4ecc:	eb 55       	subi	r30, 0x5B	; 91
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a8 e4       	ldi	r26, 0x48	; 72
    4ed6:	b2 e4       	ldi	r27, 0x42	; 66
    4ed8:	80 83       	st	Z, r24
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	a2 83       	std	Z+2, r26	; 0x02
    4ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ee0:	8e 01       	movw	r16, r28
    4ee2:	0f 55       	subi	r16, 0x5F	; 95
    4ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	eb 55       	subi	r30, 0x5B	; 91
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	2b ea       	ldi	r18, 0xAB	; 171
    4ef6:	3a ea       	ldi	r19, 0xAA	; 170
    4ef8:	4a ea       	ldi	r20, 0xAA	; 170
    4efa:	5e e3       	ldi	r21, 0x3E	; 62
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	f8 01       	movw	r30, r16
    4f06:	80 83       	st	Z, r24
    4f08:	91 83       	std	Z+1, r25	; 0x01
    4f0a:	a2 83       	std	Z+2, r26	; 0x02
    4f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ef 55       	subi	r30, 0x5F	; 95
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	60 81       	ld	r22, Z
    4f16:	71 81       	ldd	r23, Z+1	; 0x01
    4f18:	82 81       	ldd	r24, Z+2	; 0x02
    4f1a:	93 81       	ldd	r25, Z+3	; 0x03
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	40 e8       	ldi	r20, 0x80	; 128
    4f22:	5f e3       	ldi	r21, 0x3F	; 63
    4f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f28:	88 23       	and	r24, r24
    4f2a:	34 f4       	brge	.+12     	; 0x4f38 <lcd_displayCharacter+0x9a>
		__ticks = 1;
    4f2c:	fe 01       	movw	r30, r28
    4f2e:	e0 56       	subi	r30, 0x60	; 96
    4f30:	ff 4f       	sbci	r31, 0xFF	; 255
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	80 83       	st	Z, r24
    4f36:	e0 c0       	rjmp	.+448    	; 0x50f8 <lcd_displayCharacter+0x25a>
	else if (__tmp > 255)
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ef 55       	subi	r30, 0x5F	; 95
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	60 81       	ld	r22, Z
    4f40:	71 81       	ldd	r23, Z+1	; 0x01
    4f42:	82 81       	ldd	r24, Z+2	; 0x02
    4f44:	93 81       	ldd	r25, Z+3	; 0x03
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	4f e7       	ldi	r20, 0x7F	; 127
    4f4c:	53 e4       	ldi	r21, 0x43	; 67
    4f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f52:	18 16       	cp	r1, r24
    4f54:	0c f0       	brlt	.+2      	; 0x4f58 <lcd_displayCharacter+0xba>
    4f56:	c0 c0       	rjmp	.+384    	; 0x50d8 <lcd_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    4f58:	fe 01       	movw	r30, r28
    4f5a:	eb 55       	subi	r30, 0x5B	; 91
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	4a e7       	ldi	r20, 0x7A	; 122
    4f6c:	54 e4       	ldi	r21, 0x44	; 68
    4f6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4f72:	dc 01       	movw	r26, r24
    4f74:	cb 01       	movw	r24, r22
    4f76:	fe 01       	movw	r30, r28
    4f78:	e4 56       	subi	r30, 0x64	; 100
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	80 83       	st	Z, r24
    4f7e:	91 83       	std	Z+1, r25	; 0x01
    4f80:	a2 83       	std	Z+2, r26	; 0x02
    4f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f84:	8e 01       	movw	r16, r28
    4f86:	08 56       	subi	r16, 0x68	; 104
    4f88:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8a:	fe 01       	movw	r30, r28
    4f8c:	e4 56       	subi	r30, 0x64	; 100
    4f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f90:	60 81       	ld	r22, Z
    4f92:	71 81       	ldd	r23, Z+1	; 0x01
    4f94:	82 81       	ldd	r24, Z+2	; 0x02
    4f96:	93 81       	ldd	r25, Z+3	; 0x03
    4f98:	20 e0       	ldi	r18, 0x00	; 0
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	4a e7       	ldi	r20, 0x7A	; 122
    4f9e:	53 e4       	ldi	r21, 0x43	; 67
    4fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	cb 01       	movw	r24, r22
    4fa8:	f8 01       	movw	r30, r16
    4faa:	80 83       	st	Z, r24
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	a2 83       	std	Z+2, r26	; 0x02
    4fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e8 56       	subi	r30, 0x68	; 104
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	60 81       	ld	r22, Z
    4fba:	71 81       	ldd	r23, Z+1	; 0x01
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	93 81       	ldd	r25, Z+3	; 0x03
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	40 e8       	ldi	r20, 0x80	; 128
    4fc6:	5f e3       	ldi	r21, 0x3F	; 63
    4fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fcc:	88 23       	and	r24, r24
    4fce:	44 f4       	brge	.+16     	; 0x4fe0 <lcd_displayCharacter+0x142>
		__ticks = 1;
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	ea 56       	subi	r30, 0x6A	; 106
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	91 83       	std	Z+1, r25	; 0x01
    4fdc:	80 83       	st	Z, r24
    4fde:	64 c0       	rjmp	.+200    	; 0x50a8 <lcd_displayCharacter+0x20a>
	else if (__tmp > 65535)
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	e8 56       	subi	r30, 0x68	; 104
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	60 81       	ld	r22, Z
    4fe8:	71 81       	ldd	r23, Z+1	; 0x01
    4fea:	82 81       	ldd	r24, Z+2	; 0x02
    4fec:	93 81       	ldd	r25, Z+3	; 0x03
    4fee:	20 e0       	ldi	r18, 0x00	; 0
    4ff0:	3f ef       	ldi	r19, 0xFF	; 255
    4ff2:	4f e7       	ldi	r20, 0x7F	; 127
    4ff4:	57 e4       	ldi	r21, 0x47	; 71
    4ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ffa:	18 16       	cp	r1, r24
    4ffc:	0c f0       	brlt	.+2      	; 0x5000 <lcd_displayCharacter+0x162>
    4ffe:	43 c0       	rjmp	.+134    	; 0x5086 <lcd_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5000:	fe 01       	movw	r30, r28
    5002:	e4 56       	subi	r30, 0x64	; 100
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	82 81       	ldd	r24, Z+2	; 0x02
    500c:	93 81       	ldd	r25, Z+3	; 0x03
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e2       	ldi	r20, 0x20	; 32
    5014:	51 e4       	ldi	r21, 0x41	; 65
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	8e 01       	movw	r16, r28
    5020:	0a 56       	subi	r16, 0x6A	; 106
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
    5024:	bc 01       	movw	r22, r24
    5026:	cd 01       	movw	r24, r26
    5028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502c:	dc 01       	movw	r26, r24
    502e:	cb 01       	movw	r24, r22
    5030:	f8 01       	movw	r30, r16
    5032:	91 83       	std	Z+1, r25	; 0x01
    5034:	80 83       	st	Z, r24
    5036:	1f c0       	rjmp	.+62     	; 0x5076 <lcd_displayCharacter+0x1d8>
    5038:	fe 01       	movw	r30, r28
    503a:	ec 56       	subi	r30, 0x6C	; 108
    503c:	ff 4f       	sbci	r31, 0xFF	; 255
    503e:	89 e1       	ldi	r24, 0x19	; 25
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	91 83       	std	Z+1, r25	; 0x01
    5044:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5046:	fe 01       	movw	r30, r28
    5048:	ec 56       	subi	r30, 0x6C	; 108
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	80 81       	ld	r24, Z
    504e:	91 81       	ldd	r25, Z+1	; 0x01
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <lcd_displayCharacter+0x1b2>
    5054:	fe 01       	movw	r30, r28
    5056:	ec 56       	subi	r30, 0x6C	; 108
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505e:	de 01       	movw	r26, r28
    5060:	aa 56       	subi	r26, 0x6A	; 106
    5062:	bf 4f       	sbci	r27, 0xFF	; 255
    5064:	fe 01       	movw	r30, r28
    5066:	ea 56       	subi	r30, 0x6A	; 106
    5068:	ff 4f       	sbci	r31, 0xFF	; 255
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	11 96       	adiw	r26, 0x01	; 1
    5072:	9c 93       	st	X, r25
    5074:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5076:	fe 01       	movw	r30, r28
    5078:	ea 56       	subi	r30, 0x6A	; 106
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	d1 f6       	brne	.-76     	; 0x5038 <lcd_displayCharacter+0x19a>
    5084:	4b c0       	rjmp	.+150    	; 0x511c <lcd_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5086:	8e 01       	movw	r16, r28
    5088:	0a 56       	subi	r16, 0x6A	; 106
    508a:	1f 4f       	sbci	r17, 0xFF	; 255
    508c:	fe 01       	movw	r30, r28
    508e:	e8 56       	subi	r30, 0x68	; 104
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	60 81       	ld	r22, Z
    5094:	71 81       	ldd	r23, Z+1	; 0x01
    5096:	82 81       	ldd	r24, Z+2	; 0x02
    5098:	93 81       	ldd	r25, Z+3	; 0x03
    509a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	f8 01       	movw	r30, r16
    50a4:	91 83       	std	Z+1, r25	; 0x01
    50a6:	80 83       	st	Z, r24
    50a8:	de 01       	movw	r26, r28
    50aa:	ae 56       	subi	r26, 0x6E	; 110
    50ac:	bf 4f       	sbci	r27, 0xFF	; 255
    50ae:	fe 01       	movw	r30, r28
    50b0:	ea 56       	subi	r30, 0x6A	; 106
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	80 81       	ld	r24, Z
    50b6:	91 81       	ldd	r25, Z+1	; 0x01
    50b8:	11 96       	adiw	r26, 0x01	; 1
    50ba:	9c 93       	st	X, r25
    50bc:	8e 93       	st	-X, r24
    50be:	fe 01       	movw	r30, r28
    50c0:	ee 56       	subi	r30, 0x6E	; 110
    50c2:	ff 4f       	sbci	r31, 0xFF	; 255
    50c4:	80 81       	ld	r24, Z
    50c6:	91 81       	ldd	r25, Z+1	; 0x01
    50c8:	01 97       	sbiw	r24, 0x01	; 1
    50ca:	f1 f7       	brne	.-4      	; 0x50c8 <lcd_displayCharacter+0x22a>
    50cc:	fe 01       	movw	r30, r28
    50ce:	ee 56       	subi	r30, 0x6E	; 110
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	91 83       	std	Z+1, r25	; 0x01
    50d4:	80 83       	st	Z, r24
    50d6:	22 c0       	rjmp	.+68     	; 0x511c <lcd_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    50d8:	8e 01       	movw	r16, r28
    50da:	00 56       	subi	r16, 0x60	; 96
    50dc:	1f 4f       	sbci	r17, 0xFF	; 255
    50de:	fe 01       	movw	r30, r28
    50e0:	ef 55       	subi	r30, 0x5F	; 95
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	60 81       	ld	r22, Z
    50e6:	71 81       	ldd	r23, Z+1	; 0x01
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	93 81       	ldd	r25, Z+3	; 0x03
    50ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	f8 01       	movw	r30, r16
    50f6:	80 83       	st	Z, r24
    50f8:	de 01       	movw	r26, r28
    50fa:	af 56       	subi	r26, 0x6F	; 111
    50fc:	bf 4f       	sbci	r27, 0xFF	; 255
    50fe:	fe 01       	movw	r30, r28
    5100:	e0 56       	subi	r30, 0x60	; 96
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	80 81       	ld	r24, Z
    5106:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5108:	fe 01       	movw	r30, r28
    510a:	ef 56       	subi	r30, 0x6F	; 111
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	80 81       	ld	r24, Z
    5110:	8a 95       	dec	r24
    5112:	f1 f7       	brne	.-4      	; 0x5110 <lcd_displayCharacter+0x272>
    5114:	fe 01       	movw	r30, r28
    5116:	ef 56       	subi	r30, 0x6F	; 111
    5118:	ff 4f       	sbci	r31, 0xFF	; 255
    511a:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	61 e0       	ldi	r22, 0x01	; 1
    5120:	41 e0       	ldi	r20, 0x01	; 1
    5122:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    5126:	fe 01       	movw	r30, r28
    5128:	e3 57       	subi	r30, 0x73	; 115
    512a:	ff 4f       	sbci	r31, 0xFF	; 255
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	a8 e4       	ldi	r26, 0x48	; 72
    5132:	b2 e4       	ldi	r27, 0x42	; 66
    5134:	80 83       	st	Z, r24
    5136:	91 83       	std	Z+1, r25	; 0x01
    5138:	a2 83       	std	Z+2, r26	; 0x02
    513a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    513c:	8e 01       	movw	r16, r28
    513e:	07 57       	subi	r16, 0x77	; 119
    5140:	1f 4f       	sbci	r17, 0xFF	; 255
    5142:	fe 01       	movw	r30, r28
    5144:	e3 57       	subi	r30, 0x73	; 115
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	60 81       	ld	r22, Z
    514a:	71 81       	ldd	r23, Z+1	; 0x01
    514c:	82 81       	ldd	r24, Z+2	; 0x02
    514e:	93 81       	ldd	r25, Z+3	; 0x03
    5150:	2b ea       	ldi	r18, 0xAB	; 171
    5152:	3a ea       	ldi	r19, 0xAA	; 170
    5154:	4a ea       	ldi	r20, 0xAA	; 170
    5156:	5e e3       	ldi	r21, 0x3E	; 62
    5158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    515c:	dc 01       	movw	r26, r24
    515e:	cb 01       	movw	r24, r22
    5160:	f8 01       	movw	r30, r16
    5162:	80 83       	st	Z, r24
    5164:	91 83       	std	Z+1, r25	; 0x01
    5166:	a2 83       	std	Z+2, r26	; 0x02
    5168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    516a:	fe 01       	movw	r30, r28
    516c:	e7 57       	subi	r30, 0x77	; 119
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	60 81       	ld	r22, Z
    5172:	71 81       	ldd	r23, Z+1	; 0x01
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	40 e8       	ldi	r20, 0x80	; 128
    517e:	5f e3       	ldi	r21, 0x3F	; 63
    5180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5184:	88 23       	and	r24, r24
    5186:	34 f4       	brge	.+12     	; 0x5194 <lcd_displayCharacter+0x2f6>
		__ticks = 1;
    5188:	fe 01       	movw	r30, r28
    518a:	e8 57       	subi	r30, 0x78	; 120
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	80 83       	st	Z, r24
    5192:	e0 c0       	rjmp	.+448    	; 0x5354 <lcd_displayCharacter+0x4b6>
	else if (__tmp > 255)
    5194:	fe 01       	movw	r30, r28
    5196:	e7 57       	subi	r30, 0x77	; 119
    5198:	ff 4f       	sbci	r31, 0xFF	; 255
    519a:	60 81       	ld	r22, Z
    519c:	71 81       	ldd	r23, Z+1	; 0x01
    519e:	82 81       	ldd	r24, Z+2	; 0x02
    51a0:	93 81       	ldd	r25, Z+3	; 0x03
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	4f e7       	ldi	r20, 0x7F	; 127
    51a8:	53 e4       	ldi	r21, 0x43	; 67
    51aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ae:	18 16       	cp	r1, r24
    51b0:	0c f0       	brlt	.+2      	; 0x51b4 <lcd_displayCharacter+0x316>
    51b2:	c0 c0       	rjmp	.+384    	; 0x5334 <lcd_displayCharacter+0x496>
	{
		_delay_ms(__us / 1000.0);
    51b4:	fe 01       	movw	r30, r28
    51b6:	e3 57       	subi	r30, 0x73	; 115
    51b8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ba:	60 81       	ld	r22, Z
    51bc:	71 81       	ldd	r23, Z+1	; 0x01
    51be:	82 81       	ldd	r24, Z+2	; 0x02
    51c0:	93 81       	ldd	r25, Z+3	; 0x03
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	4a e7       	ldi	r20, 0x7A	; 122
    51c8:	54 e4       	ldi	r21, 0x44	; 68
    51ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51ce:	dc 01       	movw	r26, r24
    51d0:	cb 01       	movw	r24, r22
    51d2:	fe 01       	movw	r30, r28
    51d4:	ec 57       	subi	r30, 0x7C	; 124
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	80 83       	st	Z, r24
    51da:	91 83       	std	Z+1, r25	; 0x01
    51dc:	a2 83       	std	Z+2, r26	; 0x02
    51de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51e0:	8e 01       	movw	r16, r28
    51e2:	00 58       	subi	r16, 0x80	; 128
    51e4:	1f 4f       	sbci	r17, 0xFF	; 255
    51e6:	fe 01       	movw	r30, r28
    51e8:	ec 57       	subi	r30, 0x7C	; 124
    51ea:	ff 4f       	sbci	r31, 0xFF	; 255
    51ec:	60 81       	ld	r22, Z
    51ee:	71 81       	ldd	r23, Z+1	; 0x01
    51f0:	82 81       	ldd	r24, Z+2	; 0x02
    51f2:	93 81       	ldd	r25, Z+3	; 0x03
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	30 e0       	ldi	r19, 0x00	; 0
    51f8:	4a e7       	ldi	r20, 0x7A	; 122
    51fa:	53 e4       	ldi	r21, 0x43	; 67
    51fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	f8 01       	movw	r30, r16
    5206:	80 83       	st	Z, r24
    5208:	91 83       	std	Z+1, r25	; 0x01
    520a:	a2 83       	std	Z+2, r26	; 0x02
    520c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    520e:	fe 01       	movw	r30, r28
    5210:	e0 58       	subi	r30, 0x80	; 128
    5212:	ff 4f       	sbci	r31, 0xFF	; 255
    5214:	60 81       	ld	r22, Z
    5216:	71 81       	ldd	r23, Z+1	; 0x01
    5218:	82 81       	ldd	r24, Z+2	; 0x02
    521a:	93 81       	ldd	r25, Z+3	; 0x03
    521c:	20 e0       	ldi	r18, 0x00	; 0
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	40 e8       	ldi	r20, 0x80	; 128
    5222:	5f e3       	ldi	r21, 0x3F	; 63
    5224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5228:	88 23       	and	r24, r24
    522a:	44 f4       	brge	.+16     	; 0x523c <lcd_displayCharacter+0x39e>
		__ticks = 1;
    522c:	fe 01       	movw	r30, r28
    522e:	e2 58       	subi	r30, 0x82	; 130
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	91 83       	std	Z+1, r25	; 0x01
    5238:	80 83       	st	Z, r24
    523a:	64 c0       	rjmp	.+200    	; 0x5304 <lcd_displayCharacter+0x466>
	else if (__tmp > 65535)
    523c:	fe 01       	movw	r30, r28
    523e:	e0 58       	subi	r30, 0x80	; 128
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	60 81       	ld	r22, Z
    5244:	71 81       	ldd	r23, Z+1	; 0x01
    5246:	82 81       	ldd	r24, Z+2	; 0x02
    5248:	93 81       	ldd	r25, Z+3	; 0x03
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	3f ef       	ldi	r19, 0xFF	; 255
    524e:	4f e7       	ldi	r20, 0x7F	; 127
    5250:	57 e4       	ldi	r21, 0x47	; 71
    5252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5256:	18 16       	cp	r1, r24
    5258:	0c f0       	brlt	.+2      	; 0x525c <lcd_displayCharacter+0x3be>
    525a:	43 c0       	rjmp	.+134    	; 0x52e2 <lcd_displayCharacter+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    525c:	fe 01       	movw	r30, r28
    525e:	ec 57       	subi	r30, 0x7C	; 124
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	60 81       	ld	r22, Z
    5264:	71 81       	ldd	r23, Z+1	; 0x01
    5266:	82 81       	ldd	r24, Z+2	; 0x02
    5268:	93 81       	ldd	r25, Z+3	; 0x03
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e2       	ldi	r20, 0x20	; 32
    5270:	51 e4       	ldi	r21, 0x41	; 65
    5272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5276:	dc 01       	movw	r26, r24
    5278:	cb 01       	movw	r24, r22
    527a:	8e 01       	movw	r16, r28
    527c:	02 58       	subi	r16, 0x82	; 130
    527e:	1f 4f       	sbci	r17, 0xFF	; 255
    5280:	bc 01       	movw	r22, r24
    5282:	cd 01       	movw	r24, r26
    5284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5288:	dc 01       	movw	r26, r24
    528a:	cb 01       	movw	r24, r22
    528c:	f8 01       	movw	r30, r16
    528e:	91 83       	std	Z+1, r25	; 0x01
    5290:	80 83       	st	Z, r24
    5292:	1f c0       	rjmp	.+62     	; 0x52d2 <lcd_displayCharacter+0x434>
    5294:	fe 01       	movw	r30, r28
    5296:	e4 58       	subi	r30, 0x84	; 132
    5298:	ff 4f       	sbci	r31, 0xFF	; 255
    529a:	89 e1       	ldi	r24, 0x19	; 25
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	91 83       	std	Z+1, r25	; 0x01
    52a0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    52a2:	fe 01       	movw	r30, r28
    52a4:	e4 58       	subi	r30, 0x84	; 132
    52a6:	ff 4f       	sbci	r31, 0xFF	; 255
    52a8:	80 81       	ld	r24, Z
    52aa:	91 81       	ldd	r25, Z+1	; 0x01
    52ac:	01 97       	sbiw	r24, 0x01	; 1
    52ae:	f1 f7       	brne	.-4      	; 0x52ac <lcd_displayCharacter+0x40e>
    52b0:	fe 01       	movw	r30, r28
    52b2:	e4 58       	subi	r30, 0x84	; 132
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	91 83       	std	Z+1, r25	; 0x01
    52b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52ba:	de 01       	movw	r26, r28
    52bc:	a2 58       	subi	r26, 0x82	; 130
    52be:	bf 4f       	sbci	r27, 0xFF	; 255
    52c0:	fe 01       	movw	r30, r28
    52c2:	e2 58       	subi	r30, 0x82	; 130
    52c4:	ff 4f       	sbci	r31, 0xFF	; 255
    52c6:	80 81       	ld	r24, Z
    52c8:	91 81       	ldd	r25, Z+1	; 0x01
    52ca:	01 97       	sbiw	r24, 0x01	; 1
    52cc:	11 96       	adiw	r26, 0x01	; 1
    52ce:	9c 93       	st	X, r25
    52d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d2:	fe 01       	movw	r30, r28
    52d4:	e2 58       	subi	r30, 0x82	; 130
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	80 81       	ld	r24, Z
    52da:	91 81       	ldd	r25, Z+1	; 0x01
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	d1 f6       	brne	.-76     	; 0x5294 <lcd_displayCharacter+0x3f6>
    52e0:	4b c0       	rjmp	.+150    	; 0x5378 <lcd_displayCharacter+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e2:	8e 01       	movw	r16, r28
    52e4:	02 58       	subi	r16, 0x82	; 130
    52e6:	1f 4f       	sbci	r17, 0xFF	; 255
    52e8:	fe 01       	movw	r30, r28
    52ea:	e0 58       	subi	r30, 0x80	; 128
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	f8 01       	movw	r30, r16
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
    5304:	de 01       	movw	r26, r28
    5306:	a6 58       	subi	r26, 0x86	; 134
    5308:	bf 4f       	sbci	r27, 0xFF	; 255
    530a:	fe 01       	movw	r30, r28
    530c:	e2 58       	subi	r30, 0x82	; 130
    530e:	ff 4f       	sbci	r31, 0xFF	; 255
    5310:	80 81       	ld	r24, Z
    5312:	91 81       	ldd	r25, Z+1	; 0x01
    5314:	11 96       	adiw	r26, 0x01	; 1
    5316:	9c 93       	st	X, r25
    5318:	8e 93       	st	-X, r24
    531a:	fe 01       	movw	r30, r28
    531c:	e6 58       	subi	r30, 0x86	; 134
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	80 81       	ld	r24, Z
    5322:	91 81       	ldd	r25, Z+1	; 0x01
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	f1 f7       	brne	.-4      	; 0x5324 <lcd_displayCharacter+0x486>
    5328:	fe 01       	movw	r30, r28
    532a:	e6 58       	subi	r30, 0x86	; 134
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	91 83       	std	Z+1, r25	; 0x01
    5330:	80 83       	st	Z, r24
    5332:	22 c0       	rjmp	.+68     	; 0x5378 <lcd_displayCharacter+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5334:	8e 01       	movw	r16, r28
    5336:	08 57       	subi	r16, 0x78	; 120
    5338:	1f 4f       	sbci	r17, 0xFF	; 255
    533a:	fe 01       	movw	r30, r28
    533c:	e7 57       	subi	r30, 0x77	; 119
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	60 81       	ld	r22, Z
    5342:	71 81       	ldd	r23, Z+1	; 0x01
    5344:	82 81       	ldd	r24, Z+2	; 0x02
    5346:	93 81       	ldd	r25, Z+3	; 0x03
    5348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534c:	dc 01       	movw	r26, r24
    534e:	cb 01       	movw	r24, r22
    5350:	f8 01       	movw	r30, r16
    5352:	80 83       	st	Z, r24
    5354:	de 01       	movw	r26, r28
    5356:	a7 58       	subi	r26, 0x87	; 135
    5358:	bf 4f       	sbci	r27, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	e8 57       	subi	r30, 0x78	; 120
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	80 81       	ld	r24, Z
    5362:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5364:	fe 01       	movw	r30, r28
    5366:	e7 58       	subi	r30, 0x87	; 135
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	80 81       	ld	r24, Z
    536c:	8a 95       	dec	r24
    536e:	f1 f7       	brne	.-4      	; 0x536c <lcd_displayCharacter+0x4ce>
    5370:	fe 01       	movw	r30, r28
    5372:	e7 58       	subi	r30, 0x87	; 135
    5374:	ff 4f       	sbci	r31, 0xFF	; 255
    5376:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((character & 0xF0) >> 4) << LCD_DATA_BUS_PORT_OFFSET);
    5378:	fe 01       	movw	r30, r28
    537a:	e7 55       	subi	r30, 0x57	; 87
    537c:	ff 4f       	sbci	r31, 0xFF	; 255
    537e:	80 81       	ld	r24, Z
    5380:	82 95       	swap	r24
    5382:	8f 70       	andi	r24, 0x0F	; 15
    5384:	98 2f       	mov	r25, r24
    5386:	99 0f       	add	r25, r25
    5388:	99 0f       	add	r25, r25
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	6c e3       	ldi	r22, 0x3C	; 60
    538e:	49 2f       	mov	r20, r25
    5390:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    5394:	fe 01       	movw	r30, r28
    5396:	eb 58       	subi	r30, 0x8B	; 139
    5398:	ff 4f       	sbci	r31, 0xFF	; 255
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	a8 e4       	ldi	r26, 0x48	; 72
    53a0:	b2 e4       	ldi	r27, 0x42	; 66
    53a2:	80 83       	st	Z, r24
    53a4:	91 83       	std	Z+1, r25	; 0x01
    53a6:	a2 83       	std	Z+2, r26	; 0x02
    53a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    53aa:	8e 01       	movw	r16, r28
    53ac:	0f 58       	subi	r16, 0x8F	; 143
    53ae:	1f 4f       	sbci	r17, 0xFF	; 255
    53b0:	fe 01       	movw	r30, r28
    53b2:	eb 58       	subi	r30, 0x8B	; 139
    53b4:	ff 4f       	sbci	r31, 0xFF	; 255
    53b6:	60 81       	ld	r22, Z
    53b8:	71 81       	ldd	r23, Z+1	; 0x01
    53ba:	82 81       	ldd	r24, Z+2	; 0x02
    53bc:	93 81       	ldd	r25, Z+3	; 0x03
    53be:	2b ea       	ldi	r18, 0xAB	; 171
    53c0:	3a ea       	ldi	r19, 0xAA	; 170
    53c2:	4a ea       	ldi	r20, 0xAA	; 170
    53c4:	5e e3       	ldi	r21, 0x3E	; 62
    53c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ca:	dc 01       	movw	r26, r24
    53cc:	cb 01       	movw	r24, r22
    53ce:	f8 01       	movw	r30, r16
    53d0:	80 83       	st	Z, r24
    53d2:	91 83       	std	Z+1, r25	; 0x01
    53d4:	a2 83       	std	Z+2, r26	; 0x02
    53d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53d8:	fe 01       	movw	r30, r28
    53da:	ef 58       	subi	r30, 0x8F	; 143
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	60 81       	ld	r22, Z
    53e0:	71 81       	ldd	r23, Z+1	; 0x01
    53e2:	82 81       	ldd	r24, Z+2	; 0x02
    53e4:	93 81       	ldd	r25, Z+3	; 0x03
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e8       	ldi	r20, 0x80	; 128
    53ec:	5f e3       	ldi	r21, 0x3F	; 63
    53ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f2:	88 23       	and	r24, r24
    53f4:	34 f4       	brge	.+12     	; 0x5402 <lcd_displayCharacter+0x564>
		__ticks = 1;
    53f6:	fe 01       	movw	r30, r28
    53f8:	e0 59       	subi	r30, 0x90	; 144
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	81 e0       	ldi	r24, 0x01	; 1
    53fe:	80 83       	st	Z, r24
    5400:	e0 c0       	rjmp	.+448    	; 0x55c2 <lcd_displayCharacter+0x724>
	else if (__tmp > 255)
    5402:	fe 01       	movw	r30, r28
    5404:	ef 58       	subi	r30, 0x8F	; 143
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	60 81       	ld	r22, Z
    540a:	71 81       	ldd	r23, Z+1	; 0x01
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	4f e7       	ldi	r20, 0x7F	; 127
    5416:	53 e4       	ldi	r21, 0x43	; 67
    5418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    541c:	18 16       	cp	r1, r24
    541e:	0c f0       	brlt	.+2      	; 0x5422 <lcd_displayCharacter+0x584>
    5420:	c0 c0       	rjmp	.+384    	; 0x55a2 <lcd_displayCharacter+0x704>
	{
		_delay_ms(__us / 1000.0);
    5422:	fe 01       	movw	r30, r28
    5424:	eb 58       	subi	r30, 0x8B	; 139
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	82 81       	ldd	r24, Z+2	; 0x02
    542e:	93 81       	ldd	r25, Z+3	; 0x03
    5430:	20 e0       	ldi	r18, 0x00	; 0
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	4a e7       	ldi	r20, 0x7A	; 122
    5436:	54 e4       	ldi	r21, 0x44	; 68
    5438:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	fe 01       	movw	r30, r28
    5442:	e4 59       	subi	r30, 0x94	; 148
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	80 83       	st	Z, r24
    5448:	91 83       	std	Z+1, r25	; 0x01
    544a:	a2 83       	std	Z+2, r26	; 0x02
    544c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    544e:	8e 01       	movw	r16, r28
    5450:	08 59       	subi	r16, 0x98	; 152
    5452:	1f 4f       	sbci	r17, 0xFF	; 255
    5454:	fe 01       	movw	r30, r28
    5456:	e4 59       	subi	r30, 0x94	; 148
    5458:	ff 4f       	sbci	r31, 0xFF	; 255
    545a:	60 81       	ld	r22, Z
    545c:	71 81       	ldd	r23, Z+1	; 0x01
    545e:	82 81       	ldd	r24, Z+2	; 0x02
    5460:	93 81       	ldd	r25, Z+3	; 0x03
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	4a e7       	ldi	r20, 0x7A	; 122
    5468:	53 e4       	ldi	r21, 0x43	; 67
    546a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	f8 01       	movw	r30, r16
    5474:	80 83       	st	Z, r24
    5476:	91 83       	std	Z+1, r25	; 0x01
    5478:	a2 83       	std	Z+2, r26	; 0x02
    547a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    547c:	fe 01       	movw	r30, r28
    547e:	e8 59       	subi	r30, 0x98	; 152
    5480:	ff 4f       	sbci	r31, 0xFF	; 255
    5482:	60 81       	ld	r22, Z
    5484:	71 81       	ldd	r23, Z+1	; 0x01
    5486:	82 81       	ldd	r24, Z+2	; 0x02
    5488:	93 81       	ldd	r25, Z+3	; 0x03
    548a:	20 e0       	ldi	r18, 0x00	; 0
    548c:	30 e0       	ldi	r19, 0x00	; 0
    548e:	40 e8       	ldi	r20, 0x80	; 128
    5490:	5f e3       	ldi	r21, 0x3F	; 63
    5492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5496:	88 23       	and	r24, r24
    5498:	44 f4       	brge	.+16     	; 0x54aa <lcd_displayCharacter+0x60c>
		__ticks = 1;
    549a:	fe 01       	movw	r30, r28
    549c:	ea 59       	subi	r30, 0x9A	; 154
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	91 83       	std	Z+1, r25	; 0x01
    54a6:	80 83       	st	Z, r24
    54a8:	64 c0       	rjmp	.+200    	; 0x5572 <lcd_displayCharacter+0x6d4>
	else if (__tmp > 65535)
    54aa:	fe 01       	movw	r30, r28
    54ac:	e8 59       	subi	r30, 0x98	; 152
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	60 81       	ld	r22, Z
    54b2:	71 81       	ldd	r23, Z+1	; 0x01
    54b4:	82 81       	ldd	r24, Z+2	; 0x02
    54b6:	93 81       	ldd	r25, Z+3	; 0x03
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	3f ef       	ldi	r19, 0xFF	; 255
    54bc:	4f e7       	ldi	r20, 0x7F	; 127
    54be:	57 e4       	ldi	r21, 0x47	; 71
    54c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54c4:	18 16       	cp	r1, r24
    54c6:	0c f0       	brlt	.+2      	; 0x54ca <lcd_displayCharacter+0x62c>
    54c8:	43 c0       	rjmp	.+134    	; 0x5550 <lcd_displayCharacter+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ca:	fe 01       	movw	r30, r28
    54cc:	e4 59       	subi	r30, 0x94	; 148
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	60 81       	ld	r22, Z
    54d2:	71 81       	ldd	r23, Z+1	; 0x01
    54d4:	82 81       	ldd	r24, Z+2	; 0x02
    54d6:	93 81       	ldd	r25, Z+3	; 0x03
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e2       	ldi	r20, 0x20	; 32
    54de:	51 e4       	ldi	r21, 0x41	; 65
    54e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	8e 01       	movw	r16, r28
    54ea:	0a 59       	subi	r16, 0x9A	; 154
    54ec:	1f 4f       	sbci	r17, 0xFF	; 255
    54ee:	bc 01       	movw	r22, r24
    54f0:	cd 01       	movw	r24, r26
    54f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f6:	dc 01       	movw	r26, r24
    54f8:	cb 01       	movw	r24, r22
    54fa:	f8 01       	movw	r30, r16
    54fc:	91 83       	std	Z+1, r25	; 0x01
    54fe:	80 83       	st	Z, r24
    5500:	1f c0       	rjmp	.+62     	; 0x5540 <lcd_displayCharacter+0x6a2>
    5502:	fe 01       	movw	r30, r28
    5504:	ec 59       	subi	r30, 0x9C	; 156
    5506:	ff 4f       	sbci	r31, 0xFF	; 255
    5508:	89 e1       	ldi	r24, 0x19	; 25
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	91 83       	std	Z+1, r25	; 0x01
    550e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5510:	fe 01       	movw	r30, r28
    5512:	ec 59       	subi	r30, 0x9C	; 156
    5514:	ff 4f       	sbci	r31, 0xFF	; 255
    5516:	80 81       	ld	r24, Z
    5518:	91 81       	ldd	r25, Z+1	; 0x01
    551a:	01 97       	sbiw	r24, 0x01	; 1
    551c:	f1 f7       	brne	.-4      	; 0x551a <lcd_displayCharacter+0x67c>
    551e:	fe 01       	movw	r30, r28
    5520:	ec 59       	subi	r30, 0x9C	; 156
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	91 83       	std	Z+1, r25	; 0x01
    5526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5528:	de 01       	movw	r26, r28
    552a:	aa 59       	subi	r26, 0x9A	; 154
    552c:	bf 4f       	sbci	r27, 0xFF	; 255
    552e:	fe 01       	movw	r30, r28
    5530:	ea 59       	subi	r30, 0x9A	; 154
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	80 81       	ld	r24, Z
    5536:	91 81       	ldd	r25, Z+1	; 0x01
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	11 96       	adiw	r26, 0x01	; 1
    553c:	9c 93       	st	X, r25
    553e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5540:	fe 01       	movw	r30, r28
    5542:	ea 59       	subi	r30, 0x9A	; 154
    5544:	ff 4f       	sbci	r31, 0xFF	; 255
    5546:	80 81       	ld	r24, Z
    5548:	91 81       	ldd	r25, Z+1	; 0x01
    554a:	00 97       	sbiw	r24, 0x00	; 0
    554c:	d1 f6       	brne	.-76     	; 0x5502 <lcd_displayCharacter+0x664>
    554e:	4b c0       	rjmp	.+150    	; 0x55e6 <lcd_displayCharacter+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5550:	8e 01       	movw	r16, r28
    5552:	0a 59       	subi	r16, 0x9A	; 154
    5554:	1f 4f       	sbci	r17, 0xFF	; 255
    5556:	fe 01       	movw	r30, r28
    5558:	e8 59       	subi	r30, 0x98	; 152
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	60 81       	ld	r22, Z
    555e:	71 81       	ldd	r23, Z+1	; 0x01
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	f8 01       	movw	r30, r16
    556e:	91 83       	std	Z+1, r25	; 0x01
    5570:	80 83       	st	Z, r24
    5572:	de 01       	movw	r26, r28
    5574:	ae 59       	subi	r26, 0x9E	; 158
    5576:	bf 4f       	sbci	r27, 0xFF	; 255
    5578:	fe 01       	movw	r30, r28
    557a:	ea 59       	subi	r30, 0x9A	; 154
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	80 81       	ld	r24, Z
    5580:	91 81       	ldd	r25, Z+1	; 0x01
    5582:	11 96       	adiw	r26, 0x01	; 1
    5584:	9c 93       	st	X, r25
    5586:	8e 93       	st	-X, r24
    5588:	fe 01       	movw	r30, r28
    558a:	ee 59       	subi	r30, 0x9E	; 158
    558c:	ff 4f       	sbci	r31, 0xFF	; 255
    558e:	80 81       	ld	r24, Z
    5590:	91 81       	ldd	r25, Z+1	; 0x01
    5592:	01 97       	sbiw	r24, 0x01	; 1
    5594:	f1 f7       	brne	.-4      	; 0x5592 <lcd_displayCharacter+0x6f4>
    5596:	fe 01       	movw	r30, r28
    5598:	ee 59       	subi	r30, 0x9E	; 158
    559a:	ff 4f       	sbci	r31, 0xFF	; 255
    559c:	91 83       	std	Z+1, r25	; 0x01
    559e:	80 83       	st	Z, r24
    55a0:	22 c0       	rjmp	.+68     	; 0x55e6 <lcd_displayCharacter+0x748>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    55a2:	8e 01       	movw	r16, r28
    55a4:	00 59       	subi	r16, 0x90	; 144
    55a6:	1f 4f       	sbci	r17, 0xFF	; 255
    55a8:	fe 01       	movw	r30, r28
    55aa:	ef 58       	subi	r30, 0x8F	; 143
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	60 81       	ld	r22, Z
    55b0:	71 81       	ldd	r23, Z+1	; 0x01
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	f8 01       	movw	r30, r16
    55c0:	80 83       	st	Z, r24
    55c2:	de 01       	movw	r26, r28
    55c4:	af 59       	subi	r26, 0x9F	; 159
    55c6:	bf 4f       	sbci	r27, 0xFF	; 255
    55c8:	fe 01       	movw	r30, r28
    55ca:	e0 59       	subi	r30, 0x90	; 144
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	80 81       	ld	r24, Z
    55d0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    55d2:	fe 01       	movw	r30, r28
    55d4:	ef 59       	subi	r30, 0x9F	; 159
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	80 81       	ld	r24, Z
    55da:	8a 95       	dec	r24
    55dc:	f1 f7       	brne	.-4      	; 0x55da <lcd_displayCharacter+0x73c>
    55de:	fe 01       	movw	r30, r28
    55e0:	ef 59       	subi	r30, 0x9F	; 159
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	61 e0       	ldi	r22, 0x01	; 1
    55ea:	40 e0       	ldi	r20, 0x00	; 0
    55ec:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    55f0:	fe 01       	movw	r30, r28
    55f2:	e3 5a       	subi	r30, 0xA3	; 163
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	80 e0       	ldi	r24, 0x00	; 0
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	a8 e4       	ldi	r26, 0x48	; 72
    55fc:	b2 e4       	ldi	r27, 0x42	; 66
    55fe:	80 83       	st	Z, r24
    5600:	91 83       	std	Z+1, r25	; 0x01
    5602:	a2 83       	std	Z+2, r26	; 0x02
    5604:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5606:	8e 01       	movw	r16, r28
    5608:	07 5a       	subi	r16, 0xA7	; 167
    560a:	1f 4f       	sbci	r17, 0xFF	; 255
    560c:	fe 01       	movw	r30, r28
    560e:	e3 5a       	subi	r30, 0xA3	; 163
    5610:	ff 4f       	sbci	r31, 0xFF	; 255
    5612:	60 81       	ld	r22, Z
    5614:	71 81       	ldd	r23, Z+1	; 0x01
    5616:	82 81       	ldd	r24, Z+2	; 0x02
    5618:	93 81       	ldd	r25, Z+3	; 0x03
    561a:	2b ea       	ldi	r18, 0xAB	; 171
    561c:	3a ea       	ldi	r19, 0xAA	; 170
    561e:	4a ea       	ldi	r20, 0xAA	; 170
    5620:	5e e3       	ldi	r21, 0x3E	; 62
    5622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	f8 01       	movw	r30, r16
    562c:	80 83       	st	Z, r24
    562e:	91 83       	std	Z+1, r25	; 0x01
    5630:	a2 83       	std	Z+2, r26	; 0x02
    5632:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5634:	fe 01       	movw	r30, r28
    5636:	e7 5a       	subi	r30, 0xA7	; 167
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	60 81       	ld	r22, Z
    563c:	71 81       	ldd	r23, Z+1	; 0x01
    563e:	82 81       	ldd	r24, Z+2	; 0x02
    5640:	93 81       	ldd	r25, Z+3	; 0x03
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	40 e8       	ldi	r20, 0x80	; 128
    5648:	5f e3       	ldi	r21, 0x3F	; 63
    564a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    564e:	88 23       	and	r24, r24
    5650:	34 f4       	brge	.+12     	; 0x565e <lcd_displayCharacter+0x7c0>
		__ticks = 1;
    5652:	fe 01       	movw	r30, r28
    5654:	e8 5a       	subi	r30, 0xA8	; 168
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	80 83       	st	Z, r24
    565c:	e0 c0       	rjmp	.+448    	; 0x581e <lcd_displayCharacter+0x980>
	else if (__tmp > 255)
    565e:	fe 01       	movw	r30, r28
    5660:	e7 5a       	subi	r30, 0xA7	; 167
    5662:	ff 4f       	sbci	r31, 0xFF	; 255
    5664:	60 81       	ld	r22, Z
    5666:	71 81       	ldd	r23, Z+1	; 0x01
    5668:	82 81       	ldd	r24, Z+2	; 0x02
    566a:	93 81       	ldd	r25, Z+3	; 0x03
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	4f e7       	ldi	r20, 0x7F	; 127
    5672:	53 e4       	ldi	r21, 0x43	; 67
    5674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5678:	18 16       	cp	r1, r24
    567a:	0c f0       	brlt	.+2      	; 0x567e <lcd_displayCharacter+0x7e0>
    567c:	c0 c0       	rjmp	.+384    	; 0x57fe <lcd_displayCharacter+0x960>
	{
		_delay_ms(__us / 1000.0);
    567e:	fe 01       	movw	r30, r28
    5680:	e3 5a       	subi	r30, 0xA3	; 163
    5682:	ff 4f       	sbci	r31, 0xFF	; 255
    5684:	60 81       	ld	r22, Z
    5686:	71 81       	ldd	r23, Z+1	; 0x01
    5688:	82 81       	ldd	r24, Z+2	; 0x02
    568a:	93 81       	ldd	r25, Z+3	; 0x03
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	30 e0       	ldi	r19, 0x00	; 0
    5690:	4a e7       	ldi	r20, 0x7A	; 122
    5692:	54 e4       	ldi	r21, 0x44	; 68
    5694:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5698:	dc 01       	movw	r26, r24
    569a:	cb 01       	movw	r24, r22
    569c:	fe 01       	movw	r30, r28
    569e:	ec 5a       	subi	r30, 0xAC	; 172
    56a0:	ff 4f       	sbci	r31, 0xFF	; 255
    56a2:	80 83       	st	Z, r24
    56a4:	91 83       	std	Z+1, r25	; 0x01
    56a6:	a2 83       	std	Z+2, r26	; 0x02
    56a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56aa:	8e 01       	movw	r16, r28
    56ac:	00 5b       	subi	r16, 0xB0	; 176
    56ae:	1f 4f       	sbci	r17, 0xFF	; 255
    56b0:	fe 01       	movw	r30, r28
    56b2:	ec 5a       	subi	r30, 0xAC	; 172
    56b4:	ff 4f       	sbci	r31, 0xFF	; 255
    56b6:	60 81       	ld	r22, Z
    56b8:	71 81       	ldd	r23, Z+1	; 0x01
    56ba:	82 81       	ldd	r24, Z+2	; 0x02
    56bc:	93 81       	ldd	r25, Z+3	; 0x03
    56be:	20 e0       	ldi	r18, 0x00	; 0
    56c0:	30 e0       	ldi	r19, 0x00	; 0
    56c2:	4a e7       	ldi	r20, 0x7A	; 122
    56c4:	53 e4       	ldi	r21, 0x43	; 67
    56c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ca:	dc 01       	movw	r26, r24
    56cc:	cb 01       	movw	r24, r22
    56ce:	f8 01       	movw	r30, r16
    56d0:	80 83       	st	Z, r24
    56d2:	91 83       	std	Z+1, r25	; 0x01
    56d4:	a2 83       	std	Z+2, r26	; 0x02
    56d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56d8:	fe 01       	movw	r30, r28
    56da:	e0 5b       	subi	r30, 0xB0	; 176
    56dc:	ff 4f       	sbci	r31, 0xFF	; 255
    56de:	60 81       	ld	r22, Z
    56e0:	71 81       	ldd	r23, Z+1	; 0x01
    56e2:	82 81       	ldd	r24, Z+2	; 0x02
    56e4:	93 81       	ldd	r25, Z+3	; 0x03
    56e6:	20 e0       	ldi	r18, 0x00	; 0
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	40 e8       	ldi	r20, 0x80	; 128
    56ec:	5f e3       	ldi	r21, 0x3F	; 63
    56ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56f2:	88 23       	and	r24, r24
    56f4:	44 f4       	brge	.+16     	; 0x5706 <lcd_displayCharacter+0x868>
		__ticks = 1;
    56f6:	fe 01       	movw	r30, r28
    56f8:	e2 5b       	subi	r30, 0xB2	; 178
    56fa:	ff 4f       	sbci	r31, 0xFF	; 255
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	91 83       	std	Z+1, r25	; 0x01
    5702:	80 83       	st	Z, r24
    5704:	64 c0       	rjmp	.+200    	; 0x57ce <lcd_displayCharacter+0x930>
	else if (__tmp > 65535)
    5706:	fe 01       	movw	r30, r28
    5708:	e0 5b       	subi	r30, 0xB0	; 176
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	60 81       	ld	r22, Z
    570e:	71 81       	ldd	r23, Z+1	; 0x01
    5710:	82 81       	ldd	r24, Z+2	; 0x02
    5712:	93 81       	ldd	r25, Z+3	; 0x03
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	3f ef       	ldi	r19, 0xFF	; 255
    5718:	4f e7       	ldi	r20, 0x7F	; 127
    571a:	57 e4       	ldi	r21, 0x47	; 71
    571c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5720:	18 16       	cp	r1, r24
    5722:	0c f0       	brlt	.+2      	; 0x5726 <lcd_displayCharacter+0x888>
    5724:	43 c0       	rjmp	.+134    	; 0x57ac <lcd_displayCharacter+0x90e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5726:	fe 01       	movw	r30, r28
    5728:	ec 5a       	subi	r30, 0xAC	; 172
    572a:	ff 4f       	sbci	r31, 0xFF	; 255
    572c:	60 81       	ld	r22, Z
    572e:	71 81       	ldd	r23, Z+1	; 0x01
    5730:	82 81       	ldd	r24, Z+2	; 0x02
    5732:	93 81       	ldd	r25, Z+3	; 0x03
    5734:	20 e0       	ldi	r18, 0x00	; 0
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	40 e2       	ldi	r20, 0x20	; 32
    573a:	51 e4       	ldi	r21, 0x41	; 65
    573c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5740:	dc 01       	movw	r26, r24
    5742:	cb 01       	movw	r24, r22
    5744:	8e 01       	movw	r16, r28
    5746:	02 5b       	subi	r16, 0xB2	; 178
    5748:	1f 4f       	sbci	r17, 0xFF	; 255
    574a:	bc 01       	movw	r22, r24
    574c:	cd 01       	movw	r24, r26
    574e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5752:	dc 01       	movw	r26, r24
    5754:	cb 01       	movw	r24, r22
    5756:	f8 01       	movw	r30, r16
    5758:	91 83       	std	Z+1, r25	; 0x01
    575a:	80 83       	st	Z, r24
    575c:	1f c0       	rjmp	.+62     	; 0x579c <lcd_displayCharacter+0x8fe>
    575e:	fe 01       	movw	r30, r28
    5760:	e4 5b       	subi	r30, 0xB4	; 180
    5762:	ff 4f       	sbci	r31, 0xFF	; 255
    5764:	89 e1       	ldi	r24, 0x19	; 25
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	91 83       	std	Z+1, r25	; 0x01
    576a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    576c:	fe 01       	movw	r30, r28
    576e:	e4 5b       	subi	r30, 0xB4	; 180
    5770:	ff 4f       	sbci	r31, 0xFF	; 255
    5772:	80 81       	ld	r24, Z
    5774:	91 81       	ldd	r25, Z+1	; 0x01
    5776:	01 97       	sbiw	r24, 0x01	; 1
    5778:	f1 f7       	brne	.-4      	; 0x5776 <lcd_displayCharacter+0x8d8>
    577a:	fe 01       	movw	r30, r28
    577c:	e4 5b       	subi	r30, 0xB4	; 180
    577e:	ff 4f       	sbci	r31, 0xFF	; 255
    5780:	91 83       	std	Z+1, r25	; 0x01
    5782:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5784:	de 01       	movw	r26, r28
    5786:	a2 5b       	subi	r26, 0xB2	; 178
    5788:	bf 4f       	sbci	r27, 0xFF	; 255
    578a:	fe 01       	movw	r30, r28
    578c:	e2 5b       	subi	r30, 0xB2	; 178
    578e:	ff 4f       	sbci	r31, 0xFF	; 255
    5790:	80 81       	ld	r24, Z
    5792:	91 81       	ldd	r25, Z+1	; 0x01
    5794:	01 97       	sbiw	r24, 0x01	; 1
    5796:	11 96       	adiw	r26, 0x01	; 1
    5798:	9c 93       	st	X, r25
    579a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579c:	fe 01       	movw	r30, r28
    579e:	e2 5b       	subi	r30, 0xB2	; 178
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	80 81       	ld	r24, Z
    57a4:	91 81       	ldd	r25, Z+1	; 0x01
    57a6:	00 97       	sbiw	r24, 0x00	; 0
    57a8:	d1 f6       	brne	.-76     	; 0x575e <lcd_displayCharacter+0x8c0>
    57aa:	4b c0       	rjmp	.+150    	; 0x5842 <lcd_displayCharacter+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ac:	8e 01       	movw	r16, r28
    57ae:	02 5b       	subi	r16, 0xB2	; 178
    57b0:	1f 4f       	sbci	r17, 0xFF	; 255
    57b2:	fe 01       	movw	r30, r28
    57b4:	e0 5b       	subi	r30, 0xB0	; 176
    57b6:	ff 4f       	sbci	r31, 0xFF	; 255
    57b8:	60 81       	ld	r22, Z
    57ba:	71 81       	ldd	r23, Z+1	; 0x01
    57bc:	82 81       	ldd	r24, Z+2	; 0x02
    57be:	93 81       	ldd	r25, Z+3	; 0x03
    57c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c4:	dc 01       	movw	r26, r24
    57c6:	cb 01       	movw	r24, r22
    57c8:	f8 01       	movw	r30, r16
    57ca:	91 83       	std	Z+1, r25	; 0x01
    57cc:	80 83       	st	Z, r24
    57ce:	de 01       	movw	r26, r28
    57d0:	a6 5b       	subi	r26, 0xB6	; 182
    57d2:	bf 4f       	sbci	r27, 0xFF	; 255
    57d4:	fe 01       	movw	r30, r28
    57d6:	e2 5b       	subi	r30, 0xB2	; 178
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	80 81       	ld	r24, Z
    57dc:	91 81       	ldd	r25, Z+1	; 0x01
    57de:	11 96       	adiw	r26, 0x01	; 1
    57e0:	9c 93       	st	X, r25
    57e2:	8e 93       	st	-X, r24
    57e4:	fe 01       	movw	r30, r28
    57e6:	e6 5b       	subi	r30, 0xB6	; 182
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <lcd_displayCharacter+0x950>
    57f2:	fe 01       	movw	r30, r28
    57f4:	e6 5b       	subi	r30, 0xB6	; 182
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	91 83       	std	Z+1, r25	; 0x01
    57fa:	80 83       	st	Z, r24
    57fc:	22 c0       	rjmp	.+68     	; 0x5842 <lcd_displayCharacter+0x9a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    57fe:	8e 01       	movw	r16, r28
    5800:	08 5a       	subi	r16, 0xA8	; 168
    5802:	1f 4f       	sbci	r17, 0xFF	; 255
    5804:	fe 01       	movw	r30, r28
    5806:	e7 5a       	subi	r30, 0xA7	; 167
    5808:	ff 4f       	sbci	r31, 0xFF	; 255
    580a:	60 81       	ld	r22, Z
    580c:	71 81       	ldd	r23, Z+1	; 0x01
    580e:	82 81       	ldd	r24, Z+2	; 0x02
    5810:	93 81       	ldd	r25, Z+3	; 0x03
    5812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5816:	dc 01       	movw	r26, r24
    5818:	cb 01       	movw	r24, r22
    581a:	f8 01       	movw	r30, r16
    581c:	80 83       	st	Z, r24
    581e:	de 01       	movw	r26, r28
    5820:	a7 5b       	subi	r26, 0xB7	; 183
    5822:	bf 4f       	sbci	r27, 0xFF	; 255
    5824:	fe 01       	movw	r30, r28
    5826:	e8 5a       	subi	r30, 0xA8	; 168
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	80 81       	ld	r24, Z
    582c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    582e:	fe 01       	movw	r30, r28
    5830:	e7 5b       	subi	r30, 0xB7	; 183
    5832:	ff 4f       	sbci	r31, 0xFF	; 255
    5834:	80 81       	ld	r24, Z
    5836:	8a 95       	dec	r24
    5838:	f1 f7       	brne	.-4      	; 0x5836 <lcd_displayCharacter+0x998>
    583a:	fe 01       	movw	r30, r28
    583c:	e7 5b       	subi	r30, 0xB7	; 183
    583e:	ff 4f       	sbci	r31, 0xFF	; 255
    5840:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	61 e0       	ldi	r22, 0x01	; 1
    5846:	41 e0       	ldi	r20, 0x01	; 1
    5848:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    584c:	fe 01       	movw	r30, r28
    584e:	eb 5b       	subi	r30, 0xBB	; 187
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	a8 e4       	ldi	r26, 0x48	; 72
    5858:	b2 e4       	ldi	r27, 0x42	; 66
    585a:	80 83       	st	Z, r24
    585c:	91 83       	std	Z+1, r25	; 0x01
    585e:	a2 83       	std	Z+2, r26	; 0x02
    5860:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5862:	8e 01       	movw	r16, r28
    5864:	0f 5b       	subi	r16, 0xBF	; 191
    5866:	1f 4f       	sbci	r17, 0xFF	; 255
    5868:	fe 01       	movw	r30, r28
    586a:	eb 5b       	subi	r30, 0xBB	; 187
    586c:	ff 4f       	sbci	r31, 0xFF	; 255
    586e:	60 81       	ld	r22, Z
    5870:	71 81       	ldd	r23, Z+1	; 0x01
    5872:	82 81       	ldd	r24, Z+2	; 0x02
    5874:	93 81       	ldd	r25, Z+3	; 0x03
    5876:	2b ea       	ldi	r18, 0xAB	; 171
    5878:	3a ea       	ldi	r19, 0xAA	; 170
    587a:	4a ea       	ldi	r20, 0xAA	; 170
    587c:	5e e3       	ldi	r21, 0x3E	; 62
    587e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5882:	dc 01       	movw	r26, r24
    5884:	cb 01       	movw	r24, r22
    5886:	f8 01       	movw	r30, r16
    5888:	80 83       	st	Z, r24
    588a:	91 83       	std	Z+1, r25	; 0x01
    588c:	a2 83       	std	Z+2, r26	; 0x02
    588e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5890:	fe 01       	movw	r30, r28
    5892:	ef 5b       	subi	r30, 0xBF	; 191
    5894:	ff 4f       	sbci	r31, 0xFF	; 255
    5896:	60 81       	ld	r22, Z
    5898:	71 81       	ldd	r23, Z+1	; 0x01
    589a:	82 81       	ldd	r24, Z+2	; 0x02
    589c:	93 81       	ldd	r25, Z+3	; 0x03
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e8       	ldi	r20, 0x80	; 128
    58a4:	5f e3       	ldi	r21, 0x3F	; 63
    58a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58aa:	88 23       	and	r24, r24
    58ac:	34 f4       	brge	.+12     	; 0x58ba <lcd_displayCharacter+0xa1c>
		__ticks = 1;
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	fe 01       	movw	r30, r28
    58b2:	e0 5c       	subi	r30, 0xC0	; 192
    58b4:	ff 4f       	sbci	r31, 0xFF	; 255
    58b6:	80 83       	st	Z, r24
    58b8:	9d c0       	rjmp	.+314    	; 0x59f4 <lcd_displayCharacter+0xb56>
	else if (__tmp > 255)
    58ba:	fe 01       	movw	r30, r28
    58bc:	ef 5b       	subi	r30, 0xBF	; 191
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
    58c0:	60 81       	ld	r22, Z
    58c2:	71 81       	ldd	r23, Z+1	; 0x01
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	93 81       	ldd	r25, Z+3	; 0x03
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	4f e7       	ldi	r20, 0x7F	; 127
    58ce:	53 e4       	ldi	r21, 0x43	; 67
    58d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58d4:	18 16       	cp	r1, r24
    58d6:	0c f0       	brlt	.+2      	; 0x58da <lcd_displayCharacter+0xa3c>
    58d8:	7e c0       	rjmp	.+252    	; 0x59d6 <lcd_displayCharacter+0xb38>
	{
		_delay_ms(__us / 1000.0);
    58da:	fe 01       	movw	r30, r28
    58dc:	eb 5b       	subi	r30, 0xBB	; 187
    58de:	ff 4f       	sbci	r31, 0xFF	; 255
    58e0:	60 81       	ld	r22, Z
    58e2:	71 81       	ldd	r23, Z+1	; 0x01
    58e4:	82 81       	ldd	r24, Z+2	; 0x02
    58e6:	93 81       	ldd	r25, Z+3	; 0x03
    58e8:	20 e0       	ldi	r18, 0x00	; 0
    58ea:	30 e0       	ldi	r19, 0x00	; 0
    58ec:	4a e7       	ldi	r20, 0x7A	; 122
    58ee:	54 e4       	ldi	r21, 0x44	; 68
    58f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    58f4:	dc 01       	movw	r26, r24
    58f6:	cb 01       	movw	r24, r22
    58f8:	8c af       	std	Y+60, r24	; 0x3c
    58fa:	9d af       	std	Y+61, r25	; 0x3d
    58fc:	ae af       	std	Y+62, r26	; 0x3e
    58fe:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5900:	6c ad       	ldd	r22, Y+60	; 0x3c
    5902:	7d ad       	ldd	r23, Y+61	; 0x3d
    5904:	8e ad       	ldd	r24, Y+62	; 0x3e
    5906:	9f ad       	ldd	r25, Y+63	; 0x3f
    5908:	20 e0       	ldi	r18, 0x00	; 0
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	4a e7       	ldi	r20, 0x7A	; 122
    590e:	53 e4       	ldi	r21, 0x43	; 67
    5910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	88 af       	std	Y+56, r24	; 0x38
    591a:	99 af       	std	Y+57, r25	; 0x39
    591c:	aa af       	std	Y+58, r26	; 0x3a
    591e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    5920:	68 ad       	ldd	r22, Y+56	; 0x38
    5922:	79 ad       	ldd	r23, Y+57	; 0x39
    5924:	8a ad       	ldd	r24, Y+58	; 0x3a
    5926:	9b ad       	ldd	r25, Y+59	; 0x3b
    5928:	20 e0       	ldi	r18, 0x00	; 0
    592a:	30 e0       	ldi	r19, 0x00	; 0
    592c:	40 e8       	ldi	r20, 0x80	; 128
    592e:	5f e3       	ldi	r21, 0x3F	; 63
    5930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5934:	88 23       	and	r24, r24
    5936:	2c f4       	brge	.+10     	; 0x5942 <lcd_displayCharacter+0xaa4>
		__ticks = 1;
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	9f ab       	std	Y+55, r25	; 0x37
    593e:	8e ab       	std	Y+54, r24	; 0x36
    5940:	3f c0       	rjmp	.+126    	; 0x59c0 <lcd_displayCharacter+0xb22>
	else if (__tmp > 65535)
    5942:	68 ad       	ldd	r22, Y+56	; 0x38
    5944:	79 ad       	ldd	r23, Y+57	; 0x39
    5946:	8a ad       	ldd	r24, Y+58	; 0x3a
    5948:	9b ad       	ldd	r25, Y+59	; 0x3b
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	3f ef       	ldi	r19, 0xFF	; 255
    594e:	4f e7       	ldi	r20, 0x7F	; 127
    5950:	57 e4       	ldi	r21, 0x47	; 71
    5952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5956:	18 16       	cp	r1, r24
    5958:	4c f5       	brge	.+82     	; 0x59ac <lcd_displayCharacter+0xb0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    595a:	6c ad       	ldd	r22, Y+60	; 0x3c
    595c:	7d ad       	ldd	r23, Y+61	; 0x3d
    595e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5960:	9f ad       	ldd	r25, Y+63	; 0x3f
    5962:	20 e0       	ldi	r18, 0x00	; 0
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	40 e2       	ldi	r20, 0x20	; 32
    5968:	51 e4       	ldi	r21, 0x41	; 65
    596a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    596e:	dc 01       	movw	r26, r24
    5970:	cb 01       	movw	r24, r22
    5972:	bc 01       	movw	r22, r24
    5974:	cd 01       	movw	r24, r26
    5976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	9f ab       	std	Y+55, r25	; 0x37
    5980:	8e ab       	std	Y+54, r24	; 0x36
    5982:	0f c0       	rjmp	.+30     	; 0x59a2 <lcd_displayCharacter+0xb04>
    5984:	89 e1       	ldi	r24, 0x19	; 25
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	9d ab       	std	Y+53, r25	; 0x35
    598a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    598c:	8c a9       	ldd	r24, Y+52	; 0x34
    598e:	9d a9       	ldd	r25, Y+53	; 0x35
    5990:	01 97       	sbiw	r24, 0x01	; 1
    5992:	f1 f7       	brne	.-4      	; 0x5990 <lcd_displayCharacter+0xaf2>
    5994:	9d ab       	std	Y+53, r25	; 0x35
    5996:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5998:	8e a9       	ldd	r24, Y+54	; 0x36
    599a:	9f a9       	ldd	r25, Y+55	; 0x37
    599c:	01 97       	sbiw	r24, 0x01	; 1
    599e:	9f ab       	std	Y+55, r25	; 0x37
    59a0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59a2:	8e a9       	ldd	r24, Y+54	; 0x36
    59a4:	9f a9       	ldd	r25, Y+55	; 0x37
    59a6:	00 97       	sbiw	r24, 0x00	; 0
    59a8:	69 f7       	brne	.-38     	; 0x5984 <lcd_displayCharacter+0xae6>
    59aa:	2d c0       	rjmp	.+90     	; 0x5a06 <lcd_displayCharacter+0xb68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59ac:	68 ad       	ldd	r22, Y+56	; 0x38
    59ae:	79 ad       	ldd	r23, Y+57	; 0x39
    59b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    59b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    59b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	9f ab       	std	Y+55, r25	; 0x37
    59be:	8e ab       	std	Y+54, r24	; 0x36
    59c0:	8e a9       	ldd	r24, Y+54	; 0x36
    59c2:	9f a9       	ldd	r25, Y+55	; 0x37
    59c4:	9b ab       	std	Y+51, r25	; 0x33
    59c6:	8a ab       	std	Y+50, r24	; 0x32
    59c8:	8a a9       	ldd	r24, Y+50	; 0x32
    59ca:	9b a9       	ldd	r25, Y+51	; 0x33
    59cc:	01 97       	sbiw	r24, 0x01	; 1
    59ce:	f1 f7       	brne	.-4      	; 0x59cc <lcd_displayCharacter+0xb2e>
    59d0:	9b ab       	std	Y+51, r25	; 0x33
    59d2:	8a ab       	std	Y+50, r24	; 0x32
    59d4:	18 c0       	rjmp	.+48     	; 0x5a06 <lcd_displayCharacter+0xb68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    59d6:	fe 01       	movw	r30, r28
    59d8:	ef 5b       	subi	r30, 0xBF	; 191
    59da:	ff 4f       	sbci	r31, 0xFF	; 255
    59dc:	60 81       	ld	r22, Z
    59de:	71 81       	ldd	r23, Z+1	; 0x01
    59e0:	82 81       	ldd	r24, Z+2	; 0x02
    59e2:	93 81       	ldd	r25, Z+3	; 0x03
    59e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59e8:	dc 01       	movw	r26, r24
    59ea:	cb 01       	movw	r24, r22
    59ec:	fe 01       	movw	r30, r28
    59ee:	e0 5c       	subi	r30, 0xC0	; 192
    59f0:	ff 4f       	sbci	r31, 0xFF	; 255
    59f2:	80 83       	st	Z, r24
    59f4:	fe 01       	movw	r30, r28
    59f6:	e0 5c       	subi	r30, 0xC0	; 192
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
    59fa:	80 81       	ld	r24, Z
    59fc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    59fe:	89 a9       	ldd	r24, Y+49	; 0x31
    5a00:	8a 95       	dec	r24
    5a02:	f1 f7       	brne	.-4      	; 0x5a00 <lcd_displayCharacter+0xb62>
    5a04:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	GPIO_writePortMasked(LCD_DATA_BUS_PORT, LCD_DATA_BUS_MASK, ((character & 0x0F)) << LCD_DATA_BUS_PORT_OFFSET);
    5a06:	fe 01       	movw	r30, r28
    5a08:	e7 55       	subi	r30, 0x57	; 87
    5a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0c:	80 81       	ld	r24, Z
    5a0e:	8f 70       	andi	r24, 0x0F	; 15
    5a10:	98 2f       	mov	r25, r24
    5a12:	99 0f       	add	r25, r25
    5a14:	99 0f       	add	r25, r25
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	6c e3       	ldi	r22, 0x3C	; 60
    5a1a:	49 2f       	mov	r20, r25
    5a1c:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    5a20:	80 e0       	ldi	r24, 0x00	; 0
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	a8 e4       	ldi	r26, 0x48	; 72
    5a26:	b2 e4       	ldi	r27, 0x42	; 66
    5a28:	8d a7       	std	Y+45, r24	; 0x2d
    5a2a:	9e a7       	std	Y+46, r25	; 0x2e
    5a2c:	af a7       	std	Y+47, r26	; 0x2f
    5a2e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5a30:	6d a5       	ldd	r22, Y+45	; 0x2d
    5a32:	7e a5       	ldd	r23, Y+46	; 0x2e
    5a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a36:	98 a9       	ldd	r25, Y+48	; 0x30
    5a38:	2b ea       	ldi	r18, 0xAB	; 171
    5a3a:	3a ea       	ldi	r19, 0xAA	; 170
    5a3c:	4a ea       	ldi	r20, 0xAA	; 170
    5a3e:	5e e3       	ldi	r21, 0x3E	; 62
    5a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	89 a7       	std	Y+41, r24	; 0x29
    5a4a:	9a a7       	std	Y+42, r25	; 0x2a
    5a4c:	ab a7       	std	Y+43, r26	; 0x2b
    5a4e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5a50:	69 a5       	ldd	r22, Y+41	; 0x29
    5a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    5a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	40 e8       	ldi	r20, 0x80	; 128
    5a5e:	5f e3       	ldi	r21, 0x3F	; 63
    5a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a64:	88 23       	and	r24, r24
    5a66:	1c f4       	brge	.+6      	; 0x5a6e <lcd_displayCharacter+0xbd0>
		__ticks = 1;
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	88 a7       	std	Y+40, r24	; 0x28
    5a6c:	91 c0       	rjmp	.+290    	; 0x5b90 <lcd_displayCharacter+0xcf2>
	else if (__tmp > 255)
    5a6e:	69 a5       	ldd	r22, Y+41	; 0x29
    5a70:	7a a5       	ldd	r23, Y+42	; 0x2a
    5a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	4f e7       	ldi	r20, 0x7F	; 127
    5a7c:	53 e4       	ldi	r21, 0x43	; 67
    5a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a82:	18 16       	cp	r1, r24
    5a84:	0c f0       	brlt	.+2      	; 0x5a88 <lcd_displayCharacter+0xbea>
    5a86:	7b c0       	rjmp	.+246    	; 0x5b7e <lcd_displayCharacter+0xce0>
	{
		_delay_ms(__us / 1000.0);
    5a88:	6d a5       	ldd	r22, Y+45	; 0x2d
    5a8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    5a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	4a e7       	ldi	r20, 0x7A	; 122
    5a96:	54 e4       	ldi	r21, 0x44	; 68
    5a98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	8c a3       	std	Y+36, r24	; 0x24
    5aa2:	9d a3       	std	Y+37, r25	; 0x25
    5aa4:	ae a3       	std	Y+38, r26	; 0x26
    5aa6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aa8:	6c a1       	ldd	r22, Y+36	; 0x24
    5aaa:	7d a1       	ldd	r23, Y+37	; 0x25
    5aac:	8e a1       	ldd	r24, Y+38	; 0x26
    5aae:	9f a1       	ldd	r25, Y+39	; 0x27
    5ab0:	20 e0       	ldi	r18, 0x00	; 0
    5ab2:	30 e0       	ldi	r19, 0x00	; 0
    5ab4:	4a e7       	ldi	r20, 0x7A	; 122
    5ab6:	53 e4       	ldi	r21, 0x43	; 67
    5ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5abc:	dc 01       	movw	r26, r24
    5abe:	cb 01       	movw	r24, r22
    5ac0:	88 a3       	std	Y+32, r24	; 0x20
    5ac2:	99 a3       	std	Y+33, r25	; 0x21
    5ac4:	aa a3       	std	Y+34, r26	; 0x22
    5ac6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5ac8:	68 a1       	ldd	r22, Y+32	; 0x20
    5aca:	79 a1       	ldd	r23, Y+33	; 0x21
    5acc:	8a a1       	ldd	r24, Y+34	; 0x22
    5ace:	9b a1       	ldd	r25, Y+35	; 0x23
    5ad0:	20 e0       	ldi	r18, 0x00	; 0
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	40 e8       	ldi	r20, 0x80	; 128
    5ad6:	5f e3       	ldi	r21, 0x3F	; 63
    5ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5adc:	88 23       	and	r24, r24
    5ade:	2c f4       	brge	.+10     	; 0x5aea <lcd_displayCharacter+0xc4c>
		__ticks = 1;
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	9f 8f       	std	Y+31, r25	; 0x1f
    5ae6:	8e 8f       	std	Y+30, r24	; 0x1e
    5ae8:	3f c0       	rjmp	.+126    	; 0x5b68 <lcd_displayCharacter+0xcca>
	else if (__tmp > 65535)
    5aea:	68 a1       	ldd	r22, Y+32	; 0x20
    5aec:	79 a1       	ldd	r23, Y+33	; 0x21
    5aee:	8a a1       	ldd	r24, Y+34	; 0x22
    5af0:	9b a1       	ldd	r25, Y+35	; 0x23
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	3f ef       	ldi	r19, 0xFF	; 255
    5af6:	4f e7       	ldi	r20, 0x7F	; 127
    5af8:	57 e4       	ldi	r21, 0x47	; 71
    5afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5afe:	18 16       	cp	r1, r24
    5b00:	4c f5       	brge	.+82     	; 0x5b54 <lcd_displayCharacter+0xcb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b02:	6c a1       	ldd	r22, Y+36	; 0x24
    5b04:	7d a1       	ldd	r23, Y+37	; 0x25
    5b06:	8e a1       	ldd	r24, Y+38	; 0x26
    5b08:	9f a1       	ldd	r25, Y+39	; 0x27
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	40 e2       	ldi	r20, 0x20	; 32
    5b10:	51 e4       	ldi	r21, 0x41	; 65
    5b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	cd 01       	movw	r24, r26
    5b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b22:	dc 01       	movw	r26, r24
    5b24:	cb 01       	movw	r24, r22
    5b26:	9f 8f       	std	Y+31, r25	; 0x1f
    5b28:	8e 8f       	std	Y+30, r24	; 0x1e
    5b2a:	0f c0       	rjmp	.+30     	; 0x5b4a <lcd_displayCharacter+0xcac>
    5b2c:	89 e1       	ldi	r24, 0x19	; 25
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	9d 8f       	std	Y+29, r25	; 0x1d
    5b32:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5b38:	01 97       	sbiw	r24, 0x01	; 1
    5b3a:	f1 f7       	brne	.-4      	; 0x5b38 <lcd_displayCharacter+0xc9a>
    5b3c:	9d 8f       	std	Y+29, r25	; 0x1d
    5b3e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5b44:	01 97       	sbiw	r24, 0x01	; 1
    5b46:	9f 8f       	std	Y+31, r25	; 0x1f
    5b48:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5b4e:	00 97       	sbiw	r24, 0x00	; 0
    5b50:	69 f7       	brne	.-38     	; 0x5b2c <lcd_displayCharacter+0xc8e>
    5b52:	24 c0       	rjmp	.+72     	; 0x5b9c <lcd_displayCharacter+0xcfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b54:	68 a1       	ldd	r22, Y+32	; 0x20
    5b56:	79 a1       	ldd	r23, Y+33	; 0x21
    5b58:	8a a1       	ldd	r24, Y+34	; 0x22
    5b5a:	9b a1       	ldd	r25, Y+35	; 0x23
    5b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	9f 8f       	std	Y+31, r25	; 0x1f
    5b66:	8e 8f       	std	Y+30, r24	; 0x1e
    5b68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5b6c:	9b 8f       	std	Y+27, r25	; 0x1b
    5b6e:	8a 8f       	std	Y+26, r24	; 0x1a
    5b70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5b72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b74:	01 97       	sbiw	r24, 0x01	; 1
    5b76:	f1 f7       	brne	.-4      	; 0x5b74 <lcd_displayCharacter+0xcd6>
    5b78:	9b 8f       	std	Y+27, r25	; 0x1b
    5b7a:	8a 8f       	std	Y+26, r24	; 0x1a
    5b7c:	0f c0       	rjmp	.+30     	; 0x5b9c <lcd_displayCharacter+0xcfe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5b7e:	69 a5       	ldd	r22, Y+41	; 0x29
    5b80:	7a a5       	ldd	r23, Y+42	; 0x2a
    5b82:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b84:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	88 a7       	std	Y+40, r24	; 0x28
    5b90:	88 a5       	ldd	r24, Y+40	; 0x28
    5b92:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5b94:	89 8d       	ldd	r24, Y+25	; 0x19
    5b96:	8a 95       	dec	r24
    5b98:	f1 f7       	brne	.-4      	; 0x5b96 <lcd_displayCharacter+0xcf8>
    5b9a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    5b9c:	80 e0       	ldi	r24, 0x00	; 0
    5b9e:	61 e0       	ldi	r22, 0x01	; 1
    5ba0:	40 e0       	ldi	r20, 0x00	; 0
    5ba2:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_writePin>
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	a8 e4       	ldi	r26, 0x48	; 72
    5bac:	b2 e4       	ldi	r27, 0x42	; 66
    5bae:	8d 8b       	std	Y+21, r24	; 0x15
    5bb0:	9e 8b       	std	Y+22, r25	; 0x16
    5bb2:	af 8b       	std	Y+23, r26	; 0x17
    5bb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    5bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    5bba:	8f 89       	ldd	r24, Y+23	; 0x17
    5bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    5bbe:	2b ea       	ldi	r18, 0xAB	; 171
    5bc0:	3a ea       	ldi	r19, 0xAA	; 170
    5bc2:	4a ea       	ldi	r20, 0xAA	; 170
    5bc4:	5e e3       	ldi	r21, 0x3E	; 62
    5bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bca:	dc 01       	movw	r26, r24
    5bcc:	cb 01       	movw	r24, r22
    5bce:	89 8b       	std	Y+17, r24	; 0x11
    5bd0:	9a 8b       	std	Y+18, r25	; 0x12
    5bd2:	ab 8b       	std	Y+19, r26	; 0x13
    5bd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5bd6:	69 89       	ldd	r22, Y+17	; 0x11
    5bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    5bda:	8b 89       	ldd	r24, Y+19	; 0x13
    5bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    5bde:	20 e0       	ldi	r18, 0x00	; 0
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	40 e8       	ldi	r20, 0x80	; 128
    5be4:	5f e3       	ldi	r21, 0x3F	; 63
    5be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bea:	88 23       	and	r24, r24
    5bec:	1c f4       	brge	.+6      	; 0x5bf4 <lcd_displayCharacter+0xd56>
		__ticks = 1;
    5bee:	81 e0       	ldi	r24, 0x01	; 1
    5bf0:	88 8b       	std	Y+16, r24	; 0x10
    5bf2:	91 c0       	rjmp	.+290    	; 0x5d16 <lcd_displayCharacter+0xe78>
	else if (__tmp > 255)
    5bf4:	69 89       	ldd	r22, Y+17	; 0x11
    5bf6:	7a 89       	ldd	r23, Y+18	; 0x12
    5bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    5bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	4f e7       	ldi	r20, 0x7F	; 127
    5c02:	53 e4       	ldi	r21, 0x43	; 67
    5c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c08:	18 16       	cp	r1, r24
    5c0a:	0c f0       	brlt	.+2      	; 0x5c0e <lcd_displayCharacter+0xd70>
    5c0c:	7b c0       	rjmp	.+246    	; 0x5d04 <lcd_displayCharacter+0xe66>
	{
		_delay_ms(__us / 1000.0);
    5c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    5c10:	7e 89       	ldd	r23, Y+22	; 0x16
    5c12:	8f 89       	ldd	r24, Y+23	; 0x17
    5c14:	98 8d       	ldd	r25, Y+24	; 0x18
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	4a e7       	ldi	r20, 0x7A	; 122
    5c1c:	54 e4       	ldi	r21, 0x44	; 68
    5c1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	8c 87       	std	Y+12, r24	; 0x0c
    5c28:	9d 87       	std	Y+13, r25	; 0x0d
    5c2a:	ae 87       	std	Y+14, r26	; 0x0e
    5c2c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c30:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c32:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c34:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	4a e7       	ldi	r20, 0x7A	; 122
    5c3c:	53 e4       	ldi	r21, 0x43	; 67
    5c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c42:	dc 01       	movw	r26, r24
    5c44:	cb 01       	movw	r24, r22
    5c46:	88 87       	std	Y+8, r24	; 0x08
    5c48:	99 87       	std	Y+9, r25	; 0x09
    5c4a:	aa 87       	std	Y+10, r26	; 0x0a
    5c4c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5c4e:	68 85       	ldd	r22, Y+8	; 0x08
    5c50:	79 85       	ldd	r23, Y+9	; 0x09
    5c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c54:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c56:	20 e0       	ldi	r18, 0x00	; 0
    5c58:	30 e0       	ldi	r19, 0x00	; 0
    5c5a:	40 e8       	ldi	r20, 0x80	; 128
    5c5c:	5f e3       	ldi	r21, 0x3F	; 63
    5c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c62:	88 23       	and	r24, r24
    5c64:	2c f4       	brge	.+10     	; 0x5c70 <lcd_displayCharacter+0xdd2>
		__ticks = 1;
    5c66:	81 e0       	ldi	r24, 0x01	; 1
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	9f 83       	std	Y+7, r25	; 0x07
    5c6c:	8e 83       	std	Y+6, r24	; 0x06
    5c6e:	3f c0       	rjmp	.+126    	; 0x5cee <lcd_displayCharacter+0xe50>
	else if (__tmp > 65535)
    5c70:	68 85       	ldd	r22, Y+8	; 0x08
    5c72:	79 85       	ldd	r23, Y+9	; 0x09
    5c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	3f ef       	ldi	r19, 0xFF	; 255
    5c7c:	4f e7       	ldi	r20, 0x7F	; 127
    5c7e:	57 e4       	ldi	r21, 0x47	; 71
    5c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c84:	18 16       	cp	r1, r24
    5c86:	4c f5       	brge	.+82     	; 0x5cda <lcd_displayCharacter+0xe3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c88:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	40 e2       	ldi	r20, 0x20	; 32
    5c96:	51 e4       	ldi	r21, 0x41	; 65
    5c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	bc 01       	movw	r22, r24
    5ca2:	cd 01       	movw	r24, r26
    5ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ca8:	dc 01       	movw	r26, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	9f 83       	std	Y+7, r25	; 0x07
    5cae:	8e 83       	std	Y+6, r24	; 0x06
    5cb0:	0f c0       	rjmp	.+30     	; 0x5cd0 <lcd_displayCharacter+0xe32>
    5cb2:	89 e1       	ldi	r24, 0x19	; 25
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	9d 83       	std	Y+5, r25	; 0x05
    5cb8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5cba:	8c 81       	ldd	r24, Y+4	; 0x04
    5cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    5cbe:	01 97       	sbiw	r24, 0x01	; 1
    5cc0:	f1 f7       	brne	.-4      	; 0x5cbe <lcd_displayCharacter+0xe20>
    5cc2:	9d 83       	std	Y+5, r25	; 0x05
    5cc4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    5cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    5cca:	01 97       	sbiw	r24, 0x01	; 1
    5ccc:	9f 83       	std	Y+7, r25	; 0x07
    5cce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    5cd2:	9f 81       	ldd	r25, Y+7	; 0x07
    5cd4:	00 97       	sbiw	r24, 0x00	; 0
    5cd6:	69 f7       	brne	.-38     	; 0x5cb2 <lcd_displayCharacter+0xe14>
    5cd8:	24 c0       	rjmp	.+72     	; 0x5d22 <lcd_displayCharacter+0xe84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cda:	68 85       	ldd	r22, Y+8	; 0x08
    5cdc:	79 85       	ldd	r23, Y+9	; 0x09
    5cde:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ce0:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce6:	dc 01       	movw	r26, r24
    5ce8:	cb 01       	movw	r24, r22
    5cea:	9f 83       	std	Y+7, r25	; 0x07
    5cec:	8e 83       	std	Y+6, r24	; 0x06
    5cee:	8e 81       	ldd	r24, Y+6	; 0x06
    5cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    5cf2:	9b 83       	std	Y+3, r25	; 0x03
    5cf4:	8a 83       	std	Y+2, r24	; 0x02
    5cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    5cfa:	01 97       	sbiw	r24, 0x01	; 1
    5cfc:	f1 f7       	brne	.-4      	; 0x5cfa <lcd_displayCharacter+0xe5c>
    5cfe:	9b 83       	std	Y+3, r25	; 0x03
    5d00:	8a 83       	std	Y+2, r24	; 0x02
    5d02:	0f c0       	rjmp	.+30     	; 0x5d22 <lcd_displayCharacter+0xe84>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d04:	69 89       	ldd	r22, Y+17	; 0x11
    5d06:	7a 89       	ldd	r23, Y+18	; 0x12
    5d08:	8b 89       	ldd	r24, Y+19	; 0x13
    5d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d10:	dc 01       	movw	r26, r24
    5d12:	cb 01       	movw	r24, r22
    5d14:	88 8b       	std	Y+16, r24	; 0x10
    5d16:	88 89       	ldd	r24, Y+16	; 0x10
    5d18:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d1a:	89 81       	ldd	r24, Y+1	; 0x01
    5d1c:	8a 95       	dec	r24
    5d1e:	f1 f7       	brne	.-4      	; 0x5d1c <lcd_displayCharacter+0xe7e>
    5d20:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    5d22:	c7 55       	subi	r28, 0x57	; 87
    5d24:	df 4f       	sbci	r29, 0xFF	; 255
    5d26:	0f b6       	in	r0, 0x3f	; 63
    5d28:	f8 94       	cli
    5d2a:	de bf       	out	0x3e, r29	; 62
    5d2c:	0f be       	out	0x3f, r0	; 63
    5d2e:	cd bf       	out	0x3d, r28	; 61
    5d30:	cf 91       	pop	r28
    5d32:	df 91       	pop	r29
    5d34:	1f 91       	pop	r17
    5d36:	0f 91       	pop	r16
    5d38:	08 95       	ret

00005d3a <lcd_displayString>:
#endif

void lcd_displayString(const char * str){
    5d3a:	df 93       	push	r29
    5d3c:	cf 93       	push	r28
    5d3e:	00 d0       	rcall	.+0      	; 0x5d40 <lcd_displayString+0x6>
    5d40:	cd b7       	in	r28, 0x3d	; 61
    5d42:	de b7       	in	r29, 0x3e	; 62
    5d44:	9a 83       	std	Y+2, r25	; 0x02
    5d46:	89 83       	std	Y+1, r24	; 0x01
    5d48:	0a c0       	rjmp	.+20     	; 0x5d5e <lcd_displayString+0x24>
	while(*str != '\0'){
		lcd_displayCharacter(*str);
    5d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    5d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    5d4e:	80 81       	ld	r24, Z
    5d50:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <lcd_displayCharacter>
		str++;
    5d54:	89 81       	ldd	r24, Y+1	; 0x01
    5d56:	9a 81       	ldd	r25, Y+2	; 0x02
    5d58:	01 96       	adiw	r24, 0x01	; 1
    5d5a:	9a 83       	std	Y+2, r25	; 0x02
    5d5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
#endif

void lcd_displayString(const char * str){
	while(*str != '\0'){
    5d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d60:	fa 81       	ldd	r31, Y+2	; 0x02
    5d62:	80 81       	ld	r24, Z
    5d64:	88 23       	and	r24, r24
    5d66:	89 f7       	brne	.-30     	; 0x5d4a <lcd_displayString+0x10>
		lcd_displayCharacter(*str);
		str++;
	}
}
    5d68:	0f 90       	pop	r0
    5d6a:	0f 90       	pop	r0
    5d6c:	cf 91       	pop	r28
    5d6e:	df 91       	pop	r29
    5d70:	08 95       	ret

00005d72 <lcd_displaySubString>:

void lcd_displaySubString(const char * str, uint32 length){
    5d72:	df 93       	push	r29
    5d74:	cf 93       	push	r28
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	2a 97       	sbiw	r28, 0x0a	; 10
    5d7c:	0f b6       	in	r0, 0x3f	; 63
    5d7e:	f8 94       	cli
    5d80:	de bf       	out	0x3e, r29	; 62
    5d82:	0f be       	out	0x3f, r0	; 63
    5d84:	cd bf       	out	0x3d, r28	; 61
    5d86:	9e 83       	std	Y+6, r25	; 0x06
    5d88:	8d 83       	std	Y+5, r24	; 0x05
    5d8a:	4f 83       	std	Y+7, r20	; 0x07
    5d8c:	58 87       	std	Y+8, r21	; 0x08
    5d8e:	69 87       	std	Y+9, r22	; 0x09
    5d90:	7a 87       	std	Y+10, r23	; 0x0a
	uint32 temp_count = 0;
    5d92:	19 82       	std	Y+1, r1	; 0x01
    5d94:	1a 82       	std	Y+2, r1	; 0x02
    5d96:	1b 82       	std	Y+3, r1	; 0x03
    5d98:	1c 82       	std	Y+4, r1	; 0x04
    5d9a:	15 c0       	rjmp	.+42     	; 0x5dc6 <lcd_displaySubString+0x54>
	while((temp_count < length) && (*str != '\0')){
		lcd_displayCharacter(*str);
    5d9c:	ed 81       	ldd	r30, Y+5	; 0x05
    5d9e:	fe 81       	ldd	r31, Y+6	; 0x06
    5da0:	80 81       	ld	r24, Z
    5da2:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <lcd_displayCharacter>
		str++;
    5da6:	8d 81       	ldd	r24, Y+5	; 0x05
    5da8:	9e 81       	ldd	r25, Y+6	; 0x06
    5daa:	01 96       	adiw	r24, 0x01	; 1
    5dac:	9e 83       	std	Y+6, r25	; 0x06
    5dae:	8d 83       	std	Y+5, r24	; 0x05
		temp_count++;
    5db0:	89 81       	ldd	r24, Y+1	; 0x01
    5db2:	9a 81       	ldd	r25, Y+2	; 0x02
    5db4:	ab 81       	ldd	r26, Y+3	; 0x03
    5db6:	bc 81       	ldd	r27, Y+4	; 0x04
    5db8:	01 96       	adiw	r24, 0x01	; 1
    5dba:	a1 1d       	adc	r26, r1
    5dbc:	b1 1d       	adc	r27, r1
    5dbe:	89 83       	std	Y+1, r24	; 0x01
    5dc0:	9a 83       	std	Y+2, r25	; 0x02
    5dc2:	ab 83       	std	Y+3, r26	; 0x03
    5dc4:	bc 83       	std	Y+4, r27	; 0x04
	}
}

void lcd_displaySubString(const char * str, uint32 length){
	uint32 temp_count = 0;
	while((temp_count < length) && (*str != '\0')){
    5dc6:	29 81       	ldd	r18, Y+1	; 0x01
    5dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    5dca:	4b 81       	ldd	r20, Y+3	; 0x03
    5dcc:	5c 81       	ldd	r21, Y+4	; 0x04
    5dce:	8f 81       	ldd	r24, Y+7	; 0x07
    5dd0:	98 85       	ldd	r25, Y+8	; 0x08
    5dd2:	a9 85       	ldd	r26, Y+9	; 0x09
    5dd4:	ba 85       	ldd	r27, Y+10	; 0x0a
    5dd6:	28 17       	cp	r18, r24
    5dd8:	39 07       	cpc	r19, r25
    5dda:	4a 07       	cpc	r20, r26
    5ddc:	5b 07       	cpc	r21, r27
    5dde:	28 f4       	brcc	.+10     	; 0x5dea <lcd_displaySubString+0x78>
    5de0:	ed 81       	ldd	r30, Y+5	; 0x05
    5de2:	fe 81       	ldd	r31, Y+6	; 0x06
    5de4:	80 81       	ld	r24, Z
    5de6:	88 23       	and	r24, r24
    5de8:	c9 f6       	brne	.-78     	; 0x5d9c <lcd_displaySubString+0x2a>
		lcd_displayCharacter(*str);
		str++;
		temp_count++;
	}
}
    5dea:	2a 96       	adiw	r28, 0x0a	; 10
    5dec:	0f b6       	in	r0, 0x3f	; 63
    5dee:	f8 94       	cli
    5df0:	de bf       	out	0x3e, r29	; 62
    5df2:	0f be       	out	0x3f, r0	; 63
    5df4:	cd bf       	out	0x3d, r28	; 61
    5df6:	cf 91       	pop	r28
    5df8:	df 91       	pop	r29
    5dfa:	08 95       	ret

00005dfc <lcd_setPosition>:

void lcd_setPosition(uint8 row, uint8 col){
    5dfc:	df 93       	push	r29
    5dfe:	cf 93       	push	r28
    5e00:	00 d0       	rcall	.+0      	; 0x5e02 <lcd_setPosition+0x6>
    5e02:	00 d0       	rcall	.+0      	; 0x5e04 <lcd_setPosition+0x8>
    5e04:	0f 92       	push	r0
    5e06:	cd b7       	in	r28, 0x3d	; 61
    5e08:	de b7       	in	r29, 0x3e	; 62
    5e0a:	8a 83       	std	Y+2, r24	; 0x02
    5e0c:	6b 83       	std	Y+3, r22	; 0x03
    5e0e:	06 c0       	rjmp	.+12     	; 0x5e1c <lcd_setPosition+0x20>
	while(col > 15){
		col -= 16;
    5e10:	8b 81       	ldd	r24, Y+3	; 0x03
    5e12:	80 51       	subi	r24, 0x10	; 16
    5e14:	8b 83       	std	Y+3, r24	; 0x03
		row++;
    5e16:	8a 81       	ldd	r24, Y+2	; 0x02
    5e18:	8f 5f       	subi	r24, 0xFF	; 255
    5e1a:	8a 83       	std	Y+2, r24	; 0x02
		temp_count++;
	}
}

void lcd_setPosition(uint8 row, uint8 col){
	while(col > 15){
    5e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1e:	80 31       	cpi	r24, 0x10	; 16
    5e20:	b8 f7       	brcc	.-18     	; 0x5e10 <lcd_setPosition+0x14>
		col -= 16;
		row++;
	}
	if((row < 4)&&(col < 16)){
    5e22:	8a 81       	ldd	r24, Y+2	; 0x02
    5e24:	84 30       	cpi	r24, 0x04	; 4
    5e26:	08 f0       	brcs	.+2      	; 0x5e2a <lcd_setPosition+0x2e>
    5e28:	40 c0       	rjmp	.+128    	; 0x5eaa <lcd_setPosition+0xae>
    5e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2c:	80 31       	cpi	r24, 0x10	; 16
    5e2e:	e8 f5       	brcc	.+122    	; 0x5eaa <lcd_setPosition+0xae>
		uint8 address;
		switch(row){
    5e30:	8a 81       	ldd	r24, Y+2	; 0x02
    5e32:	28 2f       	mov	r18, r24
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	3d 83       	std	Y+5, r19	; 0x05
    5e38:	2c 83       	std	Y+4, r18	; 0x04
    5e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    5e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    5e3e:	81 30       	cpi	r24, 0x01	; 1
    5e40:	91 05       	cpc	r25, r1
    5e42:	e1 f0       	breq	.+56     	; 0x5e7c <lcd_setPosition+0x80>
    5e44:	2c 81       	ldd	r18, Y+4	; 0x04
    5e46:	3d 81       	ldd	r19, Y+5	; 0x05
    5e48:	22 30       	cpi	r18, 0x02	; 2
    5e4a:	31 05       	cpc	r19, r1
    5e4c:	2c f4       	brge	.+10     	; 0x5e58 <lcd_setPosition+0x5c>
    5e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    5e50:	9d 81       	ldd	r25, Y+5	; 0x05
    5e52:	00 97       	sbiw	r24, 0x00	; 0
    5e54:	61 f0       	breq	.+24     	; 0x5e6e <lcd_setPosition+0x72>
    5e56:	29 c0       	rjmp	.+82     	; 0x5eaa <lcd_setPosition+0xae>
    5e58:	2c 81       	ldd	r18, Y+4	; 0x04
    5e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    5e5c:	22 30       	cpi	r18, 0x02	; 2
    5e5e:	31 05       	cpc	r19, r1
    5e60:	a9 f0       	breq	.+42     	; 0x5e8c <lcd_setPosition+0x90>
    5e62:	8c 81       	ldd	r24, Y+4	; 0x04
    5e64:	9d 81       	ldd	r25, Y+5	; 0x05
    5e66:	83 30       	cpi	r24, 0x03	; 3
    5e68:	91 05       	cpc	r25, r1
    5e6a:	c1 f0       	breq	.+48     	; 0x5e9c <lcd_setPosition+0xa0>
    5e6c:	1e c0       	rjmp	.+60     	; 0x5eaa <lcd_setPosition+0xae>
			case 0:
				address = (0x00 + col)|0x80;
    5e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e70:	80 68       	ori	r24, 0x80	; 128
    5e72:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    5e74:	89 81       	ldd	r24, Y+1	; 0x01
    5e76:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
    5e7a:	17 c0       	rjmp	.+46     	; 0x5eaa <lcd_setPosition+0xae>
				break;
			case 1:
				address = (0x40 + col)|0x80;
    5e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e7e:	80 5c       	subi	r24, 0xC0	; 192
    5e80:	80 68       	ori	r24, 0x80	; 128
    5e82:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
    5e8a:	0f c0       	rjmp	.+30     	; 0x5eaa <lcd_setPosition+0xae>
				break;
			case 2:
				address = (0x10 + col)|0x80;
    5e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e8e:	80 5f       	subi	r24, 0xF0	; 240
    5e90:	80 68       	ori	r24, 0x80	; 128
    5e92:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    5e94:	89 81       	ldd	r24, Y+1	; 0x01
    5e96:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
    5e9a:	07 c0       	rjmp	.+14     	; 0x5eaa <lcd_setPosition+0xae>
				break;
			case 3:
				address = (0x50 + col)|0x80;
    5e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e9e:	80 5b       	subi	r24, 0xB0	; 176
    5ea0:	80 68       	ori	r24, 0x80	; 128
    5ea2:	89 83       	std	Y+1, r24	; 0x01
				lcd_sendCommand(address);
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_sendCommand>
				break;
		}
	}
}
    5eaa:	0f 90       	pop	r0
    5eac:	0f 90       	pop	r0
    5eae:	0f 90       	pop	r0
    5eb0:	0f 90       	pop	r0
    5eb2:	0f 90       	pop	r0
    5eb4:	cf 91       	pop	r28
    5eb6:	df 91       	pop	r29
    5eb8:	08 95       	ret

00005eba <lcd_displayNumber>:

void lcd_displayNumber(sint32 number){
    5eba:	df 93       	push	r29
    5ebc:	cf 93       	push	r28
    5ebe:	cd b7       	in	r28, 0x3d	; 61
    5ec0:	de b7       	in	r29, 0x3e	; 62
    5ec2:	64 97       	sbiw	r28, 0x14	; 20
    5ec4:	0f b6       	in	r0, 0x3f	; 63
    5ec6:	f8 94       	cli
    5ec8:	de bf       	out	0x3e, r29	; 62
    5eca:	0f be       	out	0x3f, r0	; 63
    5ecc:	cd bf       	out	0x3d, r28	; 61
    5ece:	69 8b       	std	Y+17, r22	; 0x11
    5ed0:	7a 8b       	std	Y+18, r23	; 0x12
    5ed2:	8b 8b       	std	Y+19, r24	; 0x13
    5ed4:	9c 8b       	std	Y+20, r25	; 0x14
	char strBuffer[16];
	ltoa(number, strBuffer, 10);
    5ed6:	89 89       	ldd	r24, Y+17	; 0x11
    5ed8:	9a 89       	ldd	r25, Y+18	; 0x12
    5eda:	ab 89       	ldd	r26, Y+19	; 0x13
    5edc:	bc 89       	ldd	r27, Y+20	; 0x14
    5ede:	bc 01       	movw	r22, r24
    5ee0:	cd 01       	movw	r24, r26
    5ee2:	9e 01       	movw	r18, r28
    5ee4:	2f 5f       	subi	r18, 0xFF	; 255
    5ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ee8:	a9 01       	movw	r20, r18
    5eea:	2a e0       	ldi	r18, 0x0A	; 10
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	0e 94 3b 32 	call	0x6476	; 0x6476 <ltoa>
	lcd_displayString(strBuffer);
    5ef2:	ce 01       	movw	r24, r28
    5ef4:	01 96       	adiw	r24, 0x01	; 1
    5ef6:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <lcd_displayString>
}
    5efa:	64 96       	adiw	r28, 0x14	; 20
    5efc:	0f b6       	in	r0, 0x3f	; 63
    5efe:	f8 94       	cli
    5f00:	de bf       	out	0x3e, r29	; 62
    5f02:	0f be       	out	0x3f, r0	; 63
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	cf 91       	pop	r28
    5f08:	df 91       	pop	r29
    5f0a:	08 95       	ret

00005f0c <keypad_init>:
		'1', '2', '3', '-', 'C', '0', '=', '+'};
#elif KEYPAD_TYPE == ETAMINI32_KEYPAD
uint8 keypad_keys_map[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#endif

void keypad_init(void){
    5f0c:	df 93       	push	r29
    5f0e:	cf 93       	push	r28
    5f10:	0f 92       	push	r0
    5f12:	cd b7       	in	r28, 0x3d	; 61
    5f14:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	/*Set keypad pins as output*/
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
    5f16:	84 e0       	ldi	r24, 0x04	; 4
    5f18:	89 83       	std	Y+1, r24	; 0x01
    5f1a:	08 c0       	rjmp	.+16     	; 0x5f2c <keypad_init+0x20>
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	69 81       	ldd	r22, Y+1	; 0x01
    5f20:	41 e0       	ldi	r20, 0x01	; 1
    5f22:	0e 94 a6 08 	call	0x114c	; 0x114c <GPIO_setupPinDirection>
#endif

void keypad_init(void){
	uint8 counter;
	/*Set keypad pins as output*/
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
    5f26:	89 81       	ldd	r24, Y+1	; 0x01
    5f28:	8f 5f       	subi	r24, 0xFF	; 255
    5f2a:	89 83       	std	Y+1, r24	; 0x01
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
    5f2e:	88 30       	cpi	r24, 0x08	; 8
    5f30:	a8 f3       	brcs	.-22     	; 0x5f1c <keypad_init+0x10>
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
	}

	/*set keypad columns as input*/
	for(counter = KEYPAD_COLS_OFFSET; counter < KEYPAD_COLS_COUNT + KEYPAD_COLS_OFFSET; counter++){
    5f32:	82 e0       	ldi	r24, 0x02	; 2
    5f34:	89 83       	std	Y+1, r24	; 0x01
    5f36:	08 c0       	rjmp	.+16     	; 0x5f48 <keypad_init+0x3c>
		GPIO_setupPinDirection(KEYPAD_COLS_PORT, counter, PIN_INPUT);
    5f38:	83 e0       	ldi	r24, 0x03	; 3
    5f3a:	69 81       	ldd	r22, Y+1	; 0x01
    5f3c:	40 e0       	ldi	r20, 0x00	; 0
    5f3e:	0e 94 a6 08 	call	0x114c	; 0x114c <GPIO_setupPinDirection>
	for(counter = KEYPAD_ROWS_OFFSET; counter < KEYPAD_ROWS_COUNT + KEYPAD_ROWS_OFFSET; counter++){
		GPIO_setupPinDirection(KEYPAD_ROWS_PORT, counter, PIN_OUTPUT);
	}

	/*set keypad columns as input*/
	for(counter = KEYPAD_COLS_OFFSET; counter < KEYPAD_COLS_COUNT + KEYPAD_COLS_OFFSET; counter++){
    5f42:	89 81       	ldd	r24, Y+1	; 0x01
    5f44:	8f 5f       	subi	r24, 0xFF	; 255
    5f46:	89 83       	std	Y+1, r24	; 0x01
    5f48:	89 81       	ldd	r24, Y+1	; 0x01
    5f4a:	86 30       	cpi	r24, 0x06	; 6
    5f4c:	a8 f3       	brcs	.-22     	; 0x5f38 <keypad_init+0x2c>
		GPIO_setupPinDirection(KEYPAD_COLS_PORT, counter, PIN_INPUT);
	}
}
    5f4e:	0f 90       	pop	r0
    5f50:	cf 91       	pop	r28
    5f52:	df 91       	pop	r29
    5f54:	08 95       	ret

00005f56 <keypad_get_pressed_key>:

sint8 keypad_get_pressed_key(void){
    5f56:	df 93       	push	r29
    5f58:	cf 93       	push	r28
    5f5a:	cd b7       	in	r28, 0x3d	; 61
    5f5c:	de b7       	in	r29, 0x3e	; 62
    5f5e:	6b 97       	sbiw	r28, 0x1b	; 27
    5f60:	0f b6       	in	r0, 0x3f	; 63
    5f62:	f8 94       	cli
    5f64:	de bf       	out	0x3e, r29	; 62
    5f66:	0f be       	out	0x3f, r0	; 63
    5f68:	cd bf       	out	0x3d, r28	; 61
			}
		}
	}

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
    5f6a:	1a 8e       	std	Y+26, r1	; 0x1a
    5f6c:	f2 c0       	rjmp	.+484    	; 0x6152 <keypad_get_pressed_key+0x1fc>
		GPIO_writePortMasked(KEYPAD_ROWS_PORT, KEYPAD_ROWS_MASK, ~(1 << (rows_counter + KEYPAD_ROWS_OFFSET)));
    5f6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f70:	88 2f       	mov	r24, r24
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	9c 01       	movw	r18, r24
    5f76:	2c 5f       	subi	r18, 0xFC	; 252
    5f78:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7a:	81 e0       	ldi	r24, 0x01	; 1
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	02 c0       	rjmp	.+4      	; 0x5f84 <keypad_get_pressed_key+0x2e>
    5f80:	88 0f       	add	r24, r24
    5f82:	99 1f       	adc	r25, r25
    5f84:	2a 95       	dec	r18
    5f86:	e2 f7       	brpl	.-8      	; 0x5f80 <keypad_get_pressed_key+0x2a>
    5f88:	98 2f       	mov	r25, r24
    5f8a:	90 95       	com	r25
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	60 ef       	ldi	r22, 0xF0	; 240
    5f90:	49 2f       	mov	r20, r25
    5f92:	0e 94 26 0c 	call	0x184c	; 0x184c <GPIO_writePortMasked>
    5f96:	80 e0       	ldi	r24, 0x00	; 0
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	a8 e4       	ldi	r26, 0x48	; 72
    5f9c:	b2 e4       	ldi	r27, 0x42	; 66
    5f9e:	8d 8b       	std	Y+21, r24	; 0x15
    5fa0:	9e 8b       	std	Y+22, r25	; 0x16
    5fa2:	af 8b       	std	Y+23, r26	; 0x17
    5fa4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    5fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    5faa:	8f 89       	ldd	r24, Y+23	; 0x17
    5fac:	98 8d       	ldd	r25, Y+24	; 0x18
    5fae:	2b ea       	ldi	r18, 0xAB	; 171
    5fb0:	3a ea       	ldi	r19, 0xAA	; 170
    5fb2:	4a ea       	ldi	r20, 0xAA	; 170
    5fb4:	5e e3       	ldi	r21, 0x3E	; 62
    5fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fba:	dc 01       	movw	r26, r24
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	89 8b       	std	Y+17, r24	; 0x11
    5fc0:	9a 8b       	std	Y+18, r25	; 0x12
    5fc2:	ab 8b       	std	Y+19, r26	; 0x13
    5fc4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5fc6:	69 89       	ldd	r22, Y+17	; 0x11
    5fc8:	7a 89       	ldd	r23, Y+18	; 0x12
    5fca:	8b 89       	ldd	r24, Y+19	; 0x13
    5fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    5fce:	20 e0       	ldi	r18, 0x00	; 0
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	40 e8       	ldi	r20, 0x80	; 128
    5fd4:	5f e3       	ldi	r21, 0x3F	; 63
    5fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fda:	88 23       	and	r24, r24
    5fdc:	1c f4       	brge	.+6      	; 0x5fe4 <keypad_get_pressed_key+0x8e>
		__ticks = 1;
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	88 8b       	std	Y+16, r24	; 0x10
    5fe2:	91 c0       	rjmp	.+290    	; 0x6106 <keypad_get_pressed_key+0x1b0>
	else if (__tmp > 255)
    5fe4:	69 89       	ldd	r22, Y+17	; 0x11
    5fe6:	7a 89       	ldd	r23, Y+18	; 0x12
    5fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    5fea:	9c 89       	ldd	r25, Y+20	; 0x14
    5fec:	20 e0       	ldi	r18, 0x00	; 0
    5fee:	30 e0       	ldi	r19, 0x00	; 0
    5ff0:	4f e7       	ldi	r20, 0x7F	; 127
    5ff2:	53 e4       	ldi	r21, 0x43	; 67
    5ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ff8:	18 16       	cp	r1, r24
    5ffa:	0c f0       	brlt	.+2      	; 0x5ffe <keypad_get_pressed_key+0xa8>
    5ffc:	7b c0       	rjmp	.+246    	; 0x60f4 <keypad_get_pressed_key+0x19e>
	{
		_delay_ms(__us / 1000.0);
    5ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    6000:	7e 89       	ldd	r23, Y+22	; 0x16
    6002:	8f 89       	ldd	r24, Y+23	; 0x17
    6004:	98 8d       	ldd	r25, Y+24	; 0x18
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	4a e7       	ldi	r20, 0x7A	; 122
    600c:	54 e4       	ldi	r21, 0x44	; 68
    600e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	8c 87       	std	Y+12, r24	; 0x0c
    6018:	9d 87       	std	Y+13, r25	; 0x0d
    601a:	ae 87       	std	Y+14, r26	; 0x0e
    601c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    601e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6020:	7d 85       	ldd	r23, Y+13	; 0x0d
    6022:	8e 85       	ldd	r24, Y+14	; 0x0e
    6024:	9f 85       	ldd	r25, Y+15	; 0x0f
    6026:	20 e0       	ldi	r18, 0x00	; 0
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	4a e7       	ldi	r20, 0x7A	; 122
    602c:	53 e4       	ldi	r21, 0x43	; 67
    602e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6032:	dc 01       	movw	r26, r24
    6034:	cb 01       	movw	r24, r22
    6036:	88 87       	std	Y+8, r24	; 0x08
    6038:	99 87       	std	Y+9, r25	; 0x09
    603a:	aa 87       	std	Y+10, r26	; 0x0a
    603c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    603e:	68 85       	ldd	r22, Y+8	; 0x08
    6040:	79 85       	ldd	r23, Y+9	; 0x09
    6042:	8a 85       	ldd	r24, Y+10	; 0x0a
    6044:	9b 85       	ldd	r25, Y+11	; 0x0b
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	40 e8       	ldi	r20, 0x80	; 128
    604c:	5f e3       	ldi	r21, 0x3F	; 63
    604e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6052:	88 23       	and	r24, r24
    6054:	2c f4       	brge	.+10     	; 0x6060 <keypad_get_pressed_key+0x10a>
		__ticks = 1;
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	9f 83       	std	Y+7, r25	; 0x07
    605c:	8e 83       	std	Y+6, r24	; 0x06
    605e:	3f c0       	rjmp	.+126    	; 0x60de <keypad_get_pressed_key+0x188>
	else if (__tmp > 65535)
    6060:	68 85       	ldd	r22, Y+8	; 0x08
    6062:	79 85       	ldd	r23, Y+9	; 0x09
    6064:	8a 85       	ldd	r24, Y+10	; 0x0a
    6066:	9b 85       	ldd	r25, Y+11	; 0x0b
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	3f ef       	ldi	r19, 0xFF	; 255
    606c:	4f e7       	ldi	r20, 0x7F	; 127
    606e:	57 e4       	ldi	r21, 0x47	; 71
    6070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6074:	18 16       	cp	r1, r24
    6076:	4c f5       	brge	.+82     	; 0x60ca <keypad_get_pressed_key+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6078:	6c 85       	ldd	r22, Y+12	; 0x0c
    607a:	7d 85       	ldd	r23, Y+13	; 0x0d
    607c:	8e 85       	ldd	r24, Y+14	; 0x0e
    607e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	40 e2       	ldi	r20, 0x20	; 32
    6086:	51 e4       	ldi	r21, 0x41	; 65
    6088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	bc 01       	movw	r22, r24
    6092:	cd 01       	movw	r24, r26
    6094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	9f 83       	std	Y+7, r25	; 0x07
    609e:	8e 83       	std	Y+6, r24	; 0x06
    60a0:	0f c0       	rjmp	.+30     	; 0x60c0 <keypad_get_pressed_key+0x16a>
    60a2:	89 e1       	ldi	r24, 0x19	; 25
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	9d 83       	std	Y+5, r25	; 0x05
    60a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    60aa:	8c 81       	ldd	r24, Y+4	; 0x04
    60ac:	9d 81       	ldd	r25, Y+5	; 0x05
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	f1 f7       	brne	.-4      	; 0x60ae <keypad_get_pressed_key+0x158>
    60b2:	9d 83       	std	Y+5, r25	; 0x05
    60b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60b6:	8e 81       	ldd	r24, Y+6	; 0x06
    60b8:	9f 81       	ldd	r25, Y+7	; 0x07
    60ba:	01 97       	sbiw	r24, 0x01	; 1
    60bc:	9f 83       	std	Y+7, r25	; 0x07
    60be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c0:	8e 81       	ldd	r24, Y+6	; 0x06
    60c2:	9f 81       	ldd	r25, Y+7	; 0x07
    60c4:	00 97       	sbiw	r24, 0x00	; 0
    60c6:	69 f7       	brne	.-38     	; 0x60a2 <keypad_get_pressed_key+0x14c>
    60c8:	24 c0       	rjmp	.+72     	; 0x6112 <keypad_get_pressed_key+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ca:	68 85       	ldd	r22, Y+8	; 0x08
    60cc:	79 85       	ldd	r23, Y+9	; 0x09
    60ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    60d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    60d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60d6:	dc 01       	movw	r26, r24
    60d8:	cb 01       	movw	r24, r22
    60da:	9f 83       	std	Y+7, r25	; 0x07
    60dc:	8e 83       	std	Y+6, r24	; 0x06
    60de:	8e 81       	ldd	r24, Y+6	; 0x06
    60e0:	9f 81       	ldd	r25, Y+7	; 0x07
    60e2:	9b 83       	std	Y+3, r25	; 0x03
    60e4:	8a 83       	std	Y+2, r24	; 0x02
    60e6:	8a 81       	ldd	r24, Y+2	; 0x02
    60e8:	9b 81       	ldd	r25, Y+3	; 0x03
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    60ec:	f1 f7       	brne	.-4      	; 0x60ea <keypad_get_pressed_key+0x194>
    60ee:	9b 83       	std	Y+3, r25	; 0x03
    60f0:	8a 83       	std	Y+2, r24	; 0x02
    60f2:	0f c0       	rjmp	.+30     	; 0x6112 <keypad_get_pressed_key+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    60f4:	69 89       	ldd	r22, Y+17	; 0x11
    60f6:	7a 89       	ldd	r23, Y+18	; 0x12
    60f8:	8b 89       	ldd	r24, Y+19	; 0x13
    60fa:	9c 89       	ldd	r25, Y+20	; 0x14
    60fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6100:	dc 01       	movw	r26, r24
    6102:	cb 01       	movw	r24, r22
    6104:	88 8b       	std	Y+16, r24	; 0x10
    6106:	88 89       	ldd	r24, Y+16	; 0x10
    6108:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    610a:	89 81       	ldd	r24, Y+1	; 0x01
    610c:	8a 95       	dec	r24
    610e:	f1 f7       	brne	.-4      	; 0x610c <keypad_get_pressed_key+0x1b6>
    6110:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);
		for(cols_counter = 0; cols_counter < KEYPAD_COLS_COUNT; cols_counter++){
    6112:	19 8e       	std	Y+25, r1	; 0x19
    6114:	18 c0       	rjmp	.+48     	; 0x6146 <keypad_get_pressed_key+0x1f0>
			if(GPIO_readPin(KEYPAD_COLS_PORT, cols_counter + KEYPAD_COLS_OFFSET) == KEYPAD_BUTTON_PRESSED_LOGIC){
    6116:	89 8d       	ldd	r24, Y+25	; 0x19
    6118:	98 2f       	mov	r25, r24
    611a:	9e 5f       	subi	r25, 0xFE	; 254
    611c:	83 e0       	ldi	r24, 0x03	; 3
    611e:	69 2f       	mov	r22, r25
    6120:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_readPin>
    6124:	88 23       	and	r24, r24
    6126:	61 f4       	brne	.+24     	; 0x6140 <keypad_get_pressed_key+0x1ea>
				return (rows_counter*KEYPAD_COLS_COUNT + (cols_counter));
    6128:	8a 8d       	ldd	r24, Y+26	; 0x1a
    612a:	88 2f       	mov	r24, r24
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	88 0f       	add	r24, r24
    6130:	99 1f       	adc	r25, r25
    6132:	88 0f       	add	r24, r24
    6134:	99 1f       	adc	r25, r25
    6136:	98 2f       	mov	r25, r24
    6138:	89 8d       	ldd	r24, Y+25	; 0x19
    613a:	89 0f       	add	r24, r25
    613c:	8b 8f       	std	Y+27, r24	; 0x1b
    613e:	0f c0       	rjmp	.+30     	; 0x615e <keypad_get_pressed_key+0x208>

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
		GPIO_writePortMasked(KEYPAD_ROWS_PORT, KEYPAD_ROWS_MASK, ~(1 << (rows_counter + KEYPAD_ROWS_OFFSET)));
		_delay_us(50);
		for(cols_counter = 0; cols_counter < KEYPAD_COLS_COUNT; cols_counter++){
    6140:	89 8d       	ldd	r24, Y+25	; 0x19
    6142:	8f 5f       	subi	r24, 0xFF	; 255
    6144:	89 8f       	std	Y+25, r24	; 0x19
    6146:	89 8d       	ldd	r24, Y+25	; 0x19
    6148:	84 30       	cpi	r24, 0x04	; 4
    614a:	28 f3       	brcs	.-54     	; 0x6116 <keypad_get_pressed_key+0x1c0>
			}
		}
	}

#else
	for(rows_counter = 0; rows_counter < KEYPAD_ROWS_COUNT; rows_counter++){
    614c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    614e:	8f 5f       	subi	r24, 0xFF	; 255
    6150:	8a 8f       	std	Y+26, r24	; 0x1a
    6152:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6154:	84 30       	cpi	r24, 0x04	; 4
    6156:	08 f4       	brcc	.+2      	; 0x615a <keypad_get_pressed_key+0x204>
    6158:	0a cf       	rjmp	.-492    	; 0x5f6e <keypad_get_pressed_key+0x18>
				return (rows_counter*KEYPAD_COLS_COUNT + (cols_counter));
			}
		}
	}
#endif
	return -1;
    615a:	8f ef       	ldi	r24, 0xFF	; 255
    615c:	8b 8f       	std	Y+27, r24	; 0x1b
    615e:	8b 8d       	ldd	r24, Y+27	; 0x1b

}
    6160:	6b 96       	adiw	r28, 0x1b	; 27
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	f8 94       	cli
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	cd bf       	out	0x3d, r28	; 61
    616c:	cf 91       	pop	r28
    616e:	df 91       	pop	r29
    6170:	08 95       	ret

00006172 <main>:
uint16 ICU_captures_low_time_end = 0;
uint8 ICU_capturedPWNDutyCycle;
uint16 ICU_CapturedPWMFrequency;
uint8 ICU_CapturedPWMflag = 0;

int main(){
    6172:	df 93       	push	r29
    6174:	cf 93       	push	r28
    6176:	00 d0       	rcall	.+0      	; 0x6178 <main+0x6>
    6178:	cd b7       	in	r28, 0x3d	; 61
    617a:	de b7       	in	r29, 0x3e	; 62
	/*enable global interrupt*/
	SREG |= 1 << 7;
    617c:	af e5       	ldi	r26, 0x5F	; 95
    617e:	b0 e0       	ldi	r27, 0x00	; 0
    6180:	ef e5       	ldi	r30, 0x5F	; 95
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	80 81       	ld	r24, Z
    6186:	80 68       	ori	r24, 0x80	; 128
    6188:	8c 93       	st	X, r24

	/*initiate LCD*/
	lcd_init();
    618a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <lcd_init>
	/*display text on the LCD*/
	lcd_setPosition(0, 0);
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	60 e0       	ldi	r22, 0x00	; 0
    6192:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <lcd_setPosition>
	lcd_displayString("Freq: ");
    6196:	80 e6       	ldi	r24, 0x60	; 96
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <lcd_displayString>
	lcd_setPosition(1, 0);
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	60 e0       	ldi	r22, 0x00	; 0
    61a2:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <lcd_setPosition>
	lcd_displayString("Duty Cycle: ");
    61a6:	87 e6       	ldi	r24, 0x67	; 103
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <lcd_displayString>

	timer1_ICU_config_t timer1_ICU_config;
	/*initially set ICU to trigger a rising edge*/
	timer1_ICU_config.timer1_ICU_edge_select = timer1_ICU_rising_edge;
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	8a 83       	std	Y+2, r24	; 0x02
	/*timer1 runs with the same clock as CPU*/
	timer1_ICU_config.timer1_clock_select = timer1_no_prescaler;
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	89 83       	std	Y+1, r24	; 0x01
	/*initiate call back function*/
	timer1_ICU_callbackInit(timer1_ICU_callback);
    61b6:	84 ee       	ldi	r24, 0xE4	; 228
    61b8:	90 e3       	ldi	r25, 0x30	; 48
    61ba:	0e 94 0d 08 	call	0x101a	; 0x101a <timer1_ICU_callbackInit>
	/*initiate ICU with the configurations chosen*/
	timer1_ICU_init(&timer1_ICU_config);
    61be:	ce 01       	movw	r24, r28
    61c0:	01 96       	adiw	r24, 0x01	; 1
    61c2:	0e 94 74 07 	call	0xee8	; 0xee8 <timer1_ICU_init>
    61c6:	ff cf       	rjmp	.-2      	; 0x61c6 <main+0x54>

000061c8 <timer1_ICU_callback>:
	while(1){
	}
}

void timer1_ICU_callback(void){
    61c8:	ef 92       	push	r14
    61ca:	ff 92       	push	r15
    61cc:	0f 93       	push	r16
    61ce:	1f 93       	push	r17
    61d0:	df 93       	push	r29
    61d2:	cf 93       	push	r28
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
	if(icu_count_edges == 0){
    61d8:	80 91 9e 00 	lds	r24, 0x009E
    61dc:	88 23       	and	r24, r24
    61de:	51 f4       	brne	.+20     	; 0x61f4 <timer1_ICU_callback+0x2c>
		TCNT1 = 0;
    61e0:	ec e4       	ldi	r30, 0x4C	; 76
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	11 82       	std	Z+1, r1	; 0x01
    61e6:	10 82       	st	Z, r1
		icu_count_edges++;
    61e8:	80 91 9e 00 	lds	r24, 0x009E
    61ec:	8f 5f       	subi	r24, 0xFF	; 255
    61ee:	80 93 9e 00 	sts	0x009E, r24
    61f2:	c2 c0       	rjmp	.+388    	; 0x6378 <timer1_ICU_callback+0x1b0>
	}else if(icu_count_edges == 1){
    61f4:	80 91 9e 00 	lds	r24, 0x009E
    61f8:	81 30       	cpi	r24, 0x01	; 1
    61fa:	31 f4       	brne	.+12     	; 0x6208 <timer1_ICU_callback+0x40>
		icu_count_edges++;
    61fc:	80 91 9e 00 	lds	r24, 0x009E
    6200:	8f 5f       	subi	r24, 0xFF	; 255
    6202:	80 93 9e 00 	sts	0x009E, r24
    6206:	b8 c0       	rjmp	.+368    	; 0x6378 <timer1_ICU_callback+0x1b0>
	}else if(icu_count_edges == 2){
    6208:	80 91 9e 00 	lds	r24, 0x009E
    620c:	82 30       	cpi	r24, 0x02	; 2
    620e:	79 f4       	brne	.+30     	; 0x622e <timer1_ICU_callback+0x66>
		timer1_ICU_edgeSelect(timer1_ICU_falling_edge);
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	0e 94 1f 08 	call	0x103e	; 0x103e <timer1_ICU_edgeSelect>
		icu_count_edges++;
    6216:	80 91 9e 00 	lds	r24, 0x009E
    621a:	8f 5f       	subi	r24, 0xFF	; 255
    621c:	80 93 9e 00 	sts	0x009E, r24
		ICU_captures_based_time = timer1_ICU_getCapturedValue();
    6220:	0e 94 02 08 	call	0x1004	; 0x1004 <timer1_ICU_getCapturedValue>
    6224:	90 93 a0 00 	sts	0x00A0, r25
    6228:	80 93 9f 00 	sts	0x009F, r24
    622c:	a5 c0       	rjmp	.+330    	; 0x6378 <timer1_ICU_callback+0x1b0>
	}else if(icu_count_edges == 3){
    622e:	80 91 9e 00 	lds	r24, 0x009E
    6232:	83 30       	cpi	r24, 0x03	; 3
    6234:	79 f4       	brne	.+30     	; 0x6254 <timer1_ICU_callback+0x8c>
		timer1_ICU_edgeSelect(timer1_ICU_rising_edge);
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	0e 94 1f 08 	call	0x103e	; 0x103e <timer1_ICU_edgeSelect>
		icu_count_edges++;
    623c:	80 91 9e 00 	lds	r24, 0x009E
    6240:	8f 5f       	subi	r24, 0xFF	; 255
    6242:	80 93 9e 00 	sts	0x009E, r24
		ICU_captures_high_time_end = timer1_ICU_getCapturedValue();
    6246:	0e 94 02 08 	call	0x1004	; 0x1004 <timer1_ICU_getCapturedValue>
    624a:	90 93 a2 00 	sts	0x00A2, r25
    624e:	80 93 a1 00 	sts	0x00A1, r24
    6252:	92 c0       	rjmp	.+292    	; 0x6378 <timer1_ICU_callback+0x1b0>
	}else if(icu_count_edges == 4){
    6254:	80 91 9e 00 	lds	r24, 0x009E
    6258:	84 30       	cpi	r24, 0x04	; 4
    625a:	09 f0       	breq	.+2      	; 0x625e <timer1_ICU_callback+0x96>
    625c:	8d c0       	rjmp	.+282    	; 0x6378 <timer1_ICU_callback+0x1b0>
		TCNT1 = 0;
    625e:	ec e4       	ldi	r30, 0x4C	; 76
    6260:	f0 e0       	ldi	r31, 0x00	; 0
    6262:	11 82       	std	Z+1, r1	; 0x01
    6264:	10 82       	st	Z, r1
		timer1_ICU_disable();
    6266:	0e 94 e6 07 	call	0xfcc	; 0xfcc <timer1_ICU_disable>
		icu_count_edges = 0;
    626a:	10 92 9e 00 	sts	0x009E, r1
		ICU_captures_low_time_end = timer1_ICU_getCapturedValue();
    626e:	0e 94 02 08 	call	0x1004	; 0x1004 <timer1_ICU_getCapturedValue>
    6272:	90 93 a4 00 	sts	0x00A4, r25
    6276:	80 93 a3 00 	sts	0x00A3, r24
		ICU_capturedPWNDutyCycle =
    627a:	80 91 a1 00 	lds	r24, 0x00A1
    627e:	90 91 a2 00 	lds	r25, 0x00A2
    6282:	9c 01       	movw	r18, r24
    6284:	40 e0       	ldi	r20, 0x00	; 0
    6286:	50 e0       	ldi	r21, 0x00	; 0
    6288:	80 91 9f 00 	lds	r24, 0x009F
    628c:	90 91 a0 00 	lds	r25, 0x00A0
    6290:	cc 01       	movw	r24, r24
    6292:	a0 e0       	ldi	r26, 0x00	; 0
    6294:	b0 e0       	ldi	r27, 0x00	; 0
    6296:	79 01       	movw	r14, r18
    6298:	8a 01       	movw	r16, r20
    629a:	e8 1a       	sub	r14, r24
    629c:	f9 0a       	sbc	r15, r25
    629e:	0a 0b       	sbc	r16, r26
    62a0:	1b 0b       	sbc	r17, r27
    62a2:	d8 01       	movw	r26, r16
    62a4:	c7 01       	movw	r24, r14
    62a6:	24 e6       	ldi	r18, 0x64	; 100
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	40 e0       	ldi	r20, 0x00	; 0
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	bc 01       	movw	r22, r24
    62b0:	cd 01       	movw	r24, r26
    62b2:	0e 94 c3 31 	call	0x6386	; 0x6386 <__mulsi3>
    62b6:	7b 01       	movw	r14, r22
    62b8:	8c 01       	movw	r16, r24
    62ba:	80 91 a3 00 	lds	r24, 0x00A3
    62be:	90 91 a4 00 	lds	r25, 0x00A4
    62c2:	9c 01       	movw	r18, r24
    62c4:	40 e0       	ldi	r20, 0x00	; 0
    62c6:	50 e0       	ldi	r21, 0x00	; 0
    62c8:	80 91 9f 00 	lds	r24, 0x009F
    62cc:	90 91 a0 00 	lds	r25, 0x00A0
    62d0:	cc 01       	movw	r24, r24
    62d2:	a0 e0       	ldi	r26, 0x00	; 0
    62d4:	b0 e0       	ldi	r27, 0x00	; 0
    62d6:	28 1b       	sub	r18, r24
    62d8:	39 0b       	sbc	r19, r25
    62da:	4a 0b       	sbc	r20, r26
    62dc:	5b 0b       	sbc	r21, r27
    62de:	c8 01       	movw	r24, r16
    62e0:	b7 01       	movw	r22, r14
    62e2:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__udivmodsi4>
    62e6:	da 01       	movw	r26, r20
    62e8:	c9 01       	movw	r24, r18
    62ea:	80 93 a6 00 	sts	0x00A6, r24
				(((uint32)ICU_captures_high_time_end - (uint32)ICU_captures_based_time) * 100UL) /
				(((uint32)ICU_captures_low_time_end - (uint32)ICU_captures_based_time));
		ICU_CapturedPWMFrequency = (1000000UL) /
    62ee:	80 91 a3 00 	lds	r24, 0x00A3
    62f2:	90 91 a4 00 	lds	r25, 0x00A4
    62f6:	9c 01       	movw	r18, r24
    62f8:	40 e0       	ldi	r20, 0x00	; 0
    62fa:	50 e0       	ldi	r21, 0x00	; 0
    62fc:	80 91 9f 00 	lds	r24, 0x009F
    6300:	90 91 a0 00 	lds	r25, 0x00A0
    6304:	cc 01       	movw	r24, r24
    6306:	a0 e0       	ldi	r26, 0x00	; 0
    6308:	b0 e0       	ldi	r27, 0x00	; 0
    630a:	28 1b       	sub	r18, r24
    630c:	39 0b       	sbc	r19, r25
    630e:	4a 0b       	sbc	r20, r26
    6310:	5b 0b       	sbc	r21, r27
    6312:	80 e4       	ldi	r24, 0x40	; 64
    6314:	92 e4       	ldi	r25, 0x42	; 66
    6316:	af e0       	ldi	r26, 0x0F	; 15
    6318:	b0 e0       	ldi	r27, 0x00	; 0
    631a:	bc 01       	movw	r22, r24
    631c:	cd 01       	movw	r24, r26
    631e:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__udivmodsi4>
    6322:	da 01       	movw	r26, r20
    6324:	c9 01       	movw	r24, r18
    6326:	90 93 a8 00 	sts	0x00A8, r25
    632a:	80 93 a7 00 	sts	0x00A7, r24
				(((uint32)ICU_captures_low_time_end - (uint32)ICU_captures_based_time));
		lcd_setPosition(0, 6);
    632e:	80 e0       	ldi	r24, 0x00	; 0
    6330:	66 e0       	ldi	r22, 0x06	; 6
    6332:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <lcd_setPosition>
		lcd_displayNumber(ICU_CapturedPWMFrequency);
    6336:	80 91 a7 00 	lds	r24, 0x00A7
    633a:	90 91 a8 00 	lds	r25, 0x00A8
    633e:	cc 01       	movw	r24, r24
    6340:	a0 e0       	ldi	r26, 0x00	; 0
    6342:	b0 e0       	ldi	r27, 0x00	; 0
    6344:	bc 01       	movw	r22, r24
    6346:	cd 01       	movw	r24, r26
    6348:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <lcd_displayNumber>
		lcd_displayString(" HZ  ");
    634c:	84 e7       	ldi	r24, 0x74	; 116
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <lcd_displayString>
		lcd_setPosition(1, 12);
    6354:	81 e0       	ldi	r24, 0x01	; 1
    6356:	6c e0       	ldi	r22, 0x0C	; 12
    6358:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <lcd_setPosition>
		lcd_displayNumber(ICU_capturedPWNDutyCycle);
    635c:	80 91 a6 00 	lds	r24, 0x00A6
    6360:	88 2f       	mov	r24, r24
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	a0 e0       	ldi	r26, 0x00	; 0
    6366:	b0 e0       	ldi	r27, 0x00	; 0
    6368:	bc 01       	movw	r22, r24
    636a:	cd 01       	movw	r24, r26
    636c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <lcd_displayNumber>
		lcd_displayString(" %  ");
    6370:	8a e7       	ldi	r24, 0x7A	; 122
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <lcd_displayString>
	}
}
    6378:	cf 91       	pop	r28
    637a:	df 91       	pop	r29
    637c:	1f 91       	pop	r17
    637e:	0f 91       	pop	r16
    6380:	ff 90       	pop	r15
    6382:	ef 90       	pop	r14
    6384:	08 95       	ret

00006386 <__mulsi3>:
    6386:	62 9f       	mul	r22, r18
    6388:	d0 01       	movw	r26, r0
    638a:	73 9f       	mul	r23, r19
    638c:	f0 01       	movw	r30, r0
    638e:	82 9f       	mul	r24, r18
    6390:	e0 0d       	add	r30, r0
    6392:	f1 1d       	adc	r31, r1
    6394:	64 9f       	mul	r22, r20
    6396:	e0 0d       	add	r30, r0
    6398:	f1 1d       	adc	r31, r1
    639a:	92 9f       	mul	r25, r18
    639c:	f0 0d       	add	r31, r0
    639e:	83 9f       	mul	r24, r19
    63a0:	f0 0d       	add	r31, r0
    63a2:	74 9f       	mul	r23, r20
    63a4:	f0 0d       	add	r31, r0
    63a6:	65 9f       	mul	r22, r21
    63a8:	f0 0d       	add	r31, r0
    63aa:	99 27       	eor	r25, r25
    63ac:	72 9f       	mul	r23, r18
    63ae:	b0 0d       	add	r27, r0
    63b0:	e1 1d       	adc	r30, r1
    63b2:	f9 1f       	adc	r31, r25
    63b4:	63 9f       	mul	r22, r19
    63b6:	b0 0d       	add	r27, r0
    63b8:	e1 1d       	adc	r30, r1
    63ba:	f9 1f       	adc	r31, r25
    63bc:	bd 01       	movw	r22, r26
    63be:	cf 01       	movw	r24, r30
    63c0:	11 24       	eor	r1, r1
    63c2:	08 95       	ret

000063c4 <__udivmodsi4>:
    63c4:	a1 e2       	ldi	r26, 0x21	; 33
    63c6:	1a 2e       	mov	r1, r26
    63c8:	aa 1b       	sub	r26, r26
    63ca:	bb 1b       	sub	r27, r27
    63cc:	fd 01       	movw	r30, r26
    63ce:	0d c0       	rjmp	.+26     	; 0x63ea <__udivmodsi4_ep>

000063d0 <__udivmodsi4_loop>:
    63d0:	aa 1f       	adc	r26, r26
    63d2:	bb 1f       	adc	r27, r27
    63d4:	ee 1f       	adc	r30, r30
    63d6:	ff 1f       	adc	r31, r31
    63d8:	a2 17       	cp	r26, r18
    63da:	b3 07       	cpc	r27, r19
    63dc:	e4 07       	cpc	r30, r20
    63de:	f5 07       	cpc	r31, r21
    63e0:	20 f0       	brcs	.+8      	; 0x63ea <__udivmodsi4_ep>
    63e2:	a2 1b       	sub	r26, r18
    63e4:	b3 0b       	sbc	r27, r19
    63e6:	e4 0b       	sbc	r30, r20
    63e8:	f5 0b       	sbc	r31, r21

000063ea <__udivmodsi4_ep>:
    63ea:	66 1f       	adc	r22, r22
    63ec:	77 1f       	adc	r23, r23
    63ee:	88 1f       	adc	r24, r24
    63f0:	99 1f       	adc	r25, r25
    63f2:	1a 94       	dec	r1
    63f4:	69 f7       	brne	.-38     	; 0x63d0 <__udivmodsi4_loop>
    63f6:	60 95       	com	r22
    63f8:	70 95       	com	r23
    63fa:	80 95       	com	r24
    63fc:	90 95       	com	r25
    63fe:	9b 01       	movw	r18, r22
    6400:	ac 01       	movw	r20, r24
    6402:	bd 01       	movw	r22, r26
    6404:	cf 01       	movw	r24, r30
    6406:	08 95       	ret

00006408 <__prologue_saves__>:
    6408:	2f 92       	push	r2
    640a:	3f 92       	push	r3
    640c:	4f 92       	push	r4
    640e:	5f 92       	push	r5
    6410:	6f 92       	push	r6
    6412:	7f 92       	push	r7
    6414:	8f 92       	push	r8
    6416:	9f 92       	push	r9
    6418:	af 92       	push	r10
    641a:	bf 92       	push	r11
    641c:	cf 92       	push	r12
    641e:	df 92       	push	r13
    6420:	ef 92       	push	r14
    6422:	ff 92       	push	r15
    6424:	0f 93       	push	r16
    6426:	1f 93       	push	r17
    6428:	cf 93       	push	r28
    642a:	df 93       	push	r29
    642c:	cd b7       	in	r28, 0x3d	; 61
    642e:	de b7       	in	r29, 0x3e	; 62
    6430:	ca 1b       	sub	r28, r26
    6432:	db 0b       	sbc	r29, r27
    6434:	0f b6       	in	r0, 0x3f	; 63
    6436:	f8 94       	cli
    6438:	de bf       	out	0x3e, r29	; 62
    643a:	0f be       	out	0x3f, r0	; 63
    643c:	cd bf       	out	0x3d, r28	; 61
    643e:	09 94       	ijmp

00006440 <__epilogue_restores__>:
    6440:	2a 88       	ldd	r2, Y+18	; 0x12
    6442:	39 88       	ldd	r3, Y+17	; 0x11
    6444:	48 88       	ldd	r4, Y+16	; 0x10
    6446:	5f 84       	ldd	r5, Y+15	; 0x0f
    6448:	6e 84       	ldd	r6, Y+14	; 0x0e
    644a:	7d 84       	ldd	r7, Y+13	; 0x0d
    644c:	8c 84       	ldd	r8, Y+12	; 0x0c
    644e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6450:	aa 84       	ldd	r10, Y+10	; 0x0a
    6452:	b9 84       	ldd	r11, Y+9	; 0x09
    6454:	c8 84       	ldd	r12, Y+8	; 0x08
    6456:	df 80       	ldd	r13, Y+7	; 0x07
    6458:	ee 80       	ldd	r14, Y+6	; 0x06
    645a:	fd 80       	ldd	r15, Y+5	; 0x05
    645c:	0c 81       	ldd	r16, Y+4	; 0x04
    645e:	1b 81       	ldd	r17, Y+3	; 0x03
    6460:	aa 81       	ldd	r26, Y+2	; 0x02
    6462:	b9 81       	ldd	r27, Y+1	; 0x01
    6464:	ce 0f       	add	r28, r30
    6466:	d1 1d       	adc	r29, r1
    6468:	0f b6       	in	r0, 0x3f	; 63
    646a:	f8 94       	cli
    646c:	de bf       	out	0x3e, r29	; 62
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	ed 01       	movw	r28, r26
    6474:	08 95       	ret

00006476 <ltoa>:
    6476:	fa 01       	movw	r30, r20
    6478:	cf 93       	push	r28
    647a:	ff 93       	push	r31
    647c:	ef 93       	push	r30
    647e:	22 30       	cpi	r18, 0x02	; 2
    6480:	44 f1       	brlt	.+80     	; 0x64d2 <ltoa+0x5c>
    6482:	25 32       	cpi	r18, 0x25	; 37
    6484:	34 f5       	brge	.+76     	; 0x64d2 <ltoa+0x5c>
    6486:	c2 2f       	mov	r28, r18
    6488:	e8 94       	clt
    648a:	ca 30       	cpi	r28, 0x0A	; 10
    648c:	49 f4       	brne	.+18     	; 0x64a0 <ltoa+0x2a>
    648e:	97 fb       	bst	r25, 7
    6490:	3e f4       	brtc	.+14     	; 0x64a0 <ltoa+0x2a>
    6492:	90 95       	com	r25
    6494:	80 95       	com	r24
    6496:	70 95       	com	r23
    6498:	61 95       	neg	r22
    649a:	7f 4f       	sbci	r23, 0xFF	; 255
    649c:	8f 4f       	sbci	r24, 0xFF	; 255
    649e:	9f 4f       	sbci	r25, 0xFF	; 255
    64a0:	2c 2f       	mov	r18, r28
    64a2:	33 27       	eor	r19, r19
    64a4:	44 27       	eor	r20, r20
    64a6:	55 27       	eor	r21, r21
    64a8:	ff 93       	push	r31
    64aa:	ef 93       	push	r30
    64ac:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__udivmodsi4>
    64b0:	ef 91       	pop	r30
    64b2:	ff 91       	pop	r31
    64b4:	60 5d       	subi	r22, 0xD0	; 208
    64b6:	6a 33       	cpi	r22, 0x3A	; 58
    64b8:	0c f0       	brlt	.+2      	; 0x64bc <ltoa+0x46>
    64ba:	69 5d       	subi	r22, 0xD9	; 217
    64bc:	61 93       	st	Z+, r22
    64be:	b9 01       	movw	r22, r18
    64c0:	ca 01       	movw	r24, r20
    64c2:	60 50       	subi	r22, 0x00	; 0
    64c4:	70 40       	sbci	r23, 0x00	; 0
    64c6:	80 40       	sbci	r24, 0x00	; 0
    64c8:	90 40       	sbci	r25, 0x00	; 0
    64ca:	51 f7       	brne	.-44     	; 0x64a0 <ltoa+0x2a>
    64cc:	16 f4       	brtc	.+4      	; 0x64d2 <ltoa+0x5c>
    64ce:	cd e2       	ldi	r28, 0x2D	; 45
    64d0:	c1 93       	st	Z+, r28
    64d2:	10 82       	st	Z, r1
    64d4:	8f 91       	pop	r24
    64d6:	9f 91       	pop	r25
    64d8:	cf 91       	pop	r28
    64da:	0c 94 6f 32 	jmp	0x64de	; 0x64de <strrev>

000064de <strrev>:
    64de:	dc 01       	movw	r26, r24
    64e0:	fc 01       	movw	r30, r24
    64e2:	67 2f       	mov	r22, r23
    64e4:	71 91       	ld	r23, Z+
    64e6:	77 23       	and	r23, r23
    64e8:	e1 f7       	brne	.-8      	; 0x64e2 <strrev+0x4>
    64ea:	32 97       	sbiw	r30, 0x02	; 2
    64ec:	04 c0       	rjmp	.+8      	; 0x64f6 <strrev+0x18>
    64ee:	7c 91       	ld	r23, X
    64f0:	6d 93       	st	X+, r22
    64f2:	70 83       	st	Z, r23
    64f4:	62 91       	ld	r22, -Z
    64f6:	ae 17       	cp	r26, r30
    64f8:	bf 07       	cpc	r27, r31
    64fa:	c8 f3       	brcs	.-14     	; 0x64ee <strrev+0x10>
    64fc:	08 95       	ret

000064fe <_exit>:
    64fe:	f8 94       	cli

00006500 <__stop_program>:
    6500:	ff cf       	rjmp	.-2      	; 0x6500 <__stop_program>
